<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TalentOrg&#39; Interview (remote)</title>
      <link href="/2023/01/28/interview-of-remote-job-talentorg/"/>
      <url>/2023/01/28/interview-of-remote-job-talentorg/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><div class="markdown-question markdown-question-snippet text-left"><p>You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.</p><p>At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:</p><ul><li>An integer x - Record a new score of x.</li><li>"+" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.</li><li>"D" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.</li><li>"C" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.<br>Return the sum of all the scores on the record. The test cases are generated so that the answer fits in a 32-bit integer.</li></ul><pre><code>Example 1:<p>Input: ops &#x3D; [“5”,”2”,”C”,”D”,”+”]<br>Output: 30<br>Explanation:<br>“5” - Add 5 to the record, record is now [5].<br>“2” - Add 2 to the record, record is now [5, 2].<br>“C” - Invalidate and remove the previous score, record is now [5].<br>“D” - Add 2 * 5 &#x3D; 10 to the record, record is now [5, 10].<br>“+” - Add 5 + 10 &#x3D; 15 to the record, record is now [5, 10, 15].<br>The total sum is 5 + 10 + 15 &#x3D; 30.<br></code></pre></p><pre><code>Example 2:Input: ops = ["5","-2","4","C","D","9","+","+"]Output: 27Explanation:"5" - Add 5 to the record, record is now [5]."-2" - Add -2 to the record, record is now [5, -2]."4" - Add 4 to the record, record is now [5, -2, 4]."C" - Invalidate and remove the previous score, record is now [5, -2]."D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]."9" - Add 9 to the record, record is now [5, -2, -4, 9]."+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]."+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.</code></pre><pre><code>Example 3:Input: ops = ["1","C"]Output: 0Explanation:"1" - Add 1 to the record, record is now [1]."C" - Invalidate and remove the previous score, record is now [].Since the record is empty, the total sum is 0.</code></pre><p>Constraints:</p><p>1 &lt;= ops.length &lt;= 1000<br>ops[i] is "C", "D", "+", or a string representing an integer in the range [-3 * 104, 3 * 104].<br>For operation "+", there will always be at least two previous scores on the record.<br>For operations "C" and "D", there will always be at least one previous score on the record.</p></div><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><pre class="line-numbers language-function" data-language="function"><div class="caption"><span>solution(a) &#123;</span></div><code class="language-function">  &#x2F;&#x2F; Write your answer here  if (!Array.isArray(a) || a.length &lt;&#x3D; 0) return 0;  for (let i &#x3D;0; i &lt; a.length; i++) &#123;    let curStr &#x3D; (a[i]).toString().toUpperCase();    if(isNaN(+curStr))&#123;      switch (curStr)&#123;        case &#39;C&#39;:          if(i &gt; 0)&#123;            a.splice(i-1, 2)          &#125;;        case &#39;D&#39;:          if(i &gt;&#x3D; 1)&#123;            let nextNum &#x3D; parseInt(a[i-2]) * 2            a.splice(i-1,1,nextNum)          &#125;;        case &#39;+&#39;:          if(i &gt;&#x3D; 2)&#123;            let nextNum &#x3D; parseInt(a[i-1]) + parseInt(a[i-2])            a.splice(i,1,nextNum)          &#125;;      &#125;    &#125;  &#125;  function sum(arr) &#123;    let s &#x3D; 0;    arr.forEach(function(val, idx, arr) &#123;      s +&#x3D; parseInt(val);    &#125;, 0);    return s;  &#125;;  return sum(a)&#125;&#x2F;&#x2F; DO NOT DELETEmodule.exports &#x3D; &#123;  solution&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To be honest, I failed this interview, but I think it also could have been recorded and realized that I have to work on the Algorithms.</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote Job </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode</title>
      <link href="/2021/03/21/leetcode/"/>
      <url>/2021/03/21/leetcode/</url>
      
        <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h2><h3 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h3><p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p><p>Find and return the maximum profit you can achieve.</p><p>Example 1:</p><p>Input: prices &#x3D; [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.<br>Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.<br>Total profit is 4 + 3 &#x3D; 7.<br>Example 2:</p><p>Input: prices &#x3D; [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.<br>Total profit is 4.<br>Example 3:</p><p>Input: prices &#x3D; [7,6,4,3,1]<br>Output: 0<br>Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</p><p>Constraints:</p><p>1 &lt;&#x3D; prices.length &lt;&#x3D; 3 * 104<br>0 &lt;&#x3D; prices[i] &lt;&#x3D; 104</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230202012457IZJI9K.png?token=ALJ6LATTRHPQCZO5JBBPJN3D3KQKO" alt="Picsee-20230202012457.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; prices * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> valley <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> peak <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// point continues to increase if current prices large than next prices. until we fount the lowest price.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        valley <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valley<span class="token punctuation">,</span> <span class="token string">'valley'</span><span class="token punctuation">)</span>        <span class="token comment">// point continues to increase if current prices small than next prices. until we fount the highest price.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        peak <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>peak<span class="token punctuation">,</span><span class="token string">'peak'</span><span class="token punctuation">)</span>        <span class="token comment">// add all of the difference between peak and valley</span>        maxProfit <span class="token operator">+=</span> peak <span class="token operator">-</span> valley            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230202012530f3xrUj.png?token=ALJ6LAWMIMJ4BM4GK5H3YSDD3KQMQ" alt="Picsee-20230202012530.png"></p><blockquote><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solutions/127712/official-solution/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solutions/127712/official-solution/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The understod of the dom</title>
      <link href="/2020/02/04/dom/"/>
      <url>/2020/02/04/dom/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#dom-%E6%A0%91%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90">https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#dom-%E6%A0%91%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOC</title>
      <link href="/2020/01/28/hoc/"/>
      <url>/2020/01/28/hoc/</url>
      
        <content type="html"><![CDATA[<h1 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h1><h2 id="What’s-HOC"><a href="#What’s-HOC" class="headerlink" title="What’s HOC"></a>What’s HOC</h2><p>High of components is react component package with another react component. so that’s just a wrapper around react component.<br>such as the function model , we also call Class Factory Methods, we can use haskell to describe that</p><pre class="line-numbers language-none"><code class="language-none">HocFactory:: W: React.Compoent &#x3D;&gt; E: React.Component<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>W(WrapperComponent) refer to component has been wrapped.<br>E(EnhancedComponent) refers to a new HOC that returns a type of React.</p><p>Parcel definection have two different meanings.</p><ol><li>Props Proxy: HOC operates on props passed to WrapperComponent W.</li><li>Inheritance Inversion: HOC extends WrappeerCompoent W.</li></ol><h2 id="HOC-Factory-implementation-methods"><a href="#HOC-Factory-implementation-methods" class="headerlink" title="HOC Factory implementation methods"></a>HOC Factory implementation methods</h2><p>In this section, we will describe the implementation for the HOC factory.</p><h3 id="Props-Proxy"><a href="#Props-Proxy" class="headerlink" title="Props Proxy"></a>Props Proxy</h3><p>The simple implementation of Props Proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The main thing here is that the Hoc returns a React element of type WrappedComponent in the render method, and we also pass in the props  recieved by the HOC, which is where name <b>Props Proxy</b> comes from.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span> <span class="token comment">// equal </span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Both create a React Element for rendering in a reconciliation process within React. If you want to learn more about React Elements vs Components, see this article by Dan Abramov, and for more information on the reconciliation process, see the documentation.</p><p>(Note: the reconciliation process can be understood as the process within React of synchronising the virtual DOM to the real DOM, including comparing the old and new virtual DOM and calculating the minimum DOM operation)</p><h4 id="The-reconciliation-process"><a href="#The-reconciliation-process" class="headerlink" title="The reconciliation process"></a>The reconciliation process</h4><p>reconciliation process can be understood that unifies behaviour, and the HOC is an implementation based on this idea.</p><h5 id="Reconciliation-process-in-react"><a href="#Reconciliation-process-in-react" class="headerlink" title="Reconciliation process in react"></a>Reconciliation process in react</h5><p>The reconciliation process is understood as the process within React of synchronising the virtual DOM to the real DOM, including comparison of the old and new virtual DOM and calculation of the minimum DOM operation.</p><h2 id="What-can-i-do-with-Props-proxy"><a href="#What-can-i-do-with-Props-proxy" class="headerlink" title="What can i do with Props proxy"></a>What can i do with Props proxy</h2><ul><li>Manipulate props</li><li>Access to component instance by Refs</li><li>Extract state</li><li>Wrapping wrappedCompoent with other components</li></ul><h3 id="Manipulate-props"><a href="#Manipulate-props" class="headerlink" title="Manipulate props"></a>Manipulate props</h3><p>U can delete, add or change props that are passed to WrappedComponent.</p><blockquote><p>When u delete props, u must to be careful, because delete options will destroy the WrappedComponent.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">user</span><span class="token operator">:</span> currentLoggedInUser      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>newProps<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Access-to-component-instance-by-refs"><a href="#Access-to-component-instance-by-refs" class="headerlink" title="Access to component instance by refs"></a>Access to component instance by refs</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">refsHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">RefsHOC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">proc</span><span class="token punctuation">(</span><span class="token parameter">wrappedComponentInstance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      wrappedComponentInstance<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">proc</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Extract-state"><a href="#Extract-state" class="headerlink" title="Extract state"></a>Extract state</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onNameChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onNameChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">onNameChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">,</span>          <span class="token literal-property property">onChange</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onNameChange        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>newProps<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uses example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@ppHOC<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>For more information on the regular bi-directional binding HOC please click <a herf='https://link.zhihu.com/?target=https%3A//github.com/franleplant/react-hoc-examples/blob/master/pp_state.js'>link</a></p></blockquote><h3 id="Wrapping-wrappedComponent-with-other-components"><a href="#Wrapping-wrappedComponent-with-other-components" class="headerlink" title="Wrapping wrappedComponent with other components"></a>Wrapping wrappedComponent with other components</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'block'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>          <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><b>When u readding all of the content, u must know HOC is pure compoent with no side effects. if u want to use HOC to solve repeat tasks, u should create a bit of independency HOC.The HOC should be regular and no-effects.when u need create a completely component, u can combine two or more HOC.</b>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
