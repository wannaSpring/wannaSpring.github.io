<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>foundation</title>
      <link href="/2023/07/25/foundation/"/>
      <url>/2023/07/25/foundation/</url>
      
        <content type="html"><![CDATA[<h1 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h1><p>JS是一种单线程语言，它和多线程语言最大的不同就是只有一个线程，如果线程中有任务阻塞那么线程将出现排队情况。设计单线程的原因是因为JS在设计之初是用来作为浏览器的脚本语言的，为了防止处理dom多个线程处理出现资源抢占的情况，所以设计为单线程。单线程中又把任务分为同步任务和异步任务，而异步任务中将计时器，io操作等规划为宏任务，promise等规划为微任务。当出现任务时浏览器会将任务放到调用栈中等待主线程执行。在调用栈中同步任务会按照顺序执行，而异步任务则按照任务队列的形式进行执行。这个任务队列就行eventloop。一般来讲是执行完宏任务后寻找未执行的微任务，微任务执行完成后执行下一个宏任务，循环往复直至任务队列清空。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//   A</span><span class="token comment">// g</span><span class="token comment">// f</span><span class="token comment">// h</span><span class="token comment">// b</span><span class="token comment">// d</span><span class="token comment">// c</span><span class="token comment">// e</span><span class="token comment">// i</span><span class="token comment">// k</span><span class="token comment">// j</span><span class="token comment">// l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><p>JS和JAVA等语言依赖于GC回收机制，而C，C++等语言则是可以手动释放内存空间。<br>垃圾回收的基本思路是查找内存中的所有对象，然后查看哪些不需要，然后释放对象占用的内存。<br>在V8中，js的内存空间可以分为堆和栈，栈主要用处存在原始类型（即不存在引用类型的数据类型），堆会根据先进后出的原则进行垃圾清除。<br>堆中存放引用对象，我们主要讨论的就是GC的栈回收机制<br>G8回收的基本思想是依照日常使用的情况提出一种假设，即在js运行环境中的大部分对象存在时间很短，基于这个思想设计了新生代内存和老生代内存。</p><h2 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h2><p>新生代内存将内存空间均分为两份from和to，对象被初次分配时会进入from空间，在from空间不足或者超出阈值时，会进行Minor GC（即复制整理算法），检查存活对象然后整理连续移动到to同时释放from，循环往复。每经历一次Minor GC存活的对象age+1，一般超过两次后会晋升到老生代。</p><h2 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h2><p>老生代主要用处存放生命周期长或者经历多次minor GC存活的对象。老生代主要使用标记-清除 和 标记-整理两种算法。<br>标记清除，在标记阶段遍历所有对象并标记活动对象，在清除阶段清除非活动对象（即无引用<br>标记整理，在清除阶段之上，考虑内存连续性，进行排序整理，解决碎片化问题。<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230725170823DTP5KC.png" alt="Picsee-20230725170823.png"></p><p><a href="https://juejin.cn/post/7251381300246052921?searchId=202307251622516E42454380F3D805724B">V8</a></p><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><h2 id="promise-并发限制"><a href="#promise-并发限制" class="headerlink" title="promise 并发限制"></a>promise 并发限制</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">promisePool</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">functions<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>functions<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> functions<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;Function[]&#125; functions * @param &#123;number&#125; n * @return &#123;Function&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">promisePool</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">functions<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> task <span class="token keyword">of</span> functions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行当前任务</span>      <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 当queue的大小超过阈值后使用await阻塞for循环， 等待前面加入queue中的task的执行结果，以此确保queue的数量不超过阈值</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>size <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 确保所有任务执行完成后再返回, allSettled 无论成功失败都等待所有任务执行完毕后返回</span>      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> resolts<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * const sleep = (t) => new Promise(res => setTimeout(res, t)); * promisePool([() => sleep(500), () => sleep(400)], 1) *   .then(console.log) // After 900ms */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手写promise</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> State <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token string">'PENDING'</span><span class="token punctuation">,</span>  <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span>  <span class="token literal-property property">rejected</span><span class="token operator">:</span> <span class="token string">'REJECTED'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">excutor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> State<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> State<span class="token punctuation">.</span>pending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> State<span class="token punctuation">.</span>success<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> State<span class="token punctuation">.</span>pending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> State<span class="token punctuation">.</span>rejected<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFullfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> State<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onFullfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> State<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> State<span class="token punctuation">.</span>pending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">onFullfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/6850037281206566919?searchId=202307251753386AC19EC6721937015CF0">参考全部实现</a></p><h1 id="http-1-2-3"><a href="#http-1-2-3" class="headerlink" title="http 1, 2, 3"></a>http 1, 2, 3</h1><p>http1.1<br>存在的问题</p><ul><li>高延迟，队头阻塞</li><li>无状态</li><li>明文传输</li><li>不支持服务端推送<br>http2</li></ul><p>http2 基于 http和ssl架构增加了spdy协议，主要是用来解决http1.1存在的请求头巨大，队头阻塞问题，由于只是增加在应用和ssl层之间的层，因此可以很好的向下兼容。<br>其优点是基于tcp压缩了请求头，增加了服务端推送和多路复用和可选的加密通讯。但是人就存在tcp链接的延时和多路复用带来的服务器压力以及timeout问题。队头阻塞也有可能出现因为在多路复用中可能会存在请求失败然后多次renpost的情况<br>http3<br>h3是基于udp实现的quic协议，虽然是udp但是quic确保了可靠传输，确保数据可达。而且udp是不需要进行握手的，因此比tcp更快，并且quic还引入了类似http2的流和多路复用。<br><a href="https://juejin.cn/post/6995109407545622542?searchId=202307260937230CBDE746C75C3C66B269">http 1 2 3</a><br><a href="https://juejin.cn/post/7197070078360322109?searchId=202307261003252D5FCC07A473926D4F0A">http 面试</a></p><h2 id="httpcode"><a href="#httpcode" class="headerlink" title="httpcode"></a>httpcode</h2><p>301，303，305</p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><h1 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h1><h1 id="TCP-x2F-Ip-UDP"><a href="#TCP-x2F-Ip-UDP" class="headerlink" title="TCP&#x2F;Ip, UDP"></a>TCP&#x2F;Ip, UDP</h1><h1 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h1><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h2><h2 id="webpack-的核心原理是什么"><a href="#webpack-的核心原理是什么" class="headerlink" title="webpack 的核心原理是什么"></a>webpack 的核心原理是什么</h2><h2 id="热更新原理"><a href="#热更新原理" class="headerlink" title="热更新原理"></a>热更新原理</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230727143846ubGb7T.png" alt="Picsee-20230727143846.png"><br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230727144045DEBSOe.png" alt="Picsee-20230727144045.png"></p><p><code>npm run dev</code>启动阶段，webpack会插入两个runtime文件，然后监听代码改动通过内部的sendstats方法发送hash和ok，hash是用来作为下次更新的标记。然后创建http服务即我们常见的localhost80以及socket服务，建立连接后向本地服务发送hash和ok。此时用户访问，我们将webpack打包好的bundle和html进行展示。在修改代码阶段，重新编译生成hot-uopdate.js 和json布丁，执行webpackhotupdate（根据hash位置进行局部更新引入，然后发送hash和ok）<br><a href="https://juejin.cn/post/7049608872553611301">webpack-hotreload</a></p><h2 id="babel是什么"><a href="#babel是什么" class="headerlink" title="babel是什么"></a>babel是什么</h2><h2 id="babel的工作原理"><a href="#babel的工作原理" class="headerlink" title="babel的工作原理"></a>babel的工作原理</h2><h1 id="mock工程化"><a href="#mock工程化" class="headerlink" title="mock工程化"></a>mock工程化</h1><ul><li>硬编码</li><li>js拦截</li><li>网络代理拦截</li><li>mock-server<br>我们采用的是mock-server的形式，通过env配置不同的模式对数据进行mock处理，搭配yapi进行，具体的规则是在对应未完成的开发的借口增加mock-xx进行匹配其余则走正常的真实api</li></ul><h1 id="sentry原理"><a href="#sentry原理" class="headerlink" title="sentry原理"></a>sentry原理</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><a href="https://juejin.cn/post/7148364027817623589?searchId=202307261031045A93E33A081513704EAB#2">性能</a></p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p><a href="https://juejin.cn/post/6957475955858210823?searchId=202307261031045A93E33A081513704EAB">错误</a></p><p>每秒打印一次，直到count归0，忘记边界情况<br>ref，父子组件通讯，我直接给扯到redux&#x2F;mobx，flux上了，有点过于底层。深入也不能太偏离主意愿<br>ts语法忘记了，但是概念都记得需要补一下。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms</title>
      <link href="/2023/07/20/algorithms/"/>
      <url>/2023/07/20/algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="Simply"><a href="#Simply" class="headerlink" title="Simply"></a>Simply</h1><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">parseInt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 最简单的方法</span>    <span class="token comment">// let a = parseInt(line, 16);</span>    <span class="token comment">// console.log(a);</span>    <span class="token comment">// 通过转换进制计算。</span>    <span class="token comment">// 0xaa</span>    <span class="token comment">// a*16^0 + a* 16 ^ 1 </span>    <span class="token keyword">const</span> str <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> LetterMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">A</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> iter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> n <span class="token operator">:</span> LetterMap<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        iter <span class="token operator">=</span> iter <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">**</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'0xAA'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * *  * @param numbers int整型一维数组  * @param target int整型  * @return int整型一维数组 */</span><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span> <span class="token parameter">numbers <span class="token punctuation">,</span>  target</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// write code here</span>    <span class="token comment">// 暴力</span>    <span class="token comment">// const len = numbers.length;</span>    <span class="token comment">// for (let i = 0; i&lt;= len-1; i++) &#123;</span>    <span class="token comment">//     for(let j = i+ 1; j&lt;=len-1;j++)&#123;</span>    <span class="token comment">//         if(numbers[i] + numbers[j] === target)&#123;</span>    <span class="token comment">//             return [i+1, j+1];</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// map</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">twoSum</span> <span class="token operator">:</span> twoSum<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map的思想是</p><ul><li>判断条件， map中存在目标值-当前值的剩余值</li><li>如果存在就返回存储的下标，不存在就塞入当前项</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tree</title>
      <link href="/2023/05/19/tree/"/>
      <url>/2023/05/19/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="diffrent-type-of-tree-structure"><a href="#diffrent-type-of-tree-structure" class="headerlink" title="diffrent type of tree structure"></a>diffrent type of tree structure</h1><h3 id="simple-tree"><a href="#simple-tree" class="headerlink" title="simple tree"></a>simple tree</h3><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230517150030ytaxDQ.png" alt="Picsee-20230517150030.png"></p><h3 id="binary-tree"><a href="#binary-tree" class="headerlink" title="binary tree"></a>binary tree</h3><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230517150055WZh65C.png" alt="Picsee-20230517150055.png"><br>a parent must have two children. that’s a rule of binary tree, if the parent have more than two children, it can’t be called binary tree.</p><h3 id="tree-vs-linked-tree"><a href="#tree-vs-linked-tree" class="headerlink" title="tree vs linked tree."></a>tree vs linked tree.</h3><p>a linked list also is tree - just really long one that only has one child per parent in a long continuous chain. a tree is not necessarily be a linked list.<br>for example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">linkedList</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">tree</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>noticed the treenode holds the typical data and an array to continue refer to any children of the (parent) node. the linkedlist just keep tract to next node.</p><h1 id="tree-vocabulary-summary"><a href="#tree-vocabulary-summary" class="headerlink" title="tree vocabulary summary"></a>tree vocabulary summary</h1><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230517150651iAAFtz.png" alt="Picsee-20230517150651.png"></p><ul><li>key, node id </li><li>siblings, nodes under the same parent and on the same level </li><li>root, the top node of the tree.</li><li>subtree, once u isolate a part of broader tree, u can form a brand new tree with new relationship.</li></ul><h1 id="searching-binary-tree"><a href="#searching-binary-tree" class="headerlink" title="searching binary tree"></a>searching binary tree</h1><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202305171515066WVF9b.png" alt="Picsee-20230517151506.png"><br>searching tree must have those properties:</p><ul><li>it’s binary tree.</li><li>the left one must be less than the parent</li><li>the right one must be greater than the parent</li></ul><h3 id="the-sbt-implement"><a href="#the-sbt-implement" class="headerlink" title="the sbt implement."></a>the sbt implement.</h3><p>Tree</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Tree</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>  current <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// when we assign this.root to current, we just reference the root to current. so when we change current, we also will change root.</span>        current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          current<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// if we use recursive, the current will be assigned be new object, but the root also will be impacted.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>  current<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          current<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>  current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">hasNode</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> current<span class="token operator">=</span><span class="token keyword">null</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> current<span class="token punctuation">.</span>left<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">></span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> current<span class="token punctuation">.</span>right<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Tree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Node</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data         <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>use case</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个新的二叉搜索树对象</span><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一些节点并添加到树中</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印根节点</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'根节点:'</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="merkle-tree"><a href="#merkle-tree" class="headerlink" title="merkle tree"></a>merkle tree</h1><p>Merkle tree is a data structure that allows us to make efficient verification that data belong in large set of data.<br>They are commonly used in p2p where efficient proof of this nature will help increase the scalability of the network.<br>A Merkle tree is collection reduce to a single hash.</p><pre class="line-numbers language-none"><code class="language-none">   ABCDEFGH &lt;-- Merkle Root     &#x2F;    \  ABCD     EFGH  &#x2F; \      &#x2F; \ AB  CD   EF  GH&#x2F; \  &#x2F; \  &#x2F; \ &#x2F; \A B  C D  E F G H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Each signle letter reprsent hash. The combined letter represent concatenated hash that have been combined and then hashed to form new hash.</p><p>They allow us to verify if a piece of data is part of a larger data structure. <b>without having all of the data within that structure</b>.<br>this means they can be used to check incosistencies in all kinds of distributed systems.</p><p>For blockchain, storing transactions as Merkle tree allows us to look at a block and verify that a transaction was part of it by only having part of the data set.</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>the benefits of the merkle tree design – a recursion hashin-based algorithm  – is that allows for efficient proof that some data exists within the root hash constrution(actually contained in the block). a merkle proof confirmed specific transactions represented by a leaf or branch within merkle hash root.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519184902QGl5LL.png" alt="Picsee-20230519184902.png"></p><p>if i want prove c exist in the block, we only need use the root, h(a-b) and h(e-h). so that is effience.</p><h3 id="Logarithmic-scalming"><a href="#Logarithmic-scalming" class="headerlink" title="Logarithmic scalming."></a>Logarithmic scalming.</h3><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519185805Uvffb7.png" alt="Picsee-20230519185805.png"></p><p>The amount of proof pieces that you need scales logarithmically to the size of the array of data you need to feed into the Merkle tree hash algorithm. keeping the data storage lean and efficent is the reason behind using structured like Merkle tree.</p><h3 id="Merkle-Tree-Vocabulary-Summary"><a href="#Merkle-Tree-Vocabulary-Summary" class="headerlink" title="Merkle Tree Vocabulary Summary"></a>Merkle Tree Vocabulary Summary</h3><ul><li>Merkle tree, a special binary tree, that allowed just use targetProveHash and proof to verify is that equal with root.</li><li>Merkle root, the hash contained in the block header, which is derived from the hash of all the transactions in the block.</li><li>Merkle path, represents the information that user need to calculate the expected value for Merkle root for a  block, from their owner transactions hash contained in that block.</li><li>Merkle proof, prove the existence of a specific transaction in a specific block(without the user needing to examine all the transaction in block). it includes Merkle root and Merkle proof.</li></ul><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><p>Merkle tree is a very popular structure in blockchain. it’s importatnt to understand the low-level of blockchain storage and the implications of such a disicion</p><h1 id="partricia-Merkle-tries"><a href="#partricia-Merkle-tries" class="headerlink" title="partricia Merkle tries"></a>partricia Merkle tries</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Bitcoin is the frist blockchain-based contralization newwork ever. it popularizes the use of Merkle tree for scalable transactions inclusion. Ethereum also use Merkle tree but since Ethereum is different design. it also use ont other important tree data structures for some of its data storage needs: Partricia Merkle tries.</p><h2 id="Ethereum-block-structure"><a href="#Ethereum-block-structure" class="headerlink" title="Ethereum block structure"></a>Ethereum block structure</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202305192045539NsDFI.png" alt="Picsee-20230519204553.png"></p><h2 id="Trees-in-Ethereum"><a href="#Trees-in-Ethereum" class="headerlink" title="Trees in Ethereum"></a>Trees in Ethereum</h2><p>Ethereum make use a tree called “radix trie, also referenced to as a Partricia Merkle tree” and combine this data structure with Merkle tree to create Partricia Merkle Tries.</p><p>A redix trie is a tree like data structure that used to retrieve a string by value triversing down a branch of nodes that store acciocated key that together lead to the end value can be returned.</p><p>A Merkle trie is a data structure that store key-value pairing. just like hash-table. in addition to that. it allow us to verify data integrity and the inclusion of key-value pairs.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202305192045539NsDFI.png" alt="Picsee-20230519204553.png"></p><p>PMTs groups similar-value nodes together in the tree. this way searching for ‘help’ leads u along the same path as ‘hello’, the first three letter is same. good for space and efficiency.</p><h2 id="why-does-Etherum-use-a-PMTs"><a href="#why-does-Etherum-use-a-PMTs" class="headerlink" title="why does Etherum use a PMTs?"></a>why does Etherum use a PMTs?</h2><p>there are two different type of data:<br>Permenant:</p><ul><li>once a transaction occurs, that record is sealed forever.<ul><li>that means once u locate the transaction in a PMTs, u can return to the same path over and over to retrieve the same result.</li></ul></li></ul><p>Ephemeral:</p><ul><li>the Etherum, account state change all the time(ie. A user recieve some ether, interact with contract…)</li><li>nounce, balance, storageRoot, codeHash.</li></ul><p>It make sense Permenant and Ephemeral need storage separately. Merkle Tree, a perfect data structure for Permenant. PMTs are perfect for Ephemeral data.</p><h1 id="Etherum-Block-header"><a href="#Etherum-Block-header" class="headerlink" title="Etherum Block header"></a>Etherum Block header</h1><p>the block header contains many pieces of data. the block header is the hash result of all of the data element contained in the block. it’s like giftwrap of the all of the block data.</p><ul><li>state root, the root hash of the state trie</li><li>transaction root, the root hash of the transaction</li><li>receipt root, the root hash of the receipt trie</li></ul><h2 id="State-Trie"><a href="#State-Trie" class="headerlink" title="State Trie"></a>State Trie</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519214704LOIVt8.png" alt="Picsee-20230519214704.png"></p><p>as show in the above diagram, the state trie is mapping between address and account state.</p><p>it can be seen a global state that is constanly updated by transaction executions. all the information about account are stored in the world state trie and u can retrieve informantion by query it.</p><p>Account Example<br>as mentioned above, the state trie is just mapping that uses an address as the key and the account state(nount, balance) as the value returned. </p><h2 id="Transaction-Trie"><a href="#Transaction-Trie" class="headerlink" title="Transaction Trie"></a>Transaction Trie</h2><p>the transaction trie records transaction in Ethereum. once the block is mined, the transaction trie is never update.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519221351dcOw9O.png" alt="Picsee-20230519221351.png"></p><p>each transaction in Ethereum record multiple pieces properties  for each transaction such as gasPrice and value. </p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202305192220048z4yRO.png" alt="Picsee-20230519222004.png"><br>You can even try querying the transactions trie directly using <a herf='https://composer.alchemy.com/'>Alchemy Composer</herf>.</p><h2 id="Transaction-Receipt-Trie"><a href="#Transaction-Receipt-Trie" class="headerlink" title="Transaction Receipt Trie"></a>Transaction Receipt Trie</h2><p>outcomes of transactions. data including gasUsed and logs(events emitted are contained here)<br>Once the block is mined, the transaction receipt trie is never updated.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519222342e1W7xQ.png" alt="Picsee-20230519222342.png"><br>Try it out on the <code>&lt;a herf=&#39;https://composer.alchemy.com/&#39;&gt;Alchemy Composer&lt;/a&gt;</code> - just make sure to change the method to eth_getTransactionReceipt</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230519222433loEWhb.png" alt="Picsee-20230519222433.png"></p><p>the above diagram is an excellent visulaztion into how the trie all end up being committed in every block via their root hash. the raw data is stored elsewhere in Etherum, particularly achive nodes.</p><blockquote><p>good trview for <a href="https://medium.com/shyft-network/understanding-trie-databases-in-ethereum-9f03d2c3325d">PMTSs</a></p></blockquote><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Interview-base</title>
      <link href="/2023/02/17/interview/"/>
      <url>/2023/02/17/interview/</url>
      
        <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1-页面导入样式时，使用link和-import有什么区别-html"><a href="#1-页面导入样式时，使用link和-import有什么区别-html" class="headerlink" title="1.页面导入样式时，使用link和@import有什么区别(html)"></a>1.页面导入样式时，使用link和@import有什么区别(html)</h2><ol><li>link 属于html提供的标签</li><li>@import 属于 css 提供的标签</li><li>link 引入的样式在页面加载时同时加载，而@import是在页面加载完成之后加载</li><li>link 没有兼容问题，@import则需要在ES5以上版本</li><li>link 引入的可以通过js操作dom， 而@import 不可以。</li></ol><h2 id="2-html的元素有哪些（包含H5）？-html"><a href="#2-html的元素有哪些（包含H5）？-html" class="headerlink" title="2.html的元素有哪些（包含H5）？(html)"></a>2.html的元素有哪些（包含H5）？(html)</h2><p>块元素</p><ul><li>div</li><li>ul</li><li>li</li><li>header 头部</li><li>body 文本内容</li><li>title 标签</li><li>style 样式</li></ul><p>行内元素 </p><ul><li>span</li><li>a</li><li>td</li><li>tl</li><li>b</li><li>button</li></ul><h2 id="3-iframe框架都有哪些优缺点？-html"><a href="#3-iframe框架都有哪些优缺点？-html" class="headerlink" title="3.iframe框架都有哪些优缺点？(html)"></a>3.iframe框架都有哪些优缺点？(html)</h2><p>Props:</p><ol><li>可以用作跨域请求</li><li>单个iframe窗口刷新不会影响整体页面</li></ol><p>Cons:</p><ol><li>window.onload 会在所有iframe窗口加载完毕之后再执行</li><li>iframe 存在多个意味着需要加载多个css\js 文件，因此会加大服务器的负荷。</li><li>对搜索不友好</li><li>滚动条问题</li></ol><h2 id="4-HTML5的文件离线储存怎么使用，工作原理是什么？-html"><a href="#4-HTML5的文件离线储存怎么使用，工作原理是什么？-html" class="headerlink" title="4. HTML5的文件离线储存怎么使用，工作原理是什么？(html)"></a>4. HTML5的文件离线储存怎么使用，工作原理是什么？(html)</h2><p>使用<br>现有的web框架，例如vue，react等已经将离线存储合并到框架中，因此基本是开箱即用的<br>原理<br>当客户端请求服务器时首先注册一个service work，然后利用service work拦截并缓存页面所需要的资源，当离线的时，会优先从service work读取需要的资源。</p><h2 id="5-浏览器内多个标签页之间的通信方式有哪些？-html"><a href="#5-浏览器内多个标签页之间的通信方式有哪些？-html" class="headerlink" title="5. 浏览器内多个标签页之间的通信方式有哪些？(html)"></a>5. 浏览器内多个标签页之间的通信方式有哪些？(html)</h2><p>同源</p><ol><li>localstorage</li><li>cookie</li></ol><p>跨域</p><ol><li>websocket</li><li>postMessage (iframe 需要和父级页面通讯时可能会用到</li></ol><h2 id="6-常见的浏览器内核都有哪些？并介绍下你对内核的理解-html"><a href="#6-常见的浏览器内核都有哪些？并介绍下你对内核的理解-html" class="headerlink" title="6. 常见的浏览器内核都有哪些？并介绍下你对内核的理解(html)"></a>6. 常见的浏览器内核都有哪些？并介绍下你对内核的理解(html)</h2><p>浏览器内核分为渲染引擎和js引擎</p><ol><li><p>渲染引擎<br>用来渲染html,xml或者借助插件渲染pdf文件等，根据html标签生成布局树，渲染树等。<br>Chrome （webkit）<br>Safari  （webkit，和Chrome师出同门，但是后续Safari的webkit做了一些单独的改动）<br>Gecko （C++引擎，firefox）<br>Trident （IE 内核）<br>Presto （Opera 内核）</p></li><li><p>js引擎<br>执行和解析js文件<br>V8 （chrome）</p></li></ol><h2 id="7-html5中的form怎么关闭自动完成-html"><a href="#7-html5中的form怎么关闭自动完成-html" class="headerlink" title="7.html5中的form怎么关闭自动完成(html)"></a>7.html5中的form怎么关闭自动完成(html)</h2><p>autocomplete &#x3D; “off”</p><h2 id="8-为什么HTML5只需要写-lt-DOCTYPE-HTML-gt-就可以？-html"><a href="#8-为什么HTML5只需要写-lt-DOCTYPE-HTML-gt-就可以？-html" class="headerlink" title="8.为什么HTML5只需要写&lt;!DOCTYPE HTML&gt;就可以？(html)"></a>8.为什么HTML5只需要写<code>&lt;!DOCTYPE HTML&gt;</code>就可以？(html)</h2><p>H5之前以DTD保证浏览器的兼容性，还分为严格模式和标准模式，如果不写的话则会变成怪异模式<br>H5不基于DTD，所以只需要一个根元素即可。</p><h2 id="9-怎样在页面上实现一个圆形的可点击区域？-html"><a href="#9-怎样在页面上实现一个圆形的可点击区域？-html" class="headerlink" title="9. 怎样在页面上实现一个圆形的可点击区域？(html)"></a>9. 怎样在页面上实现一个圆形的可点击区域？(html)</h2><ol><li>div, radius: 50%</li><li>a, radius: 50%</li><li>button, radius: 50%</li><li>canvas 绘制圆，监听canvas</li></ol><h2 id="10-js放在html的-lt-body-gt-和-lt-head-gt-有什么区别？-html"><a href="#10-js放在html的-lt-body-gt-和-lt-head-gt-有什么区别？-html" class="headerlink" title="10. js放在html的&lt;body&gt;和&lt;head&gt;有什么区别？(html)"></a>10. js放在html的<code>&lt;body&gt;</code>和<code>&lt;head&gt;</code>有什么区别？(html)</h2><p>html按照标签顺序执行（未加defer || async标记的情况下），如果加js标签加在head就会导致dom树还没渲染，就加载js的情况。</p><h2 id="11-说说你对属性data-的理解-html"><a href="#11-说说你对属性data-的理解-html" class="headerlink" title="11.说说你对属性data-的理解(html)"></a>11.说说你对属性data-的理解(html)</h2><p>data- 是自定义属性，用来暂存非用户输入的值，在js中也能获取。</p><h2 id="12-请说说-lt-script-gt-、-lt-script-async-gt-和-lt-script-defer-gt-的区别-html"><a href="#12-请说说-lt-script-gt-、-lt-script-async-gt-和-lt-script-defer-gt-的区别-html" class="headerlink" title="12. 请说说&lt;script&gt;、&lt;script async&gt;和&lt;script defer&gt;的区别(html)"></a>12. 请说说<code>&lt;script&gt;、&lt;script async&gt;和&lt;script defer&gt;</code>的区别(html)</h2><p>script 立即加载<br>async 加载和渲染同时执行<br>defer 渲染完成后执行</p><h2 id="13-解释下你对GBK和UTF-8的理解？并说说页面上产生乱码的可能原因-html"><a href="#13-解释下你对GBK和UTF-8的理解？并说说页面上产生乱码的可能原因-html" class="headerlink" title="13. 解释下你对GBK和UTF-8的理解？并说说页面上产生乱码的可能原因(html)"></a>13. 解释下你对GBK和UTF-8的理解？并说说页面上产生乱码的可能原因(html)</h2><p>GBK 是中国使用的语言编码标准，包括简体和繁体<br>UTF-8 是全球通用的语言编码标准，<br>如果产生乱码，可能是html meta 标签的语言编码和实际使用不一致的情况</p><h2 id="14-说说你对-lt-meta-gt-标签的理解-html"><a href="#14-说说你对-lt-meta-gt-标签的理解-html" class="headerlink" title="14. 说说你对&lt;meta&gt;标签的理解(html)"></a>14. 说说你对<code>&lt;meta&gt;</code>标签的理解(html)</h2><ol><li>meta 最常见的用处是用来声明语言编码标准</li><li>此外 name:keywords: 配合seo使用</li></ol><h2 id="15-网页上的验证码是为了解决什么问题？说说你了解的验证码种类有哪些-html"><a href="#15-网页上的验证码是为了解决什么问题？说说你了解的验证码种类有哪些-html" class="headerlink" title="15.网页上的验证码是为了解决什么问题？说说你了解的验证码种类有哪些(html)"></a>15.网页上的验证码是为了解决什么问题？说说你了解的验证码种类有哪些(html)</h2><ol><li>防止 机器行为 （重复请求，注册）</li><li>保护服务器不会接受过多请求<br>图形，滑动，选字</li></ol><h2 id="16-DOM和BOM有什么区别-html"><a href="#16-DOM和BOM有什么区别-html" class="headerlink" title="16. DOM和BOM有什么区别(html)"></a>16. DOM和BOM有什么区别(html)</h2><p>BOM: Browser of model<br>DOM: Document of model<br>BOM 是独立于内容于浏览器进行交互的对象，是浏览器提供给js用来和浏览器交互的接口，例如Window对象下的方法，navigation, history,<br>DOM 是html提供给js的API接口，可以理解为用来操作html元素的接口，例如Document对象下的方法。<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230227162725aL5CT5.png?token=ALJ6LAVVI4JVZA6BAEC6PTLD7RU22" alt="Picsee-20230227162725.png"></p><h2 id="17-怪异模式Quirks和标准模式Standards有什么区别-html"><a href="#17-怪异模式Quirks和标准模式Standards有什么区别-html" class="headerlink" title="17. 怪异模式Quirks和标准模式Standards有什么区别(html)"></a>17. 怪异模式Quirks和标准模式Standards有什么区别(html)</h2><p>标准模式的宽度就是给定的本身，而怪异模式内容加padding + border而不算上margin<br>默认情况下浏览器使用的标准模式，而大家一般习惯使用怪异模式，所以只需要使用<code>border-sizing: border-box</code></p><h2 id="18-cookie-session-and-storage-BROWSER"><a href="#18-cookie-session-and-storage-BROWSER" class="headerlink" title="18. cookie, session and storage(BROWSER)"></a>18. cookie, session and storage(BROWSER)</h2><p>cookie 是一种协议，不属于服务端也不属于客服端，但是通常在服务端产生。<br>session 后端会话的一种机制<br>storage 分为localstorage 和sessionstorage<br>localstorage 是将数据永久存储在本地，存储到了电脑的内存和硬盘中，同源共享</p><ul><li>不会随着会话的关闭而消失</li><li>属性名相关的情况下会产生覆写</li><li>不大于5MB</li><li>存储的时候存储的是字符串</li></ul><p>sessionstorage 会话存储，不能共享，当页面关闭时数据也会消失</p><p>cookie 是http协议中的一部分，因为http是无状态协议，因此前后端为了验证是否登陆状态，而使用cookie，前端在获取到cookie后可以将cookie存储在浏览器，并且在每一次请求时在请求头中携带，服务端可以进行验证，以此确认登陆状态</p><p>session 是服务器存储的一种机制，服务器不会将session发送给浏览器。当客户端请求登陆时，会将账号密码一并发送给服务端，当服务端验证完成后，会生成一个session文件，之后的每一次请求，服务端会将session-id写入cookie并且将cookie发送给客户端，客户端在请求时将cookie携带发给服务端，服务端解密后得到session- ID，根据session-id去查看session文件，如果匹配则表明登陆成功，。</p><p>cookie vs session<br>存储</p><ul><li>cookie如果不设置过期时间，存储在内存中，随着浏览器关闭而消失，这种称为会话cookie，另外一种则会存储在内存中</li><li>session保存在服务器端</li></ul><p>存储大小</p><ul><li>cookie 不超过4kb</li><li>session 没有大小限制</li></ul><blockquote><p>详细可参考 <a href="https://juejin.cn/post/6844903957916024839">https://juejin.cn/post/6844903957916024839</a></p></blockquote><h2 id="19-webSocket怎么做兼容处理？-PROTOCOL"><a href="#19-webSocket怎么做兼容处理？-PROTOCOL" class="headerlink" title="19.webSocket怎么做兼容处理？(PROTOCOL)"></a>19.webSocket怎么做兼容处理？(PROTOCOL)</h2><p>socket.io:<br>Adobe flash socket (需要在服务器开一个额外的端口)<br>Forever iframe<br>Ajax long polling<br>Ajax multipart streaming<br>JSONP polling</p><h2 id="20-如何让元素固定在页面底部？有哪些比较好的实践？-CSS"><a href="#20-如何让元素固定在页面底部？有哪些比较好的实践？-CSS" class="headerlink" title="20.如何让元素固定在页面底部？有哪些比较好的实践？(CSS)"></a>20.如何让元素固定在页面底部？有哪些比较好的实践？(CSS)</h2><ol><li>abousulte 进行定位放到底部，需要自行计算footer的高度</li><li>table 使用表格布局进行划分，如果使用margin等会存在很大的麻烦</li><li>flex 布局，只需要在内容块增加flex:1, footer:0 即可，但是需要处理兼容问题<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.wrapper &#123;  display: flex;  flex-direction: column;  overflow: auto;&#125;.content &#123;    flex: 1;&#125;.footer &#123;    flex: 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://jelly.jd.com/article/6006b1045b6c6a01506c87e3">https://jelly.jd.com/article/6006b1045b6c6a01506c87e3</a></p></blockquote></li></ol><h2 id="21-说说你对WEB标准和W3C的理解与认识？-html"><a href="#21-说说你对WEB标准和W3C的理解与认识？-html" class="headerlink" title="21. 说说你对WEB标准和W3C的理解与认识？(html)"></a>21. 说说你对WEB标准和W3C的理解与认识？(html)</h2><p>WEB标准指的是需要符合ECMA和W3C<br>W3C是针对css,html,js,xml制定的规范开发者的协议和准备</p><h2 id="22-Form表单是怎么上传文件的？你了解它的原理吗？-html"><a href="#22-Form表单是怎么上传文件的？你了解它的原理吗？-html" class="headerlink" title="22. Form表单是怎么上传文件的？你了解它的原理吗？(html)"></a>22. Form表单是怎么上传文件的？你了解它的原理吗？(html)</h2><p><code>&lt;Input type = file/&gt;</code>是一个受控元素，使用这个元素可以上传文件，而浏览器在接受到文件后会将文件转为二进制，此时客户端需要和服务端约定好enctype，例如multipart&#x2F;form-data，服务端在接受到二进制数据后会将其转换为源文件并且保存。</p><h2 id="23-web-workers有用过吗？能帮我们解决哪些问题？-BROWSER"><a href="#23-web-workers有用过吗？能帮我们解决哪些问题？-BROWSER" class="headerlink" title="23.web workers有用过吗？能帮我们解决哪些问题？(BROWSER)"></a>23.web workers有用过吗？能帮我们解决哪些问题？(BROWSER)</h2><p>web workers 是h5提供的能力，提供多线程的能力，如果是运算密集任务可以放到另外一个线程执行，等运算完毕后再发送回主线程。并且可以充分利用多核cpu</p><h2 id="24-有用过HTML5的webSQL和IndexedDB吗？说说你对它们的理解-HTML"><a href="#24-有用过HTML5的webSQL和IndexedDB吗？说说你对它们的理解-HTML" class="headerlink" title="24.有用过HTML5的webSQL和IndexedDB吗？说说你对它们的理解(HTML)"></a>24.有用过HTML5的webSQL和IndexedDB吗？说说你对它们的理解(HTML)</h2><p>websql 和 indexdb都是客户端的存储方案，websql已经被放弃，indexdb的特点是：存储空间大，可以使用异步存储模式，存放键值对，支持数据库事务，同时可以存储多种类型包括js对象类型。</p><h2 id="25-写个例子说明HTML5在移动端如何打开APP-HTML"><a href="#25-写个例子说明HTML5在移动端如何打开APP-HTML" class="headerlink" title="25. 写个例子说明HTML5在移动端如何打开APP(HTML)"></a>25. 写个例子说明HTML5在移动端如何打开APP(HTML)</h2><p>在A标签内实现</p><ul><li>Android 使用deeplink唤起</li><li>ios 使用URL Scheme （目前已经通用ios &amp; abdroid）<ul><li>[scheme:][&#x2F;&#x2F;authority][path][?query][#fragment]</li></ul></li></ul><p>本质上就是寻找移动端的注册文件，如果存在则唤起，但是一般我们也可以增加唤起失败，跳转下载页面。</p><blockquote><p>详情 <a href="https://juejin.cn/post/7097784616961966094">https://juejin.cn/post/7097784616961966094</a></p></blockquote><h2 id="26-网站的TDK该怎么设置？它有什么作用？-HTML"><a href="#26-网站的TDK该怎么设置？它有什么作用？-HTML" class="headerlink" title="26. 网站的TDK该怎么设置？它有什么作用？(HTML)"></a>26. 网站的TDK该怎么设置？它有什么作用？(HTML)</h2><p>Title &amp; Describe： 搜索结果时候展现<br>Keywords:搜索引擎关键字</p><h2 id="27-说说form-data、x-www-form-urlencoded、raw、binary的区别是什么？-PROTOCOL"><a href="#27-说说form-data、x-www-form-urlencoded、raw、binary的区别是什么？-PROTOCOL" class="headerlink" title="27.说说form-data、x-www-form-urlencoded、raw、binary的区别是什么？(PROTOCOL)"></a>27.说说form-data、x-www-form-urlencoded、raw、binary的区别是什么？(PROTOCOL)</h2><ul><li>multipart&#x2F;form-data 其请求内容格式为Content-Type: multipart&#x2F;form-data,用来指定请求内容的数据编码格式，一般用来文件上传。</li><li>x-www-form-urlencoded 是默认的post格式，使用URLEncode方法</li><li>raw可以上传多种格式，txt，json，html等</li><li>binary 上传二进制数据</li></ul><h2 id="28-使用history路由方式时，你有自己动手配置过服务器端吗？为什么要配服务器端？怎么配-ROUTER"><a href="#28-使用history路由方式时，你有自己动手配置过服务器端吗？为什么要配服务器端？怎么配-ROUTER" class="headerlink" title="28. 使用history路由方式时，你有自己动手配置过服务器端吗？为什么要配服务器端？怎么配(ROUTER)"></a>28. 使用history路由方式时，你有自己动手配置过服务器端吗？为什么要配服务器端？怎么配(ROUTER)</h2><p>history 需要配合服务器请求资源，因此需要服务端配合返回一个固定的Index页面<br>以nginx为例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">tryfiles</span><span class="token operator">:</span> $uri $uri<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上面的 <a href="http://www.example.com/post">http://www.example.com/post</a> 为例，$uri 会匹配到 post，nginx 发现 dist 目录下下面没有 post 这个文件，也没有 post 这个文件夹，所以最后会返回 dist 目录下的 index.html。这样，index.html 被浏览器加载之后，前端路由就会工作，将用户需要的资源加载出来。而我们 build 出来的 css，js 文件，由于可以被 nginx 正确找到，则不会受到影响。</p><h2 id="29-history和hash两种路由方式的最大区别是什么？-ROUTER"><a href="#29-history和hash两种路由方式的最大区别是什么？-ROUTER" class="headerlink" title="29. history和hash两种路由方式的最大区别是什么？(ROUTER)"></a>29. history和hash两种路由方式的最大区别是什么？(ROUTER)</h2><p>history 页面刷新不会重新加载，需要服务端配合，使用pushstate和replacestate来操作url的变化<br>hash 由hash发生的url变化都会被浏览器记录，hash不会带过服务器，使用hahschange来监听url的变化</p><h2 id="30-请问什么是闭包？可以举一个闭包的例子吗？-JS"><a href="#30-请问什么是闭包？可以举一个闭包的例子吗？-JS" class="headerlink" title="30. 请问什么是闭包？可以举一个闭包的例子吗？(JS)"></a>30. 请问什么是闭包？可以举一个闭包的例子吗？(JS)</h2><p>闭包的定义是指在一个函数内部定义另一个函数，并且这个内部函数可以访问外部函数的变量。</p><h2 id="31-请问什么是原型链？如何实现继承？-JS"><a href="#31-请问什么是原型链？如何实现继承？-JS" class="headerlink" title="31. 请问什么是原型链？如何实现继承？(JS)"></a>31. 请问什么是原型链？如何实现继承？(JS)</h2><p>原型链指的是在JavaScript中所有对象都有一个原型对象，这个原型对象也是一个对象，对象又可以通过它的原型对象去访问其他对象，形成了一个链式结构，这个链式结构就是原型链。继承可以通过原型链实现，比如通过将一个对象的原型设置为另一个对象来实现继承。</p><h2 id="32-请问什么是-Event-Loop？在-JavaScript-中有哪些常见的异步编程方式？-JS"><a href="#32-请问什么是-Event-Loop？在-JavaScript-中有哪些常见的异步编程方式？-JS" class="headerlink" title="32. 请问什么是 Event Loop？在 JavaScript 中有哪些常见的异步编程方式？ (JS)"></a>32. 请问什么是 Event Loop？在 JavaScript 中有哪些常见的异步编程方式？ (JS)</h2><p>Event Loop是JavaScript的异步编程模型之一。它是一个事件循环机制，用于处理JavaScript中的异步事件。JavaScript中的异步事件有两种，一种是宏任务，比如setTimeout、setInterval等；另一种是微任务，比如Promise.then、MutationObserver等。在每一次事件循环中，先执行所有的微任务，再执行一个宏任务，然后再执行下一轮事件循环。async&#x2F;await也是基于Promise实现的异步编程方式，它也是通过微任务来实现的。</p><h2 id="33-请问什么是跨域？如何解决跨域问题？-PROTOCOL"><a href="#33-请问什么是跨域？如何解决跨域问题？-PROTOCOL" class="headerlink" title="33. 请问什么是跨域？如何解决跨域问题？(PROTOCOL)"></a>33. 请问什么是跨域？如何解决跨域问题？(PROTOCOL)</h2><p>跨域指的是浏览器不能直接访问其他域名下的资源，它是由浏览器的同源策略所导致的。同源策略要求网页只能够访问与自身所在的域名、协议、端口号相同的资源。解决跨域问题有多种方式，比如JSONP、CORS、代理、WebSocket等。</p><h2 id="34-请问如何优化前端性能？可以列举一些常见的优化方案吗？-PERFORMANCE"><a href="#34-请问如何优化前端性能？可以列举一些常见的优化方案吗？-PERFORMANCE" class="headerlink" title="34. 请问如何优化前端性能？可以列举一些常见的优化方案吗？(PERFORMANCE)"></a>34. 请问如何优化前端性能？可以列举一些常见的优化方案吗？(PERFORMANCE)</h2><p>前端性能优化可以从多个方面入手，包括代码方面、网络请求方面、渲染方面等。其中一些常见的优化方案包括：使用压缩和混淆工具来减少代码文件的大小，使用CDN加速网络请求，使用浏览器缓存来减少网络请求，使用图片懒加载和无限滚动来减少资源加载次数，避免布局抖动、减少重绘和回流等。</p><h2 id="35-请问什么是-Virtual-DOM？它和传统-DOM-有什么不同？-HTML"><a href="#35-请问什么是-Virtual-DOM？它和传统-DOM-有什么不同？-HTML" class="headerlink" title="35. 请问什么是 Virtual DOM？它和传统 DOM 有什么不同？(HTML)"></a>35. 请问什么是 Virtual DOM？它和传统 DOM 有什么不同？(HTML)</h2><ol><li>Virtual DOM（虚拟DOM）是指一个虚拟的DOM树，它是以JavaScript对象的形式表示，通过它来操作和更新真实的DOM树.Virtual DOM可以将DOM操作集中处理，避免频繁地操作DOM而导致页面性能下降。在进行DOM操作时，Virtual DOM会对比新旧DOM树的差异，并只更新差异部分，从而提高页面的渲染效率。</li><li>Virtual DOM和传统DOM的主要不同点在于，Virtual DOM通过JavaScript对象来表示DOM节点和其属性，从而避免了直接操作真实的DOM节点。这样可以提高渲染效率，同时也避免了一些常见的问题，比如浏览器兼容性、性能问题等。</li></ol><h2 id="请问什么是-Webpack？它的作用是什么？-Webpack"><a href="#请问什么是-Webpack？它的作用是什么？-Webpack" class="headerlink" title="请问什么是 Webpack？它的作用是什么？(Webpack)"></a>请问什么是 Webpack？它的作用是什么？(Webpack)</h2><p>webpack是一个模块打包工具，它可以将不同类型的文件（js，css，图片等）视为模块，并将他们打包成一个或者多个静态资源文件。此外webpack还提供了强大的插件和loader机制，使得开发者可以方便的进行代码压缩，分割和按需加载等操作。同时可以使用sass，less等预处理器来编写css</p><h2 id="请问什么是单向数据流？它和双向数据绑定有什么不同？（JS）"><a href="#请问什么是单向数据流？它和双向数据绑定有什么不同？（JS）" class="headerlink" title="请问什么是单向数据流？它和双向数据绑定有什么不同？（JS）"></a>请问什么是单向数据流？它和双向数据绑定有什么不同？（JS）</h2><p>单向数据流是指数据从父组件传递给子组件，子组件通过props接收数据，而无法修改父组件的数据。而双向数据绑定在这道题中的意思是指，数据可以在父子组件中双向流动，子组件不仅可以接受数据也可以通过事件的形式修改父组件的数据。在vue中我们可以用v-model实现。在react中，我们可以通过绑定方法的情况进行实现。</p><h2 id="请问如何实现前端路由？有哪些常见的前端路由框架？（ROUTER）"><a href="#请问如何实现前端路由？有哪些常见的前端路由框架？（ROUTER）" class="headerlink" title="请问如何实现前端路由？有哪些常见的前端路由框架？（ROUTER）"></a>请问如何实现前端路由？有哪些常见的前端路由框架？（ROUTER）</h2><p>前端路由指的是通过更改url路径来加载页面，即SPA模式，实现前端路由的方式有两种：一种是Hash（#）模式的路由，另外一种是History API得路由。常见的前端路由框架有react-router和vue router</p><h2 id="请问如何进行前端安全防范？可以列举一些常见的前端安全攻击方式和防范措施吗？（SAFETY）"><a href="#请问如何进行前端安全防范？可以列举一些常见的前端安全攻击方式和防范措施吗？（SAFETY）" class="headerlink" title="请问如何进行前端安全防范？可以列举一些常见的前端安全攻击方式和防范措施吗？（SAFETY）"></a>请问如何进行前端安全防范？可以列举一些常见的前端安全攻击方式和防范措施吗？（SAFETY）</h2><p>常见的安全问题有Xss，csrf等。预防xss攻击可以通过对用户输入的内容和转移来防止恶意脚本注入。预防CSRF攻击可以采用token验证，samesite等属性来防止跨站请求未沾。通过前端可以通过HTTPS，CSP等方式加强页面的安全性。<br>CSP是Content security policy，可以通过在http相应头中设置csp字段或者在html的meta标签形式来实现。</p><ol><li>在http中实现<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token operator">:</span> <span class="token keyword">default</span><span class="token operator">-</span>src <span class="token string">'self'</span><span class="token punctuation">;</span> script<span class="token operator">-</span>src <span class="token string">'self'</span> <span class="token string">'unsafe-inline'</span> <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span> img<span class="token operator">-</span>src <span class="token string">'self'</span> <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>其中，default-src 表示默认情况下，浏览器只能加载来自同源的资源，而 script-src 和 img-src 分别表示可以加载 JavaScript 和图片资源的来源。这里使用的 ‘self’ 表示可以从同源加载资源，而 <a href="https://example.com/">https://example.com</a> 则表示可以从该域名加载资源。注意，使用 unsafe-inline 可以允许内联脚本的使用，但这可能会增加安全风险。</p><ol start="2"><li>在 HTML 的 head 中使用 meta 标签，可以使用如下的方式来设置：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Security-Policy"</span> content<span class="token operator">=</span><span class="token string">"default-src 'self'; script-src 'self' 'unsafe-inline' https://example.com; img-src 'self' https://example.com;"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>这种方式的设置与上述在 HTTP 响应头中设置 CSP 的方式相似，只不过是使用 meta 标签来设置。<br>需要注意的是，CSP 的具体设置方式会因为网站的不同而有所差异，因此在实际应用中，需要根据实际情况进行设置。同时，CSP 也需要在网站开发和维护过程中不断进行调整和优化，以保证网站的安全性和可用性。</p><h2 id="32-请问浏览器缓存的分类有哪些？如何设置浏览器缓存？-Browser"><a href="#32-请问浏览器缓存的分类有哪些？如何设置浏览器缓存？-Browser" class="headerlink" title="32. 请问浏览器缓存的分类有哪些？如何设置浏览器缓存？(Browser)"></a>32. 请问浏览器缓存的分类有哪些？如何设置浏览器缓存？(Browser)</h2><p>浏览器缓存机制确实分为强缓存和协商缓存。其中，强缓存是通过设置HTTP响应头中的Cache-Control和Expires字段来实现的，浏览器可以根据这些字段的值来判断是否可以使用缓存。而协商缓存则是通过设置HTTP响应头中的Last-Modified和ETag字段来实现的，浏览器可以通过这些字段来判断缓存是否过期或者需要重新获取资源。需要注意的是，当Cache-Control和Expires都存在时，Cache-Control优先级更高。</p><p>当强缓存失效或者未命中时，浏览器会使用协商缓存来判断是否使用缓存副本，协商缓存会向服务器发送一个请求，询问当前的资源是否发生变化，如果资源未变化，服务器会返回204 NOT modified响应，浏览器可以使用缓存的副本。如果发生变化，服务器会返回新资源，浏览器会存储并且采用新的资源渲染。</p><p>如果需要强制使用强缓存，可以在响应中添加HTTP响应头</p><pre class="line-numbers language-none"><code class="language-none">Cache-control: max-age&#x3D;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xxx表示缓存时间，这告诉浏览器在缓存时间内可以直接从缓存中读取资源，而无需向浏览器发送请求。<br>强制使用强缓存，如果失败后，无法直接向服务器发送请求，除非清除浏览器缓存或者缓存国旗。所以这种方法只适用于资源更新要求不高的静态网站。</p><h2 id="33-请问-React-的生命周期函数有哪些？它们分别在什么时候被触发？-REACT"><a href="#33-请问-React-的生命周期函数有哪些？它们分别在什么时候被触发？-REACT" class="headerlink" title="33. 请问 React 的生命周期函数有哪些？它们分别在什么时候被触发？(REACT)"></a>33. 请问 React 的生命周期函数有哪些？它们分别在什么时候被触发？(REACT)</h2><p>react的生命周期分为三大阶段，挂载，更新和卸载。<br>在挂载阶段有componentwillmount,componentdidmount,componentWillReceiveProps<br>在更新阶段有componentwillupdate,componentshouldupdate, componentdidupdate<br>在卸载阶段有componentWillUnmount<br>需要注意的是，componentWillUpdate和componentDidUpdate并不是渲染执行结束前和渲染结束后的生命周期函数，它们是在组件更新前和更新后被调用的。</p><p>在挂载阶段constructor 调用，然后依次调用componentwillmount,render, componentdidmount三个函数。<br>在组件的props或者state发生变更时调用componentwillreceiveprops,shouldComponentUpdate、componentWillUpdate、render和componentDidUpdate.<br>在卸载阶段调用componentwillUNmount函数<br>如果需要实现一个生命周期，我们可以基于react.component进行实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件挂载之前调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件挂载之后调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件接收到新的props时调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件props或state发生变化时判断是否需要重新渲染组件</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件即将更新时调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件更新完成后调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在组件卸载时调用</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token comment">// 组件的渲染函数</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-请问算法中的时间复杂度和空间复杂度有什么意义？如何计算一个算法的时间复杂度和空间复杂度？（ALGOITHUM）"><a href="#34-请问算法中的时间复杂度和空间复杂度有什么意义？如何计算一个算法的时间复杂度和空间复杂度？（ALGOITHUM）" class="headerlink" title="34. 请问算法中的时间复杂度和空间复杂度有什么意义？如何计算一个算法的时间复杂度和空间复杂度？（ALGOITHUM）"></a>34. 请问算法中的时间复杂度和空间复杂度有什么意义？如何计算一个算法的时间复杂度和空间复杂度？（ALGOITHUM）</h2><p>空间复杂度是衡量算法所需的空间资源的一般使用大O记法表示，时间复杂度则是表示算法运行所需的时间资源，同样使用大O计法。两者可以帮助我们评估算法的效率，选择最优的算法。<br>大O记法描述的是算法的渐进复杂度。通常用O(F(n))，来表示空间或者时间复杂度，其中f(n)表示算法执行时间与输入规模n的增长关系。具体来说O(f(n))表示算法的执行时间或者空间在最坏情况下的增加率。<br>例如，一个算法的时间复杂度为 O(n^2)，表示在最坏情况下，算法的执行时间与输入规模 n 的平方成正比。另一个算法的时间复杂度为 O(n log n)，表示在最坏情况下，算法的执行时间与输入规模 n 的对数与 n 的乘积成正比。</p><h2 id="35-请简述-HTML5-中新增的语义化标签及其作用-HTML"><a href="#35-请简述-HTML5-中新增的语义化标签及其作用-HTML" class="headerlink" title="35. 请简述 HTML5 中新增的语义化标签及其作用(HTML)"></a>35. 请简述 HTML5 中新增的语义化标签及其作用(HTML)</h2><p>  语义化标签是为了让开发人员更好的阅读标签的作用，例如ul，li等</p><h2 id="36-解释-CSS-盒模型，包括-content、padding、border-和-margin-四个部分的作用-CSS"><a href="#36-解释-CSS-盒模型，包括-content、padding、border-和-margin-四个部分的作用-CSS" class="headerlink" title="36. 解释 CSS 盒模型，包括 content、padding、border 和 margin 四个部分的作用(CSS)"></a>36. 解释 CSS 盒模型，包括 content、padding、border 和 margin 四个部分的作用(CSS)</h2><p>  content 是内容盒子<br>  padding 是内边距<br>  border 是边框线宽<br>  margin 是外边距<br>  整个盒模型分为怪异盒子和标准盒子，标准盒子的宽度包含padding和border，怪异盒子的宽度仅包含content</p><h2 id="37-简述-Flex-布局和-Grid-布局，并说明两者之间的区别-CSS"><a href="#37-简述-Flex-布局和-Grid-布局，并说明两者之间的区别-CSS" class="headerlink" title="37. 简述 Flex 布局和 Grid 布局，并说明两者之间的区别(CSS)"></a>37. 简述 Flex 布局和 Grid 布局，并说明两者之间的区别(CSS)</h2><p>  flex 布局是一维弹性布局，设置flex权重后，flex盒子内的元素会根据剩余宽度自行布局，也可以通过flex-direction更改纵轴或者竖轴布局<br>  Grid布局为二维网格布局，可以分为行和列，通过grid-template-columns和grid-template-rows属性进行设置，设置每一个元素的比例，来分布盒子。<br>  flex布局的优势在一维状态下比较明显，简单易用，灵活度高，可以响应布局，缺点是不适用二维布局，存在兼容问题。<br>  Grid布局的优点是支持二维排列，虽然可以支持响应式布局，但是需要通过media queries实现。缺点是规则多，可读性不佳</p><h2 id="38-如何实现-CSS-动画？请列举一些-CSS-属性并说明其作用-CSS"><a href="#38-如何实现-CSS-动画？请列举一些-CSS-属性并说明其作用-CSS" class="headerlink" title="38. 如何实现 CSS 动画？请列举一些 CSS 属性并说明其作用 (CSS)"></a>38. 如何实现 CSS 动画？请列举一些 CSS 属性并说明其作用 (CSS)</h2><p>  Css动画我们可以通过animation实现，一般情况下我们需要对元素设置keyframe，以此规定动画在指定帧的行为</p><h2 id="39-移动端适配有哪些方案？请列举并说明各自的优缺点-CSS"><a href="#39-移动端适配有哪些方案？请列举并说明各自的优缺点-CSS" class="headerlink" title="39. 移动端适配有哪些方案？请列举并说明各自的优缺点(CSS)"></a>39. 移动端适配有哪些方案？请列举并说明各自的优缺点(CSS)</h2><p>  媒体查询：通过 CSS3 的媒体查询技术，根据不同的屏幕尺寸和设备类型，动态地改变页面样式。<br>  优点：能够根据不同设备的屏幕尺寸和像素密度进行适配，开发成本相对较低。<br>  缺点：对于屏幕尺寸变化较大的设备，布局可能会失真。</p><p>  rem 布局：通过设置根元素的字体大小，根据屏幕尺寸动态计算出各个元素的大小，从而实现适配。<br>  优点：适配效果比较稳定，适合多种屏幕尺寸和分辨率的设备。<br>  缺点：需要在不同设备的屏幕尺寸和像素密度下进行调试，开发成本相对较高。</p><p>  flexbox 布局：通过 CSS3 的 flexbox 布局，实现自适应布局。<br>  优点：能够根据不同设备的屏幕尺寸和像素密度进行适配，开发成本相对较低。<br>  缺点：对于某些老旧设备的浏览器支持不好。</p><p>  viewport 布局：通过设置 viewport 的属性，改变设备的默认缩放比例，实现适配。<br>  优点：能够适应不同尺寸的设备，实现自适应布局。<br>  缺点：需要针对不同的设备进行调整，不够灵活。</p><h2 id="40-解释-JavaScript-中的“传参是按值传递还是按引用传递”，并举例说明-JS"><a href="#40-解释-JavaScript-中的“传参是按值传递还是按引用传递”，并举例说明-JS" class="headerlink" title="40. 解释 JavaScript 中的“传参是按值传递还是按引用传递”，并举例说明 (JS)"></a>40. 解释 JavaScript 中的“传参是按值传递还是按引用传递”，并举例说明 (JS)</h2><p>  按值传递还是按引用船体需要根据数据类型进行分析。基本数据类型，例如数字，字符串是按值传递的，即传递的是值的副本，修改值不会影响原始变量。而对复杂变量，例如数组，对象等，是按引用传递的，修改值会影响原来的值。</p><h2 id="41-解释-JavaScript-中的-this-关键字，并说明其指向的具体对象-JS"><a href="#41-解释-JavaScript-中的-this-关键字，并说明其指向的具体对象-JS" class="headerlink" title="41. 解释 JavaScript 中的 this 关键字，并说明其指向的具体对象 (JS)"></a>41. 解释 JavaScript 中的 this 关键字，并说明其指向的具体对象 (JS)</h2><p>  this 关键字是指向当前作用域的，如果在函数外部使用，在面向浏览器中会被指向window，而node中会指向global。<br>  使用apply，call，bind等可以改变函数执行时的this指向。<br>  在箭头函数中，this的指向是它所处的词法作用域，而不是动态绑定的，一半是父级作用域的this</p><h2 id="42-解释-Promise-的概念及其使用方法，并解释-Promise-中的-then-和-catch-方法-（JS）"><a href="#42-解释-Promise-的概念及其使用方法，并解释-Promise-中的-then-和-catch-方法-（JS）" class="headerlink" title="42. 解释 Promise 的概念及其使用方法，并解释 Promise 中的 then 和 catch 方法 （JS）"></a>42. 解释 Promise 的概念及其使用方法，并解释 Promise 中的 then 和 catch 方法 （JS）</h2><p>  promise是一种异步编程的解决方案，它通过对异步操作的结果进行封装，使得异步操作符合同步操作的写法风格，它使用resolve和reject表示异步操作的结果。<br>  在promise中通过then方法接受promise返回的结果，then会接受两个参数，一个是成功的回调，一个是失败的回调，then方法返回的依旧是promise对象，可以继续使用then方法进行链式调用<br>  catch是promise的错误捕捉方法，promise中的任意一个then方法或者promise对象本身出错都会立即执行catch方法</p><h2 id="43-解释-JavaScript-中的深拷贝和浅拷贝的概念，列举常见的实现方法-（JS）"><a href="#43-解释-JavaScript-中的深拷贝和浅拷贝的概念，列举常见的实现方法-（JS）" class="headerlink" title="43. 解释 JavaScript 中的深拷贝和浅拷贝的概念，列举常见的实现方法 （JS）"></a>43. 解释 JavaScript 中的深拷贝和浅拷贝的概念，列举常见的实现方法 （JS）</h2><p>深拷贝是指在拷贝一个对象时，不仅拷贝对象的基本数据类型，还拷贝它的引用对象，也就是说在堆内存中新建一个数据，不管是引用类型还是基本数据类型，都会开闭新的空间，彼此不影响<br>浅拷贝是指在拷贝对象时，只拷贝基本数据类型，而不拷贝引用对象，即拷贝对象的指针，而不是本身，在新的对象中修改对象会导致原始对象中的引用类型变量也发生变化。<br>实现方法。</p><p>手写递归实现深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      reuslt<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过JSON序列化和反序列化实现<br><code>&lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt;</code><br>也可以通过lodash实现</p><h2 id="PROMISE-A-JS"><a href="#PROMISE-A-JS" class="headerlink" title="PROMISE A+ (JS)"></a>PROMISE A+ (JS)</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化Promise的状态为pending</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 定义resolve和reject方法，用于改变Promise的状态</span>    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 只有在Promise状态为pending时才能改变状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token comment">// 执行所有已注册的onFulfilled回调函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 只有在Promise状态为pending时才能改变状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>        <span class="token comment">// 执行所有已注册的onRejected回调函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 执行executor函数，传入resolve和reject方法</span>      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果executor函数抛出异常，直接调用reject方法</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建新的Promise实例</span>    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token function-variable function">onFulfilledCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果onFulfilled是一个函数，则调用它，并传入当前Promise的值</span>          <span class="token comment">// 如果onFulfilled不是一个函数，则直接将当前Promise的值传递给下一个Promise</span>          <span class="token keyword">const</span> x <span class="token operator">=</span> onFulfilled <span class="token operator">?</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>          <span class="token comment">// 递归处理返回值，决定新Promise的状态和值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果执行onFulfilled回调函数时抛出异常，调用reject方法</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token function-variable function">onRejectedCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果onRejected是一个函数，则调用它，并传入当前Promise的拒因</span>          <span class="token comment">// 如果onRejected不是一个函数，则直接将当前Promise的拒因传递给下一个Promise</span>          <span class="token keyword">const</span> x <span class="token operator">=</span> onRejected <span class="token operator">?</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">:</span> reason<span class="token punctuation">;</span>          <span class="token comment">// 递归处理返回值，决定新Promise的状态和值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果执行onRejected回调函数时抛出异常，调用reject方法</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"fulfilled"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果当前Promise已经变为fulfilled状态，异步执行onFulfilled回调函数</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onFulfilledCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果当前Promise已经变为rejected状态，异步执行onRejected回调函数</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onRejectedCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果当前Promise还处于pending状态，将onFulfilled/onRejected回调函数存储起来</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onFulfilledCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onRejectedCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回新的Promise实例</span>    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果新的Promise实例和返回值相等，则直接抛出错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Chaining cycle detected for promise"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断返回值的类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取then方法</span>        <span class="token keyword">const</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果返回值是一个Promise，调用它的then方法</span>          <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>            x<span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 递归处理返回值</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>              called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 如果调用then方法时发生错误，调用reject方法</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>              called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果返回值是一个普通值，直接将其作为新Promise的值</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果调用then方法时抛出异常，调用reject方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果返回值是一个普通值，直接将其作为新Promise的值</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// catch方法实际上是then方法的简写，只注册onRejected回调函数</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Promise.resolve方法返回一个已经resolved的Promise实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Promise.reject方法返回一个已经rejected的Promise实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Promise.all方法接收一个Promise数组，返回一个新的Promise实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将每个Promise的值存储起来</span>            results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 如果所有Promise都已经resolved，则resolve新的Promise</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果任何一个Promise被rejected，则reject新的Promise</span>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Promise.race方法接收一个Promise数组，返回一个新的Promise实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果任何一个Promise被resolved，则resolve新的Promise</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果任何一个Promise被rejected，则reject新的Promise</span>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="44-简述常见的排序算法，并给出具体实现-Algorithms"><a href="#44-简述常见的排序算法，并给出具体实现-Algorithms" class="headerlink" title="44. 简述常见的排序算法，并给出具体实现 (Algorithms)"></a>44. 简述常见的排序算法，并给出具体实现 (Algorithms)</h2><p>冒泡排序，O(n^2),比较相邻两个元素大小，然后交换位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 此处的 len - i表示未完成排序的列表，例如i=0时，arr的长度为4时，我们需要的第二个循环中应该是0，1，2,</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>快排，O(nlog(n)),找到一个对比数字，然后以此为基准，将小于基准元素的值移到左边的数组，大于基准的值移到右边，然后递归快排方法进行排序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">quicksort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span><span class="token function">quicksort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="45-简述-React-Hooks-的使用，列举一些常用的-Hook-并说明其作用"><a href="#45-简述-React-Hooks-的使用，列举一些常用的-Hook-并说明其作用" class="headerlink" title="45. 简述 React Hooks 的使用，列举一些常用的 Hook 并说明其作用"></a>45. 简述 React Hooks 的使用，列举一些常用的 Hook 并说明其作用</h2><ol><li>useState: 用于声明状态，返回一个数组，包含状态和修改状态的函数，它可以让函数组件拥有变更状态的能力</li><li>useEffect: 用于组件挂载，更新和卸载执行副作用，例如数据获取、DOM操作、异步请求等，可以看作是CompoentDidMount，componentDidupdate和componentWillUnmount三个生命周期的组合</li><li>useContext: 配合createContext使得子组件获得共享的局部或者全局状态</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createContext<span class="token punctuation">,</span> useContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> myContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">parentComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> ChangeData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>ChildComponent<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Mycontext<span class="token punctuation">.</span>Provider<span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">ChildComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Mycontext<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>useReducer: 类似于Redux的状态管理库，用于批量管理函数组件状态</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'INCREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'DECREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span>dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div onClick <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'INCREMENT'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div onClick <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'DECREMENT'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>useCallback: 用于缓存函数，避免函数重新渲染导致重复执行，提高性能</li><li>useMemo: 类似于useCallback， 用于缓存计算结果，避免重复计算导致的性能问题。 useCallback和useMemo本质上是相同的，都是为了提高react组件的性能，避免重复计算和生成函数。<br>在源代码中<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">useMemo</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> callback<span class="token punctuation">,</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token parameter">factory<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取上一次的memoized 值和依赖项</span>  <span class="token keyword">const</span> lastResult <span class="token operator">=</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>  <span class="token keyword">const</span> lastDeps <span class="token operator">=</span> hook<span class="token punctuation">.</span>memoizedStateDeps<span class="token punctuation">;</span>  <span class="token keyword">const</span> same <span class="token operator">=</span> <span class="token function">areHookInputsEqual</span><span class="token punctuation">(</span>deps<span class="token punctuation">,</span> lastDeps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断依赖项是否变化</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    hook<span class="token punctuation">.</span>memoizedStateDeps <span class="token operator">=</span> deps<span class="token punctuation">;</span>    <span class="token keyword">return</span> lastResult<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果发生变化，则使用factor计算memoized值</span>  <span class="token keyword">const</span> nextResult <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hook<span class="token punctuation">.</span>memoizedStateDeps <span class="token operator">=</span> deps  hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> nextResult<span class="token punctuation">;</span>  <span class="token keyword">return</span> nextResult<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>useRef: 创建引用，在组件的整个生命周期内访问，并可以保存一些数据。主要作用是获取DOM和使用Ref使得子组件使用父组件的方法。</li></ol><h2 id="46-React-父子组件通讯的方式-REACT"><a href="#46-React-父子组件通讯的方式-REACT" class="headerlink" title="46. React 父子组件通讯的方式 (REACT)"></a>46. React 父子组件通讯的方式 (REACT)</h2><p>父子组件通讯主要通过props和Context进行，父组件可以通过props传递数据和函数到子组件，子组件通过props获取父组件传递的数据和函数进行操作，然后再通过回调函数的方式将操作后的结果传递回父组件。<br>此外也可以通过react Context 来实现全局状态的管理。</p><blockquote><p>一般情况下需要避免子组件修改父组件值的情况，避免组件不可控。此外还需要注意子组件最好抽离为无状态组件，所展示的数据均来自父级别的状态组件。</p></blockquote><h2 id="请简述一下-React-中常用的状态管理工具有哪些，以及它们的优缺点-REACT-STATEMENT"><a href="#请简述一下-React-中常用的状态管理工具有哪些，以及它们的优缺点-REACT-STATEMENT" class="headerlink" title="请简述一下 React 中常用的状态管理工具有哪些，以及它们的优缺点 (REACT STATEMENT)"></a>请简述一下 React 中常用的状态管理工具有哪些，以及它们的优缺点 (REACT STATEMENT)</h2><ol><li>Redux<br>redux是一个基于flux架构的状态管理库，它的核心概念包括store、action和reducer，通过这三个概念来管理应用的状态，redux的优点是管理复杂状态方便，可以避免组件间的状态传递问题，同时通过中间件支持异步操作，适合大型应用的状态管理。缺点是使用复杂，而且会增加代码的复杂性和耦合性。</li><li>MOBX<br>mobx是基于响应式编程的状态管理库，它提供了obsereable的装饰器，可以将普通对象转换为可观察对象，当可观察对象发生变化时，mobx会自动更新依赖的视图。通过action，可以定义状态变更，同时在状态变更时通过依赖的组件。优点是使用简单，能够快速响应，缺点是需要注意性能问题。</li><li>Context<br>context是react自带的状态管理工具，它可以使用全局或局部状态的共享， 通过createcontext和usecontext方法，可以方便的在组件间共享状态，缺点是在组件层次较深或者状态过多时，增加维护的难度。</li></ol><ul><li>FLUX架构 （redux）<br>flux架构是基于单向数据流思想提出的架构模式，在flux架构中，数据具有单向流动型，从dispatch-&gt;store-&gt;view. 这种单向的数据流设计避免了数据的循环依赖和相互影响。<br>FLUX的核心概念</li></ul><ol><li>ACTION: 数据行为，一般是js对象，包含type和payload属性</li><li>Dispatcher: 用于将action分发注册的store，一般是单例模式，在flux架构中，只有一个全局的dispatcher，负责协调action和store的通信</li><li>Store：数据源，一般是单例对象，Store 接收Dispatcher分发的action，然后根据action的类型，执行相应的业务逻辑，更新状态，状态更新后，通过view渲染页面</li><li>View： react组件，view从store获取数据，根据数据渲染界面。<br>Flux架构的优点在于，数据流动的单向性保证了代码的可预测性和可维护性，使得应用程序更加健壮和可扩展。但同时也存在一些缺点，例如对于大型应用程序，Flux架构需要编写大量的代码，增加了开发的工作量</li></ol><ul><li>响应式编程 （MOBX）<br>响应式编程通过将数据流的变化封装成一个可观察的序列，当数据流的状态变化时，自动发出通知，从而实现对数据流的响应式处理。其核心是观察者模式和函数式编程，其中观察者模式用于实时对数据变化的订阅和通知，函数式编程则用于对数据流的处理。</li></ul><h2 id="Redux-中的三个核心概念是什么？分别解释其作用和关系（REDUX）"><a href="#Redux-中的三个核心概念是什么？分别解释其作用和关系（REDUX）" class="headerlink" title="Redux 中的三个核心概念是什么？分别解释其作用和关系（REDUX）"></a>Redux 中的三个核心概念是什么？分别解释其作用和关系（REDUX）</h2><p>Redux的三个核心概念是 store、action和reducer</p><ul><li>store 是redux保存所有state的地方，可以用过store.getState获取当前的state，通过store.dispatch(action) 分发action来更新state，通过store.subscribe(listener)来注册state变化时的回调函数</li><li>action是一个普通的js对象，描述动作，体重需要包含一个type字段来指定事件类型，通过dispatch方法发送action，从而触发reducer更新state</li><li>reducer是一个纯函数，接收当前的state和action，返回一个新的state，reducer 的设计需要根据应用的具体业务需求来实现，但需要满足以下特点：传入的 state 和 action 不变时，返回的新 state 也不变；不应该在 reducer 中执行任何副作用，如调用 API 或修改外部状态</li></ul><p>action触发reducer更新state中的state，组件从store中获取state并更具state的变化更新view，流程为action-&gt;reducer-&gt;store-&gt; view。这种架构可以有效的分离状态和业务逻辑。</p><h2 id="MobX-中的-observable、-action-和-computed-分别是什么？举例说明其使用方法和作用。（MOBX）"><a href="#MobX-中的-observable、-action-和-computed-分别是什么？举例说明其使用方法和作用。（MOBX）" class="headerlink" title="MobX 中的 @observable、@action 和 @computed 分别是什么？举例说明其使用方法和作用。（MOBX）"></a>MobX 中的 @observable、@action 和 @computed 分别是什么？举例说明其使用方法和作用。（MOBX）</h2><ul><li><p>obserable是mobx的核心概念，将数据转换为可观察对象，使其能够被mobx追踪和响应，在mobx中，obserable对象的值可以被直接更改，当他更改后，所有依赖该对象的观察者都会自动更新。</p></li><li><p>action装饰器将普通函数绑定到obserable对象上，以便使用它来修改obserable对象的值。在mobx中，使用action装饰器包装修改obserable对象的操作，可以保证这些操作都是在事务中进行的，从而确保执行完毕后一次性更新所有的观察者。</p></li><li><p>computed装饰器是用于创建计算属性，计算属性是根据obserable对象的值自动更新自己的值。</p></li></ul><h2 id="实现一个简化版本的mobx，体现观察者模式和响应式编程，拥有obserable-action-computed"><a href="#实现一个简化版本的mobx，体现观察者模式和响应式编程，拥有obserable-action-computed" class="headerlink" title="实现一个简化版本的mobx，体现观察者模式和响应式编程，拥有obserable,action,computed."></a>实现一个简化版本的mobx，体现观察者模式和响应式编程，拥有obserable,action,computed.</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Obserable</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token function">subscribers</span><span class="token punctuation">(</span><span class="token parameter">subscribers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subscribers<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token parameter">subscribers</span> <span class="token operator">=></span> <span class="token function">subscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// exm</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'state changed'</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  state<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 修改状态</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取 computed 值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doubled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mobx和react结合一般使用装饰器语法，你可以解释装饰器语法的原理吗？"><a href="#mobx和react结合一般使用装饰器语法，你可以解释装饰器语法的原理吗？" class="headerlink" title="mobx和react结合一般使用装饰器语法，你可以解释装饰器语法的原理吗？"></a>mobx和react结合一般使用装饰器语法，你可以解释装饰器语法的原理吗？</h3><p>mobx之所以可以在react中采用装饰器语法是因为babel插件，这个插件允许开发人员编写和注册自定义的装饰器。当babel遇到一个被装饰器修饰的节点时，插件会处理该节点，会将装饰器节点转换为一个函数调用，该函数接收被装饰的节点作为参数，返回一个新的节点<br>MobX是通过Babel的装饰器插件来实现装饰器语法的支持的。它使用了babel-plugin-transform-decorators-legacy插件来实现装饰器的转换。</p><p>该插件会将所有的装饰器节点转换为函数调用节点。例如，在下面的代码中，我们使用了mobx的observable装饰器来定义可观察的属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token keyword">class</span> <span class="token class-name">MyStore</span> <span class="token punctuation">&#123;</span>  @observable count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在经过babel-plugin-transform-decorators-legacy插件的转换后，该代码将被转换为以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token keyword">class</span> <span class="token class-name">Mystore</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在转换后的代码中，observable装饰器被转换为了一个函数调用observable(this, “count”, 0)，该函数会接受当前的对象、属性名和初始值，并返回一个可观察的属性。</p><p>需要注意的是，由于装饰器语法是一个提案标准，尚未成为官方的ECMAScript语法，因此在使用装饰器语法时需要使用babel-plugin-transform-decorators-legacy插件来进行转换，以兼容不同的浏览器和Node.js版本。</p><p>此外，MobX也提供了另外一个babel插件babel-plugin-transform-decorators用于支持最新版的装饰器语法。你可以通过npm安装该插件，然后在.babelrc或者webpack配置文件中进行配置，使其支持最新的装饰器语法。</p><h2 id="Context-API-是-React-提供的原生状态管理工具，请简述其原理和使用方法，并说明其适用场景"><a href="#Context-API-是-React-提供的原生状态管理工具，请简述其原理和使用方法，并说明其适用场景" class="headerlink" title="Context API 是 React 提供的原生状态管理工具，请简述其原理和使用方法，并说明其适用场景"></a>Context API 是 React 提供的原生状态管理工具，请简述其原理和使用方法，并说明其适用场景</h2><p>Context 是 React 中的一个 API，它用于在组件树中传递数据。通过使用 Context，可以将数据直接传递给所有子组件，而不必将数据逐层传递给每个子组件。在使用 Context 时，需要创建一个 Context 对象，并使用 Provider 包装要传递的数据，然后在子组件中使用 useContext 钩子来获取数据。</p><p>在 React 中，Context 可以用于实现全局状态管理，但它并不像 Redux 那样提供了一套完整的状态管理方案。相比于 Redux，Context 更加轻量级，适用于小型应用或局部状态共享的场景。同时，Context 可以和 useContext 钩子一起使用，让组件在不同层级间获取和共享状态更加方便。</p><h2 id="请结合一个具体的场景，分别使用-Redux-和-MobX-实现该场景下的状态管理，并比较两种方案的异同。"><a href="#请结合一个具体的场景，分别使用-Redux-和-MobX-实现该场景下的状态管理，并比较两种方案的异同。" class="headerlink" title="请结合一个具体的场景，分别使用 Redux 和 MobX 实现该场景下的状态管理，并比较两种方案的异同。"></a>请结合一个具体的场景，分别使用 Redux 和 MobX 实现该场景下的状态管理，并比较两种方案的异同。</h2><p>假设有一个购物车页面，需要管理购物车中商品的状态，数量，总价及加载状态等。</p><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>1.定义store，包含上述状态<br>2.通过action的type定义各个状态的行为<br>3.执行connect函数，参数是mapStateToProps和mapDispatchToProps以及当前组件。连接组件和redux的store和action。<br>4.通过mapStateToProps使组件获取store状态，通过mapDispatchToProps获取dispatch函数，使用dispatch函数执行action<br>5.通过props获取和修改状态，触发action来修改store的状态<br>6.组件重渲染</p><p>store</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> initalState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">=</span>initalState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'INCREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'DECREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">&#125;</span><span class="token operator">></span>increment<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>decrement<span class="token punctuation">&#125;</span><span class="token operator">></span>decrement<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'increment'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'decrement'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToprops<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h3><p>1.创建state，包含上述状态<br>2.使用observable将state转换为可观察对象，使其成为响应式<br>3.通过action函数定义各个状态的行为<br>4.通过observable连接store和component，获取状态和修改状态的方法。<br>5.通过useEffect和useObservable获取和监控状态变化，触发action来改变state<br>6.组件重渲染。</p><p>异同点：<br>1.redux基于action和reducer，修改状态需要通过dispatch和action改变store中的状态。而mobx直接修改可观察对象，就会自动触发。<br>2.redux使用复杂，需要手动定义action和reducer，而mobx只需要使用observable和action函数就可以。<br>3.redux逻辑清晰但使用繁琐，可以避免不同组件的状态冲突。mobx简单易用，适合小型项目。</p><h2 id="解释-React-中的高阶组件（HOC）的概念和作用，并列举一些常见的使用场景"><a href="#解释-React-中的高阶组件（HOC）的概念和作用，并列举一些常见的使用场景" class="headerlink" title="解释 React 中的高阶组件（HOC）的概念和作用，并列举一些常见的使用场景"></a>解释 React 中的高阶组件（HOC）的概念和作用，并列举一些常见的使用场景</h2><p>HOC本质上是一种函数，接收一个组件作为参数，返回一个新的组件，HOC不会修改传入的组件，而是使用包装组件包裹起来，增强功能。<br>HOC并不是react独有的，其实是函数编程的一种模式，函数可以接收一个或者多个函数，返回一个函数的函数。<br>HOC常用场景</p><ol><li>组件复用：使用HOC将通用功能封装成一个高阶组件，使得多个组件可以复用。</li><li>渲染劫持： 通过包裹组件的形式对子组件进行props干预</li><li>条件渲染： 根据实际情况决定是否渲染子组件，例如 loading</li><li>状态抽象</li></ol><h2 id="MVC-amp-MVVM-amp-FLUX"><a href="#MVC-amp-MVVM-amp-FLUX" class="headerlink" title="MVC &amp; MVVM &amp; FLUX"></a>MVC &amp; MVVM &amp; FLUX</h2><h3 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1.MVC"></a>1.MVC</h3><p>View: 数据展示和用户输入<br>Controller: 响应用户的输入，对数据进行操作<br>Model: 管理程序需要的数据，定义操作数据的行为。</p><p><img src="https://pic1.zhimg.com/80/3d2abf5c8d81424c4797201384b456ac_1440w.webp"><br>从view开始，用户在ui上进行操作后，用户的操作被转发到了controlle上，controller根据用户的操作对数据进行更新，数据更新后，Model层接受到变更，Model对所有依赖的是图发出更新通知，收到通知的视图获取最新的数据。</p><p>在react中mvc的体现可以理解成，model为组件的状态，controller是setState或者useState，而view则是render中的组件。<br>假设一个场景，用户输入了表单，当view接收到数据后，Controller（useState）更新值，model（state发生变化），view再次更新。</p><p>MVC模式在理想状态下是1:1:1的关系，但是现实中通常是多视图，多模型。比较复杂的情况下view和model可以是多对多的关系，也就是说单个view可能来自多个model。单个model更新需要通知多个view。用户在view上的操作可以对多个model造成影响。最致命的后果，是view和model形成相互更新的死循环。</p><p>例如我们有一个登陆表单，当用户密码错误后，需要提示用户密码错误，并且清空账户名和密码。在这个案例中view为account input和password input，当两者发生变化后，account component 和password component 的Controller发生变化，两者的state发生变化，view更新。（1view：2model：2controller）此时状态图如下图所示<br><img src="https://pic4.zhimg.com/80/74383cc223b0a29bec6650826bdc72cb_1440w.webp"></p><h3 id="2-FLUX"><a href="#2-FLUX" class="headerlink" title="2.FLUX"></a>2.FLUX</h3><p><img src="https://pic1.zhimg.com/80/004fe0045e9e2b0fe1673a5a9542230c_1440w.webp"><br>Action: 组件触发动作<br>Dispatch: flux的中枢，所有的action都会被dispatch处理，dispatcher在接收到action之后，调用store中的回调，dispatcher不含业务逻辑，只是一个分发中心，或者说规则。<br>Store:  store只包含接收到action行为后 状态的变化，并不提供操作数据的借口。action和dispatcher都无法直接操作store。<br>View:  视图层，展示数据也处理用户的交互请求，view同时也监听着store中的数据更变，一旦改变则重新请求数据。<br>复杂的flux流行图如图所示<br><img src="https://pic2.zhimg.com/80/5b3b3765741c4735792e9824be265835_1440w.webp"></p><h2 id="什么是-React-Fiber-架构？为什么-React-需要引入-Fiber-架构？"><a href="#什么是-React-Fiber-架构？为什么-React-需要引入-Fiber-架构？" class="headerlink" title="什么是 React Fiber 架构？为什么 React 需要引入 Fiber 架构？"></a>什么是 React Fiber 架构？为什么 React 需要引入 Fiber 架构？</h2><p>Fiber 架构是react16中引入的一种协调算法和架构，他的目的是提高react渲染效率和性能。<br>在传统的react渲染过程中，react在更新时会先构建一个虚拟dom树，然后对比之前的vm tree，找到差异部分进行更新。这种遍历和比较的过程是同步的。而js在浏览器中是单线程任务，浏览器的主线程会被占用，直到更新完成。在组件树较大或者更新频繁时会导致性能瓶颈。</p><p>为了解决这个问题，react引入了fiber架构，fiber的协调算法提供了一种基于时间片的机制，将更新过程分为多个时间片，使得更新过程可以被中断、恢复和优先级调度，从而可以利用浏览器的空闲时间，提高性能和用户体验。fiber架构还通过实现异步渲染和增量渲染等机制，提高了react性能。</p><h2 id="fiber中的协调算法具体在哪些方面体现"><a href="#fiber中的协调算法具体在哪些方面体现" class="headerlink" title="fiber中的协调算法具体在哪些方面体现"></a>fiber中的协调算法具体在哪些方面体现</h2><p>react fiber 架构中的协调算法是基于fiber tree的深度优先遍历算法实现的，该算法称为react fiber reconciler。<br>react fiber reconciler的基本思想是将组件渲染过程拆分为多个阶段，并在每个阶段之间进行优先级判断和调度。在这个过程中，每个组件的fiber节点都会标记为不同的状态，以便调度器在后续的更新中优先考虑具有更高优先级的节点。<br>react fiber架构中的协调算法体现在以下几个方面</p><ol><li>异步渲染： fiber架构中引入了时间切片和任务优先级，可以让react程序在处理大量程序时更好的响应用户操作</li><li>可中断的渲染： 因为fiber架构将渲染过程进行拆分，因此任务可中断，使得任务单元更小，避免长时间任务导致浏览器渲染线程阻塞。</li><li>批处理更新： fiber架构将组件更新过程拆分为多个小的任务单元，并使用requestIdleCallback API 在浏览器空闲时间进行调度。</li></ol><h2 id="React-Fiber-架构相对于旧的-Stack-架构有什么优势和改进？"><a href="#React-Fiber-架构相对于旧的-Stack-架构有什么优势和改进？" class="headerlink" title="React Fiber 架构相对于旧的 Stack 架构有什么优势和改进？"></a>React Fiber 架构相对于旧的 Stack 架构有什么优势和改进？</h2><ol><li>异步渲染</li><li>递进式更新： 渲染进程拆分后任务更新单元更小，可以通过优先级算法控制优先度和顺序，以更加细致的控制更新的过程。</li><li>新的协调算法： 将组件的更新分为两个阶段reconciliation和commit，reconciliation阶段会比较前后两次的更新的差异，并生成一个更新树，commit阶段将更新树映射到实际的dom树上。</li></ol><h2 id="React-Fiber-架构是如何实现异步渲染的？"><a href="#React-Fiber-架构是如何实现异步渲染的？" class="headerlink" title="React Fiber 架构是如何实现异步渲染的？"></a>React Fiber 架构是如何实现异步渲染的？</h2><p>Fiber架构实现异步渲染的方式是通过引入协调器和调度器来实现。fiber将渲染任务分为两个阶段：reconciliation和commit。rec阶段的任务是对vm tree进行diff，找出需要更新的部分，commit阶段是将更新进行渲染。</p><p>在rec阶段，fiber采用了fiberNode，每个fiberNode对应一个组件，其中包含组件的状态、props、refs等信息。fiberNode之间通过双向链表连接，形成fiber tree</p><p>在commit阶段，fiber引入调度器Scheduler，它负责根据优先级和过期时间来决定哪些fiberNode先被执行。每个fiberNode都有一个优先级和过期时间，调度器会根据算法计算fiberNode的优先级和过期时间，然后根据优先级顺序执行任务。</p><p>如果一个FiberNode在协调阶段更新时被标记过期，那么它会在调度阶段优先执行。当调度器在调度时，时间片结束了，那么它会挂起当前任务，返回控制权给浏览器，等到下一个时间片再继续执行剩下的任务，实现了异步渲染的效果。</p><h2 id="fiber中的双向链表是如何实现的，为什么要采取双向链表-React"><a href="#fiber中的双向链表是如何实现的，为什么要采取双向链表-React" class="headerlink" title="fiber中的双向链表是如何实现的，为什么要采取双向链表(React)"></a>fiber中的双向链表是如何实现的，为什么要采取双向链表(React)</h2><p>在fiber架构中，双向链表被用来表示fiber节点的树形结构，是一种基于链表结构的数据结构。<br>双向链表由多个fiber节点构成，每个节点保存了一个组件的信息和它子节点的引用。双向链表的每个节点都包含了它的前后节点的指针，这使得在进行协调算法时可以很方便地访问相邻节点。</p><p>双向链表的优点在于可以高效的插入、删除和移动节点，使得在进行增量渲染和中断操作时可以很方便地修改树的结构。双向链表还可以支持双向遍历，这使得在进行协调算法时可以很方便的访问相邻节点。因为fiber架构需要将渲染任务进行拆分，并且通过scheduler进行优先级调度，涉及到任务的插入、更新和增加，因此双向链表的优势非常符合fiber架构。</p><h2 id="React-Fiber-架构中的工作单元是什么，它们是如何组织和调度的？"><a href="#React-Fiber-架构中的工作单元是什么，它们是如何组织和调度的？" class="headerlink" title="React Fiber 架构中的工作单元是什么，它们是如何组织和调度的？"></a>React Fiber 架构中的工作单元是什么，它们是如何组织和调度的？</h2><p>工作单元是fiberNode，fibernode被组织称一个树状结构，每个节点对应一个单元。fiber节点采用双向链表来组织，每个fibernode包含当前节点的状态、子节点和兄弟节点的信息。在fiber架构中，react会通过reconcile确定需要被执行的节点及其优先级。当fibernode被选中时，react会根据fibernode记录的信息执行更新。</p><p>fiber节点的调度是通过reconciler的模块完成的。reconciler会根据fibernode的状态和优先级来确定顺序，并生成一个可执行队列，react的渲染引擎会从任务队列中取出任务并执行，当一个任务执行完毕后，渲染引擎会检查当前任务的优先级以及是否有更高优先级的任务需要被执行，如果存在则中断当前任务，执行更高优先级的任务。</p><h2 id="React-Fiber-架构中的副作用是什么，如何处理副作用？"><a href="#React-Fiber-架构中的副作用是什么，如何处理副作用？" class="headerlink" title="React Fiber 架构中的副作用是什么，如何处理副作用？"></a>React Fiber 架构中的副作用是什么，如何处理副作用？</h2><p>副作用是指与组件渲染无关的操作，例如dom操作，异步操作，状态等。<br>在fiber架构中，每个fibernode都包含effect list。这个effect list会在fiber node完成更新后，被传递给父节点，最后传递给根节点，最后形成一个effect链表，这个链表包含所有需要进行的副作用操作。effect链表同样是通过Scheduler模块根据优先级依次处理每个fibernode完成的。<br>在fiber架构中，为了避免多余的操作和计算，通常会采取合并副作用，批量更新等操作来处理副作用。<br>具体就是一个useeffect中包含多个异步操作等。或者采用自定义hook，对副作用进行管理和控制。</p><h2 id="type和interface的区别"><a href="#type和interface的区别" class="headerlink" title="type和interface的区别"></a>type和interface的区别</h2><h2 id="commit的格式检查配置如何做"><a href="#commit的格式检查配置如何做" class="headerlink" title="commit的格式检查配置如何做"></a>commit的格式检查配置如何做</h2><h2 id="hsky如何调用钩子"><a href="#hsky如何调用钩子" class="headerlink" title="hsky如何调用钩子"></a>hsky如何调用钩子</h2><h2 id="如果页面加载完成后，通过ref-current-修改页面会怎么样"><a href="#如果页面加载完成后，通过ref-current-修改页面会怎么样" class="headerlink" title="如果页面加载完成后，通过ref.current 修改页面会怎么样"></a>如果页面加载完成后，通过ref.current 修改页面会怎么样</h2><h2 id="封装过什么hook"><a href="#封装过什么hook" class="headerlink" title="封装过什么hook"></a>封装过什么hook</h2><h2 id="用hooks碰到过什么问题"><a href="#用hooks碰到过什么问题" class="headerlink" title="用hooks碰到过什么问题"></a>用hooks碰到过什么问题</h2><h2 id="如果页面需要销毁一个组件怎么处理"><a href="#如果页面需要销毁一个组件怎么处理" class="headerlink" title="如果页面需要销毁一个组件怎么处理"></a>如果页面需要销毁一个组件怎么处理</h2><h2 id="事件循环介绍"><a href="#事件循环介绍" class="headerlink" title="事件循环介绍"></a>事件循环介绍</h2><h2 id="宏任务、微任务、同步任务执行顺序"><a href="#宏任务、微任务、同步任务执行顺序" class="headerlink" title="宏任务、微任务、同步任务执行顺序"></a>宏任务、微任务、同步任务执行顺序</h2><h2 id="宏任务有哪些"><a href="#宏任务有哪些" class="headerlink" title="宏任务有哪些"></a>宏任务有哪些</h2><h2 id="如果一个列表有10000条数据，这个怎么进行展示（performance）"><a href="#如果一个列表有10000条数据，这个怎么进行展示（performance）" class="headerlink" title="如果一个列表有10000条数据，这个怎么进行展示（performance）"></a>如果一个列表有10000条数据，这个怎么进行展示（performance）</h2><h2 id="斐波那契数列第n项的值"><a href="#斐波那契数列第n项的值" class="headerlink" title="斐波那契数列第n项的值"></a>斐波那契数列第n项的值</h2><h2 id="项目中动态路由和登陆拦截按钮如何实现"><a href="#项目中动态路由和登陆拦截按钮如何实现" class="headerlink" title="项目中动态路由和登陆拦截按钮如何实现"></a>项目中动态路由和登陆拦截按钮如何实现</h2><h2 id="cors请求为啥会有一个option"><a href="#cors请求为啥会有一个option" class="headerlink" title="cors请求为啥会有一个option"></a>cors请求为啥会有一个option</h2><h2 id="js多维数组转一维数组"><a href="#js多维数组转一维数组" class="headerlink" title="js多维数组转一维数组"></a>js多维数组转一维数组</h2><h2 id="单点登录怎么做，如何将多个单点登录整合到一个项目"><a href="#单点登录怎么做，如何将多个单点登录整合到一个项目" class="headerlink" title="单点登录怎么做，如何将多个单点登录整合到一个项目"></a>单点登录怎么做，如何将多个单点登录整合到一个项目</h2><h2 id="图片太大上传卡顿如何优化"><a href="#图片太大上传卡顿如何优化" class="headerlink" title="图片太大上传卡顿如何优化"></a>图片太大上传卡顿如何优化</h2><h2 id="登录组件设计时需要考虑什么"><a href="#登录组件设计时需要考虑什么" class="headerlink" title="登录组件设计时需要考虑什么"></a>登录组件设计时需要考虑什么</h2><h2 id="登录组件前端和后端如何配合，oAUTH1，2"><a href="#登录组件前端和后端如何配合，oAUTH1，2" class="headerlink" title="登录组件前端和后端如何配合，oAUTH1，2"></a>登录组件前端和后端如何配合，oAUTH1，2</h2><h2 id="如何做一个上传组件，react，需要和服务端配合什么"><a href="#如何做一个上传组件，react，需要和服务端配合什么" class="headerlink" title="如何做一个上传组件，react，需要和服务端配合什么"></a>如何做一个上传组件，react，需要和服务端配合什么</h2><h2 id="如何在react项目中做权限控制"><a href="#如何在react项目中做权限控制" class="headerlink" title="如何在react项目中做权限控制"></a>如何在react项目中做权限控制</h2><h2 id="不同源不同域的页面数据如何共享"><a href="#不同源不同域的页面数据如何共享" class="headerlink" title="不同源不同域的页面数据如何共享"></a>不同源不同域的页面数据如何共享</h2><h2 id="axios封装需要考虑什么"><a href="#axios封装需要考虑什么" class="headerlink" title="axios封装需要考虑什么"></a>axios封装需要考虑什么</h2><h2 id="如何实现一个new"><a href="#如何实现一个new" class="headerlink" title="如何实现一个new"></a>如何实现一个new</h2><h2 id="封装的按钮权限组件如何实现"><a href="#封装的按钮权限组件如何实现" class="headerlink" title="封装的按钮权限组件如何实现"></a>封装的按钮权限组件如何实现</h2><h2 id="数据什么时候定义在组件，什么时候定义在状态管理"><a href="#数据什么时候定义在组件，什么时候定义在状态管理" class="headerlink" title="数据什么时候定义在组件，什么时候定义在状态管理"></a>数据什么时候定义在组件，什么时候定义在状态管理</h2><h2 id="防抖和节流是什么，怎么实现"><a href="#防抖和节流是什么，怎么实现" class="headerlink" title="防抖和节流是什么，怎么实现"></a>防抖和节流是什么，怎么实现</h2><h2 id="foreach和map的区别"><a href="#foreach和map的区别" class="headerlink" title="foreach和map的区别"></a>foreach和map的区别</h2><h1 id="富途"><a href="#富途" class="headerlink" title="富途"></a>富途</h1><h2 id="前端限流怎么做-附带-promise实现。"><a href="#前端限流怎么做-附带-promise实现。" class="headerlink" title="前端限流怎么做 附带 promise实现。"></a>前端限流怎么做 附带 promise实现。</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> threshold <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> runningCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">executeNext</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningCount <span class="token operator">>=</span> threshold <span class="token operator">||</span> queue<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> task<span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runningCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      runningCount<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">executeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">task</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">executeNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> limitFn <span class="token operator">=</span> <span class="token function">scheduler</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">limitFn</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="限流，-熔断，-服务降级"><a href="#限流，-熔断，-服务降级" class="headerlink" title="限流， 熔断， 服务降级"></a>限流， 熔断， 服务降级</h2><ol start="4"><li>浏览器相关</li></ol><ul><li>解释浏览器缓存机制，包括强缓存和协商缓存两种方式的概念和使用方法</li><li>解释浏览器的事件循环机制（Event Loop），并解释宏任务和微任务的概念</li><li>解释跨域问题及其解决方案，包括 JSONP、CORS、代理等方式的概念和使用方法</li><li>解释 HTTPS 的使用和原理，包括对称加密和非对称加密两种加密方式的概念和使用方法</li><li>简述 Web Worker 的使用方法和作用，以及与主线程的通信方式</li></ul><ol start="5"><li>工程化相关</li></ol><ul><li>解释 Webpack 的基本原理和使用方法，包括 Loader 和 Plugin 的概念和使用方法</li><li>简述 Git 的基本使用和原理，包括版本控制、分支管理等概念和使用方法</li><li>解释 ESLint 和 Prettier 的使用和原理，包括代码风格的检查和自动格式化的概念和使用方法</li><li>简述性能优化的方案，包括代码压缩、图片</li></ul><ol start="6"><li>other</li></ol><ul><li>HTTP 协议的基本原理和使用场景</li><li><ul><li>简述 HTTP 协议的基本结构和特点，包括请求方法、状态码、请求头、响应头等内容</li></ul></li><li><ul><li>解释 HTTP 和 HTTPS 的区别及其使用场景，列举一些常见的安全问题并给出解决方案</li></ul></li><li><ul><li>简述 HTTP 的缓存机制，包括强缓存和协商缓存的概念和使用方法</li></ul></li><li><ul><li>解释 HTTP 中的长连接和短连接的概念，包括 HTTP&#x2F;1.x 和 HTTP&#x2F;2 中的实现方式</li></ul></li><li>前端安全问题及其解决方案</li><li><ul><li>解释 XSS、CSRF、DDoS 攻击的概念及其防范方法</li></ul></li><li><ul><li>简述 CSP 的使用方法和原理，包括限制内容安全策略的概念和使用方法</li></ul></li><li><ul><li>解释 JWT 的使用方法和原理，包括 token 的生成和验证过程</li></ul></li><li><ul><li>解释 CORS 的概念及其使用方法，包括前后端如何配合实现跨域访问</li></ul></li><li>前端测试方法及其框架</li><li><ul><li>简述前端测试的常见方法，包括单元测试、集成测试、UI 测试等概念和使用方法</li></ul></li><li><ul><li>简述 Jest 的使用方法和原理，包括针对 React 组件的测试方法和断言库的使用</li></ul></li><li><ul><li>解释 Cypress 的概念和使用方法，包括如何进行端到端测试和模拟用户交互的方法</li></ul></li><li><ul><li>解释 Selenium 的使用方法和原理，包括如何进行自动化测试和测试用例的编写<br>Node.js 的基本使用和原理</li></ul></li><li><ul><li>简述 Node.js 的基本原理和使用方法，包括如何搭建环境和编写服务器端代码</li></ul></li><li><ul><li>解释 Node.js 中的模块化和包管理的概念和使用方法，包括 npm 和 yarn 的使用方法</li></ul></li><li><ul><li>简述 Node.js 中的异步编程和事件循环的概念和使用方法，包括如何使用 Promise 和 async&#x2F;await</li></ul></li><li><ul><li>解释 Node.js 中的流和缓冲区的概念和使用方法，包括如何进行文件读写和网络通信</li></ul></li><li>数据库的基本知识和使用</li><li><ul><li>简述关系型数据库和非关系型数据库的概念和区别，包括各自的使用场景和优缺点</li></ul></li><li><ul><li>解释 SQL 的基本语法和使用方法，包括数据表的创建和查询语句的编写</li></ul></li><li><ul><li>简述 MongoDB 的使用方法和原理，包括如何进行文档读写和数据聚合</li></ul></li><li><ul><li>解释 Redis 的概念和使用方法，包括如何进行数据存储和缓存管理</li></ul></li><li><ul><li>微服务的使用和原理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-v3.7</title>
      <link href="/2023/02/11/flutterv3/"/>
      <url>/2023/02/11/flutterv3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://juejin.cn/post/7192468840016511034">https://juejin.cn/post/7192468840016511034</a></p></blockquote><p>这些只是 3.7 里 DevTools 的几个亮点， 3.7 版本还包含几个错误修复和更多功能改进，包括 Inspector、Network profiler 和 CPU profiler 的一些重要错误修复</p><h2 id="Changes"><a href="#Changes" class="headerlink" title="Changes"></a>Changes</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230211142513nZM8db.png?token=ALJ6LAU3SZV3QHSHW4KPLQTD442QQ" alt="Picsee-20230211142513.png"></p><ol><li>Configuration of contextmenu can be changed by contextmenu and that can return any component if u want, including the context by platform.</li></ol>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> ios &amp; android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TalentOrg&#39; Interview (remote)</title>
      <link href="/2023/01/28/interview-of-remote-job-talentorg/"/>
      <url>/2023/01/28/interview-of-remote-job-talentorg/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><div class="markdown-question markdown-question-snippet text-left"><p>You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.</p><p>At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:</p><ul><li>An integer x - Record a new score of x.</li><li>"+" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.</li><li>"D" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.</li><li>"C" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.<br>Return the sum of all the scores on the record. The test cases are generated so that the answer fits in a 32-bit integer.</li></ul><pre><code>Example 1:<p>Input: ops &#x3D; [“5”,”2”,”C”,”D”,”+”]<br>Output: 30<br>Explanation:<br>“5” - Add 5 to the record, record is now [5].<br>“2” - Add 2 to the record, record is now [5, 2].<br>“C” - Invalidate and remove the previous score, record is now [5].<br>“D” - Add 2 * 5 &#x3D; 10 to the record, record is now [5, 10].<br>“+” - Add 5 + 10 &#x3D; 15 to the record, record is now [5, 10, 15].<br>The total sum is 5 + 10 + 15 &#x3D; 30.<br></code></pre></p><pre><code>Example 2:Input: ops = ["5","-2","4","C","D","9","+","+"]Output: 27Explanation:"5" - Add 5 to the record, record is now [5]."-2" - Add -2 to the record, record is now [5, -2]."4" - Add 4 to the record, record is now [5, -2, 4]."C" - Invalidate and remove the previous score, record is now [5, -2]."D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]."9" - Add 9 to the record, record is now [5, -2, -4, 9]."+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]."+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.</code></pre><pre><code>Example 3:Input: ops = ["1","C"]Output: 0Explanation:"1" - Add 1 to the record, record is now [1]."C" - Invalidate and remove the previous score, record is now [].Since the record is empty, the total sum is 0.</code></pre><p>Constraints:</p><p>1 &lt;= ops.length &lt;= 1000<br>ops[i] is "C", "D", "+", or a string representing an integer in the range [-3 * 104, 3 * 104].<br>For operation "+", there will always be at least two previous scores on the record.<br>For operations "C" and "D", there will always be at least one previous score on the record.</p></div><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><pre class="line-numbers language-function" data-language="function"><div class="caption"><span>solution(a) &#123;</span></div><code class="language-function">  &#x2F;&#x2F; Write your answer here  if (!Array.isArray(a) || a.length &lt;&#x3D; 0) return 0;  for (let i &#x3D;0; i &lt; a.length; i++) &#123;    let curStr &#x3D; (a[i]).toString().toUpperCase();    if(isNaN(+curStr))&#123;      switch (curStr)&#123;        case &#39;C&#39;:          if(i &gt; 0)&#123;            a.splice(i-1, 2)          &#125;;        case &#39;D&#39;:          if(i &gt;&#x3D; 1)&#123;            let nextNum &#x3D; parseInt(a[i-2]) * 2            a.splice(i-1,1,nextNum)          &#125;;        case &#39;+&#39;:          if(i &gt;&#x3D; 2)&#123;            let nextNum &#x3D; parseInt(a[i-1]) + parseInt(a[i-2])            a.splice(i,1,nextNum)          &#125;;      &#125;    &#125;  &#125;  function sum(arr) &#123;    let s &#x3D; 0;    arr.forEach(function(val, idx, arr) &#123;      s +&#x3D; parseInt(val);    &#125;, 0);    return s;  &#125;;  return sum(a)&#125;&#x2F;&#x2F; DO NOT DELETEmodule.exports &#x3D; &#123;  solution&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To be honest, I failed this interview, but I think it also could have been recorded and realized that I have to work on the Algorithms.</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote Job </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smartContract</title>
      <link href="/2023/01/26/smartcontract/"/>
      <url>/2023/01/26/smartcontract/</url>
      
        <content type="html"><![CDATA[<h1 id="Solidity-syntax"><a href="#Solidity-syntax" class="headerlink" title="Solidity syntax"></a>Solidity syntax</h1><h2 id="What’s-Solidity"><a href="#What’s-Solidity" class="headerlink" title="What’s Solidity"></a>What’s Solidity</h2><p>Solidity is an object-oriented programming language. It is used to be implemented smart contract and it’s very resembles javascript.<br>Important Properties:</p><ul><li>static typecity</li><li>support extends</li><li>Libraies</li><li>complex user defined types<br>First of all, smart contract was be developed by Nick Szabo, the beginning of means is “smart contract is a set of promise, specified in digital form, including protocol whithin which parties perform on these promises”.<br>For now, smart contract is a programming which it running on Ethereum, containers state and function.</li></ul><p>Solidity is very similar to Vending machines, because both of them have strong logic, if u paid fees, u<br>can but the commodities. or not u’ll be refused.<br><a href="ssss">321</a></p><h2 id="Suggested-Reading"><a href="#Suggested-Reading" class="headerlink" title="Suggested Reading"></a>Suggested Reading</h2><p><a href="https://github.com/ethereumbook/ethereumbook">Mastering Ethereum</a><br>  Chapter 7: Smart Contracts &amp; Solidity<br>  Chapter 9: Smart Contract Security<br>  Chapter 13: EVM<br><a href="https://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart_contracts_2.html">Smart Contracts: Building Blocks for Digital Markets</a><br><a href="https://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/idea.html">The Idea of Smart Contracts</a><br><a href="https://solidity-by-example.org/">Solidity by Example</a></p><h2 id="Solidity-syntax-1"><a href="#Solidity-syntax-1" class="headerlink" title="Solidity syntax"></a>Solidity syntax</h2><ul><li>public, private, external, internal<ul><li>public, the virables can been read by other contract or EOAs</li><li>private, the virables can only be read by contract self.</li><li>external, the virables can been read by other contract(except the contract slef)</li><li>internal, the virables can only be read or used by the contract that inherits own chain or contract self.<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract myContract <span class="token punctuation">&#123;</span>  string <span class="token keyword">public</span> name <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token keyword">return</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>If the function returns a value, the syntax of a function header includes a returns statement, as shown below:<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230527182633nAvpK3.png" alt="Picsee-20230527182633.png"></p><ol><li>Declarations<br>function in solidity have contain one of the following keywords: pure and view</li></ol><ul><li>view means we only read state from contract state, but not write state</li><li>pure means no read nor write!<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract myContract <span class="token punctuation">&#123;</span>   uint a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  uint b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> view <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">helloworld2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    uint c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// if we want to change the state in contract, we don't need put the declaration in second part here.</span>  <span class="token keyword">function</span> <span class="token function">helloWorld3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>payable<br>that’s used to declaration the function can recieve ether. actually the function’s statemutability can be one of four values: pure, view, payable and unpayable. if we don’t set the declarations above function, unpayable is default in abi which means the function can’t read or write any state in contract and can’t receive ether.</li></ul><ol start="2"><li>returns<br>in the third part of syntax that show in above figure, we need show what we will return if we have value need to be result of.<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract myContract <span class="token punctuation">&#123;</span>   uint a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">helloworld2</span><span class="token punctuation">(</span><span class="token parameter">uint a<span class="token punctuation">,</span> uint b</span><span class="token punctuation">)</span> external pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    z <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">helloWorld3</span><span class="token punctuation">(</span><span class="token parameter">uint a<span class="token punctuation">,</span> uint b</span><span class="token punctuation">)</span> external pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint z<span class="token punctuation">,</span> unit x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    z <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    x <span class="token operator">=</span> a<span class="token operator">+</span>z<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">helloWorld3</span><span class="token punctuation">(</span><span class="token parameter">uint a<span class="token punctuation">,</span> uint b</span><span class="token punctuation">)</span> external pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint<span class="token punctuation">,</span> unit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    z <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    x <span class="token operator">=</span> a<span class="token operator">+</span>z<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>z<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// the return values is referred to as a tuple.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>Believe it or not, z is implicitly returned here! 🤯</p></blockquote><h2 id="Contract-compliation-procedure"><a href="#Contract-compliation-procedure" class="headerlink" title="Contract compliation procedure"></a>Contract compliation procedure</h2><p>When the smart contract compiles, it will produce two important work when the solidity compiles.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230527212736req562.png" alt="Picsee-20230527212736.png"></p><ul><li><p>ABI<br>we keep the ABI for front-end library to be able to communicate with the smart contract. </p></li><li><p>Contract’s bytecode<br>we will deploy the bytecode directly to the blockchain, in this situation, it will be stored in state tries of the contract account.</p><ul><li>ABI(computer science)<br>In computer science, ABI used to be a interface between two applications. for example, opeartion system must be communication with the application by some ways, that communication is bridge by ABI.</li></ul><p>ABI define how data structures and functions accessible in the machine code, thus, this is the main way to encode&#x2F;decode data from machine code.</p><ul><li>ABI(Ethereum)<br>In Ethereum, ABI need communication with smart contract. wheter why u always need ABI to be bridge<ul><li>try to communicate with contract on the outside of the blockchain</li><li>try to communicate with other contract.<br>the target of the ABI</li></ul></li><li>describe how  each function will accept the parameters and return its result.</li></ul></li><li><p>bytecode<br>they are have two different bytecode, <strong>creation time bytecode</strong>(only execute once when contract deploed) and <strong>run time bytecode</strong>(as permenant executable file in the blockchain).</p></li></ul><h2 id="Transaction’s-Recipients"><a href="#Transaction’s-Recipients" class="headerlink" title="Transaction’s Recipients"></a>Transaction’s Recipients</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230527221056Vp1yXi.png" alt="Picsee-20230527221056.png"><br>As in the script above, we provide the ABI to ethers. Once ethers has the contract’s ABI, we can make a call to the Counter smart contract’s inc() function. Like the image above shows, the front-end library then translates and delivers any requests using the ABI. Once the transaction is successfully sent and validated on the Ethereum network, a receipt is generated containing logs and any gas used.</p><h2 id="Deploy-conclusions"><a href="#Deploy-conclusions" class="headerlink" title="Deploy conclusions"></a>Deploy conclusions</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202305272211480EeZoL.png" alt="Picsee-20230527221148.png"><br>if we write contract in Ethereum, it will procedure the context we want when contract compilation: contract’s bytecode<br>if we reading contract form Ethereum, it also will procedure the context we want when contract compilation: contract’s ABI.</p><h1 id="Hardhat"><a href="#Hardhat" class="headerlink" title="Hardhat"></a>Hardhat</h1><p>Hardhat is a development enviroment to compile, build, deploy, test and debug Ethereum smart contract. </p><h2 id="why-we-need-hardhat"><a href="#why-we-need-hardhat" class="headerlink" title="why we need hardhat"></a>why we need hardhat</h2><p>it help dev manage and automate the recuring task that are inherent process in build dApp and smart contract, as well as easily introducing more functionality arount this workflow.<br>hardhat’s function</p><ul><li>test in local environment, include local blockchain called hardhat network, it’s default choose when u try to deploy .</li><li>Solidty compiler and error checking.</li><li>easily compile smart contract and interact with.</li></ul><h2 id="fileTree-introduction"><a href="#fileTree-introduction" class="headerlink" title="fileTree introduction"></a>fileTree introduction</h2><ul><li>&#x2F;artfacts, file  produced out of smart contract compilaction.</li><li>&#x2F;contract, all of our .sol file</li><li>&#x2F;script, script that we need to run.</li><li>hardhat.config.env, project settings file, very important.</li><li>&#x2F;test, test file for script testing.</li></ul><h2 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use"></a>how to use</h2><ol><li>initialize a project with npm init</li><li>create .env by <code>touch .env</code> after <code>npm install dotenv</code></li><li>input something we always used. example API_KEY, PrivateKey et…</li><li><code>npm i hardhat</code>, then run <code>npx hardhat</code> to initialize the project.</li><li>do u want to do.</li></ol><h1 id="Calldata"><a href="#Calldata" class="headerlink" title="Calldata"></a>Calldata</h1><p>When we have EOAs and want to communicate with Ethereum network, we boardcast transactions. in this transaction, we can choose to sent the bytes data intended to be interacting with EVM.<br>The bytes data called the calldata and used to passed it to into EVM. it will target a specific contract’s account(contract, libray. solidity term) which can make call to another contract account. when contract make call to anther contract it forms a <strong>message</strong>.it includes sender’s address, target function signature, and the amount of the wei sent.<br>In solidty we have access to these message through global variables.</p><ul><li>msg.data(bytes), the complete calldata.</li><li>msg.value(uint), the amount of the wei sent.</li><li>msg.sig(bytes4), the targeted function signature. bytes4 is value of first four bytes by function keccak256 signatured. It provides a way to unique identify(and target) the function in contract. and don’t need worry about signature bytes lengths.</li><li>msg.sender(address), the address sending the message.</li></ul><h2 id="recieve-function"><a href="#recieve-function" class="headerlink" title="recieve function"></a>recieve function</h2><p>In the latest version of solidity, the contract default can’t be received ether.<br>In order to receive Ether, we need specify payable function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract Contract <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> payable <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg<span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>just by adding the parable keyword to the function we are able to recieve the Ether. Ether will auto saved in the contract. if someone wants to transfer Ether to non-parable spicify contract, the transaction will be refused and Ether will be returned to the original account.<br>If we want to recieve Ether without call the payable function, we do like this.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract Contract <span class="token punctuation">&#123;</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external payable <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Recive</strong> function don’t have function keywords that’s because receive is specifically function in solidity(like constructor). it’s a function that runs when a contract is sent ether <strong>without any calldata</strong>.<br>receive function must be payable and external and can’t be recieve arguments and can’t be return any values. </p><p>Receive function must be external because it just provider convenience to devs when EOAs send Ether to contract, it’s function body for deve to write logic.</p><p><strong>Fallback</strong> function is similar to recieve function and it also don’t have function keywords. it used to be a function when input wrong function name and spcifying a bad arguments type. if contract don’t know how response the data sent to it, it will invoke fallback function.<br>Nomarlly, creat fallback function is used to handling function signature misstake. </p><h2 id="Keyword-This"><a href="#Keyword-This" class="headerlink" title="Keyword This"></a>Keyword <strong>This</strong></h2><p>Keyword <strong>This</strong> is represent contract self. we can call function on it using <code>.</code> operator. </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> pure <span class="token function">returns</span><span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>if we use address function, we can convert this to address. when it converted, it’s equal to the address, we can use any propeiries in address.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"./UIntFunctions.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract Example <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x8858eeb3dfffa017d4bce9801d340d36cf895ccf</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100000000000000000</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">address</span><span class="token punctuation">(</span>UIntFunctions<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x7c2c195cd6d34b8f845992d380aadb2730bb9c6f</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Revert-transaction"><a href="#Revert-transaction" class="headerlink" title="Revert transaction"></a>Revert transaction</h1><p>When we try to revert a transaction, basically we treat it like transaction never happened. we halt the execution of transactions and delete all the state changes.transactions can still be include in block, when it invoke to block, the transaction’s sender will still pay for the gas used.</p><h2 id="Real-World-Example"><a href="#Real-World-Example" class="headerlink" title="Real World Example"></a>Real World Example</h2><p>Let’s take a look at a recently reverted transaction here: <a href="https://etherscan.io/tx/0x6def53bf56c2eb9dc08c6b87eeaadf90c46c0f4a57aab5ce9ca1481e7ff690d5">https://etherscan.io/tx/0x6def53bf56c2eb9dc08c6b87eeaadf90c46c0f4a57aab5ce9ca1481e7ff690d5</a></p><p>If you look at the error message, it is an error that is coming from Uniswap saying UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT’. Often times, when interacting with a decentralized exchange like Uniswap, the conditions will change between when the EOA signs the transaction and when the transaction is included in the block. It’s perfectly possible that when the EOA signed this transaction, the conditions of the market would have allowed for this transaction to happen, however at the time when it was included in the block it failed one of Uniswap’s checks.</p><p>You’ll notice that there still was an associated gas fee, since this transaction did run in an Ethereum block up until that point of the revert. Since this transaction reverted, the state changes did not go through and no token balances were updated for the user.</p><p>In EVM, the main opcode of revert is revert, require and assert. the above code all communicate errors to the calling code by stopping any further code execution and immediately handling the control back to the calling code. usually also return error code or message.</p><ol><li><p>revert<br>It’s used to be precondition to check function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// only can be used with start solidity v0.8.0</span>revert <span class="token function">MyCustomError</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>someBooleanCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">revert</span><span class="token punctuation">(</span><span class="token string">'it'</span>s fault'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>require<br>The target of require is equal to revert, they all are precondition. require have two arguments. 1nd arguments is required boolean, 2nd arguments is optional string by any forms(include function that must return string).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span>someBooleanCondition<span class="token punctuation">,</span> <span class="token string">'it'</span>s fault'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span>someBooleanCondition<span class="token punctuation">,</span> <span class="token function">functionReturnString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>assert(un-recommended)<br>it’s a logical assertion that is held to always be true during certain phases of the code execution.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">assert</span><span class="token punctuation">(</span>someBooleanCondition<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>if we don’t set second optional arguments in require, it will return empty error when we encounter error even error selector also don’t have the error.</p></blockquote><h2 id="Selfdestruct"><a href="#Selfdestruct" class="headerlink" title="Selfdestruct"></a>Selfdestruct</h2><p>When we call selfdestruct on a contract account, we must sure no one will transfer to the contract. because once selfdestruct is successed, the bytecode of contract will clear. we can’t to draw ether with the contract account. so </p><h1 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span>pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.0</span> <span class="token operator">&lt;</span><span class="token number">0.9</span><span class="token number">.0</span><span class="token punctuation">;</span><span class="token comment">// Owned.sol</span>contract Owned <span class="token punctuation">&#123;</span>    address <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    modifier onlyOwner <span class="token punctuation">&#123;</span>        <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        _<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">transferOwnership</span><span class="token punctuation">(</span><span class="token parameter">address newOwner</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> newOwner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modifier is similar to slot of vue, when add keywords in function means it will first run modifier function then is the function self.</p><h1 id="Calling"><a href="#Calling" class="headerlink" title="Calling"></a>Calling</h1><p>When we need interact with contract, we need to know contract’s address, contract name, ABI of contract.<br>if we are going to interact with contract by EOAs, we can find the address and name of the contract. or get the ABI of the contract. if we don’t know the ABI and address, we also can use interface to instance the contract. luckly,Once the bytecode is cleared, you can deploy the same code to the same address using the CREATE2 opcode introduced in EIP-1014.</p><h2 id="Calling-EOAs-in-Contract"><a href="#Calling-EOAs-in-Contract" class="headerlink" title="Calling EOAs in Contract"></a>Calling EOAs in Contract</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract spicifyContract <span class="token punctuation">&#123;</span>  address address1<span class="token punctuation">;</span>  address address2<span class="token punctuation">;</span>  <span class="token function">recieve</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> external payable <span class="token punctuation">&#123;</span>    <span class="token comment">// get the value of transaction by calldata</span>    uint value <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment">// when we use call means we make EOAs(exactly address1) recieve the ether from contract's account</span>    <span class="token comment">// (bool success1) is the result of the transaction.</span>    <span class="token comment">// &#123;&#125; provides opportunity to override value and gas</span>    <span class="token comment">// ("") is was use to location a function of contract, but since we call for EOAs so that we just input ""</span>    <span class="token comment">// (bool success) is the result of the transaction. () is used to deconstruction.</span>    <span class="token punctuation">(</span>bool success1<span class="token punctuation">)</span> <span class="token operator">=</span> address1<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">require</span><span class="token punctuation">(</span>success1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>bool success2<span class="token punctuation">)</span> <span class="token operator">=</span> address2<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">require</span><span class="token punctuation">(</span>success2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Real Example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ethers <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"hardhat"</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dotenv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token constant">ABI</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"anonymous"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string-property property">"inputs"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"indexed"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string-property property">"internalType"</span><span class="token operator">:</span><span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string-property property">"type"</span><span class="token operator">:</span><span class="token string">"address"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"Winner"</span><span class="token punctuation">,</span><span class="token string-property property">"type"</span><span class="token operator">:</span><span class="token string">"event"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">"inputs"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"attempt"</span><span class="token punctuation">,</span><span class="token string-property property">"outputs"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-property property">"stateMutability"</span><span class="token operator">:</span><span class="token string">"nonpayable"</span><span class="token punctuation">,</span><span class="token string-property property">"type"</span><span class="token operator">:</span><span class="token string">"function"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token string">'0xcF469d3BEB3Fc24cEe979eFf83BE33ed50988502'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>JsonRpcProvider</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TEST_API_URL</span> <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TEST_PRIVATE_KEY</span> <span class="token keyword">as</span> string<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// we need signature, so must be wallet and that need private key and provider.</span>  <span class="token keyword">const</span> contract  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span><span class="token constant">ABI</span><span class="token punctuation">,</span>wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// or we can use ethers.getContractAt to get the contract.</span>  <span class="token comment">// const contract = await ethers.getContractAt('Contract',address, wallet);</span>  <span class="token keyword">const</span> attempt <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// i don't have eth, so can't be pay for gas fees.</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wallet<span class="token punctuation">,</span> <span class="token string">'wallet'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> attempt<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// We recommend this pattern to be able to use async/await everywhere</span><span class="token comment">// and properly handle errors.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Calling-another-contract"><a href="#Calling-another-contract" class="headerlink" title="Calling another contract."></a>Calling another contract.</h2><ol><li>Call by Manual coding<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract <span class="token constant">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">setValueOnB</span><span class="token punctuation">(</span><span class="token parameter">address b</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>bool s<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"storeValue(uint256)"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">require</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>contract <span class="token constant">B</span> <span class="token punctuation">&#123;</span>    uint x<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">storeValue</span><span class="token punctuation">(</span><span class="token parameter">uint256 _x</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> _x<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Call by contract address<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract <span class="token constant">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">setValueOnB</span><span class="token punctuation">(</span><span class="token parameter">address b</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>bool s<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeValue</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>        <span class="token function">require</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>contract <span class="token constant">B</span> <span class="token punctuation">&#123;</span>    uint x<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">storeValue</span><span class="token punctuation">(</span><span class="token parameter">uint256 _x</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> _x<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>call by interface (for we don’t have contract content)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">storeValue</span><span class="token punctuation">(</span><span class="token parameter">uint256</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>contract <span class="token constant">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">setValueOnB</span><span class="token punctuation">(</span><span class="token parameter">address b</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token constant">B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeValue</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h2 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h2><p>that’s just a function and the reason we need use this is that provide a function body for it.</p><h2 id="it"><a href="#it" class="headerlink" title="it"></a>it</h2><p>it is a function scope, we need write test logic in second arguments, the first argument is string to describe the stage.</p><h2 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h2><p>when testing code dependent deployed contract, it’s often to useful to have spcific scenes before play out before each test. it probably need to check whether each and every address can or not perform transfer. however, we need to deploy the contract first. because repeated deployment of contract slow down the test significantly, this is why waffle provide us to create a fixture by <code>createFixtureLoader</code> function. it need arguments that is state we need to snapshot.</p><p>for example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">test1</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should deploy and set the owner correctly'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// const &#123; faucet, owner &#125; = await loadFixture(deployContractAndSetVariables);</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> test1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadFixture</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token string">'???'</span><span class="token punctuation">)</span>  <span class="token comment">// expect(await faucet.owner()).to.equal(owner.address);</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// once snapshot, it always will be store in function scopes</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Faucet'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We define a fixture to reuse the same setup in every test.</span>  <span class="token comment">// We use loadFixture to run this setup once, snapshot that state,</span>  <span class="token comment">// and reset Hardhat Network to that snapshot in every test.</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deployContractAndSetVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> Faucet <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">'Faucet'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> faucet <span class="token operator">=</span> <span class="token keyword">await</span> Faucet<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>owner<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getSigners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Signer 1 address: '</span><span class="token punctuation">,</span> owner<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> faucet<span class="token punctuation">,</span> owner <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should deploy and set the owner correctly'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> faucet<span class="token punctuation">,</span> owner <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadFixture</span><span class="token punctuation">(</span>deployContractAndSetVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> faucet<span class="token punctuation">.</span><span class="token function">owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>owner<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析<br>intimidated: 吓坏<br>deterministic: 确定性<br>infrastructure： 基础设施<br>constrain： 限制<br>reside： 贮存<br>presence: 存在<br>cencership: 审查制度<br>auditable：可审查<br>Ubiquitous： 无处不在<br>barries： 障碍<br>curb： 抑制，阻止<br>comprehend： 理解<br>easy as pie： 易如反掌<br>explicitly：明确的<br>clause： 条款<br>neutrality；中立<br>arbitrary： 随意的<br>EVM： Etherrum Virtual Machine<br>Stale&#x2F;Orphan block： 陈旧&#x2F;孤立块，是指在一个区块同时被矿工挖掘出，区块可能会出现临时分叉，未能被选为有效区块的区块被称为stale&#x2F;Orphan block，在Etherum中此类区块又称为Ommer block，是Etherrum作为鼓励和奖励矿工为安全做出贡献的机制。<br>emulate： 模仿<br>underlying： 潜在的<br>monetary： 货币<br>fixed： 固定的<br>Arithmetic: 算术<br>benchmarking: 基准测试<br>discrepancies: 差异<br>philosophy: 理念<br>Ethereum improvement proposal: EIP， Ethereum 改进提案<br>first and foremost: 首先<br>specification： 规范<br>adhere: 符合<br>impromptu： 即兴<br>compatible： 兼容的<br>contentious： 有争议的<br>overHead：高昂的<br>collateral: 抵押物<br>intuitively: 直观的<br>re-orged： 重组<br>manual：手动的<br>intervention： 干涉<br>canonical: 经典的<br>shifted： 转移<br>denomination: 面值<br>demand： 需求<br>circumventing： 规避<br>deflationary: 通缩<br>deprecated: 弃用<br>redunant: 多余的<br>tampered: 被篡改<br>EOAs: Extended owned account.<br>Vulnerability: 漏洞<br>JSON-RPC: remote procedure call(rpc) protocal that uses JSON to encode message.<br>exclusively: 只，仅仅 equied to only<br>instruction: 指令<br>term: 术语<br>boilerplate: 样板<br>pioneer： 先锋<br>lucrative: 有利可图<br>mnemonic: 助记词<br>configured： 配置<br>specified： 指定的<br>analogues： 相似的<br>discarded： 丢弃<br>underscore preceding: 前下划线<br>snippet： 片段<br>dire consquences: 可怕的后果<br>unsigned integer: 无符号整数<br>allocated： 分配的<br>resilient: 弹性的<br>LIFO： 堆栈结构，it’s have pushing and poping<br>destructure: 解构<br>parenthesis: 括号<br>exception： 异常<br>declared: 声明<br>ephermal: 短暂的<br>ABI: application binary interface, that’s bridge connected compilers and applications.<br>writing up a to b: 连接a到b<br>pass into: 传递……进<br>repercurssion: 反应<br>padded out: 填充到<br>replay to: 转发到<br>occurrence: 事件<br>precede xx with : 先于 xx<br>shrink: 收缩</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethereum</title>
      <link href="/2023/01/22/ethereum/"/>
      <url>/2023/01/22/ethereum/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethereum"><a href="#Ethereum" class="headerlink" title="Ethereum"></a>Ethereum</h1><h2 id="What-is-Ethereum"><a href="#What-is-Ethereum" class="headerlink" title="What is Ethereum"></a>What is Ethereum</h2><p>Ethereum is a deterministic but practical unbounded state machine, consisting of a global accessible singlton state a vm that applies changes to that state.</p><h2 id="Properties-of-Ethereum"><a href="#Properties-of-Ethereum" class="headerlink" title="Properties of Ethereum"></a>Properties of Ethereum</h2><ol><li><p>Truly global singlton<br>Ethereum is possible the first global singlton computer ever, that is fundamental not localized. Etherrum does not reside in any single machine, no physical presence in the world.</p></li><li><p>Cencorship resistance<br>No one owner Ethereum or control it. </p></li><li><p>Ubiquitous and Accessible.<br>if we want to write to the Ethereum computer, we only need have eth on top of the internet conection - to pay gas.<br>solidity is similar to javascript. so the learning curb for new dev is not that particular difficult.</p></li><li><p>Mutil-User<br>Wide input range of the keccack256 hash function, has a practical infinite range possible of creating account. the range is 2^160</p></li><li><p>Verifiable &amp; Auditable<br>When we deploy the smart contract, it’s permenant unless u explicitly code in clause with a call to <code>selfdestruct</code>.</p></li></ol><h2 id="Ethereum-vs-bitcoin"><a href="#Ethereum-vs-bitcoin" class="headerlink" title="Ethereum vs bitcoin"></a>Ethereum vs bitcoin</h2><p>one of a key different between Ethereum and bitcoin is that Ethereum has a vm built into it that is support Turing-complete language. which means developers can build arbitrary application and program on top of it.<br>In contrast. bitcoin script language is <b>purposefully restricted</b> to simple true&#x2F;false evaluation of condition correlating to whether or not UTXOs can be spent. it’s not allow loop.</p><blockquote><p>Program is written in Turning-complete language have a properties that make it impossible to tell if those programs will ever terminated.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>because Ethereum lanuage is Turning-complete lanuage. so if we deploy above code in block, what will happend? A minaer would receive a transaction, add it to their transaction memory pool, mine a block. add the transaction to block, then broadcast the block to network. now, all the other node in the network will try to run this transaction on their owner machine, they will be stuck in a infinity loop..!</p><p>In order to prevent such attack occurs. Etherrum design a vm to run transactions within. it called EVM(Ethereum Virtual Machine)<br><strong>Other differences between Ethereum and Bitcoin</strong><br>Here’s the information formatted as a table in Markdown:</p><table><thead><tr><th></th><th>ETHEREUM</th><th>BITCOIN</th></tr></thead><tbody><tr><td>Consensus Mechanism</td><td>Proof of Stake</td><td>Proof of Work</td></tr><tr><td>Accounting System</td><td>Account Model</td><td>UTXO Model</td></tr><tr><td>Public Key Cryptography</td><td>secp256k1 elliptic curve</td><td>secp256k1 elliptic curve</td></tr><tr><td>Stale&#x2F;Orphan Blocks</td><td>Rewarded (Ommer Blocks)</td><td>Not Rewarded</td></tr><tr><td>Block Time</td><td>Approx every 12 seconds</td><td>Approx every 10 minutes</td></tr><tr><td>Network Difficulty</td><td>Adjusted every block</td><td>Every 2016 blocks</td></tr><tr><td>Language Support</td><td>Turing Complete smart contracts, custom VM</td><td>non-Turing Complete scripts, VM operations cost gas</td></tr></tbody></table><h2 id="EVM"><a href="#EVM" class="headerlink" title="EVM"></a>EVM</h2><p>The EVM is similar to the JVM. In fact, JVM was considered as an optional to build Ethereum of before development began on the EVM. the problem is, the EVM had very specific requirements in order to run decentralized blockchain. Take, for example, that infinite loop from the previous section:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>how could we create a environment in which code like this would not be able to run infinitely.<br>it turns simplest way to do this by adding the monetary cost of each operation. this cost in Ethereum called <strong>“GAS”</strong>.</p><h2 id="GAS"><a href="#GAS" class="headerlink" title="GAS"></a>GAS</h2><p>Gas is a measurement of the cost to each operation that relates to the computation cost that the operation incurs on the network. So if you are making every node in the network do some kind of computationally expensive task every time they need to verify your transaction, you’ll need to pay for significantly more than a simple transaction that is sending money from one individual to another </p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230522174233FDzPxX.png" alt="Picsee-20230522174233.png"></p><blockquote><p>Even though the above cost is “fixed”, the actual price of the gas ever changed. </p></blockquote><p>We can split these operations up into a several categories:</p><p>Arithmetic (i.e. ADD, DIV, etc.)<br>Information about the current context of the transaction (i.e. TIMESTAMP , CALLVALUE, etc.)<br>Operations that manipulate&#x2F;retrieve from temporary memory (i.e. MSTORE, PUSH32, etc.)<br>Operations that manipulate&#x2F;retrieve from persistent memory (i.e. SSTORE, CREATE, etc.)<br>Control Flow Operations that provide us with loops (i.e. JUMP, JUMPI, etc.)</p><p>if u want to take a look permanent state, u need to cost more gas than Arithmetic operations.</p><p>The Gas prices, Benchmarking centerinally help us to know gas prices. although in some ways this can be a bit of a guessing game. the goal is to find a gas cost that represents of the amount of starin the operation takes on the network.</p><h2 id="FORK"><a href="#FORK" class="headerlink" title="FORK"></a>FORK</h2><h3 id="DOS-denial-of-service"><a href="#DOS-denial-of-service" class="headerlink" title="DOS (denial of service)"></a>DOS (denial of service)</h3><p>In the past, attarckers try to exploit any discrepancies between computations  expensive operation and their associated gas costs. These attack refrence to <strong>“DOS”</strong> they will slow the network to a crwl and deny uses of the service. Due of this, Ethereum upgrade the vm in order to adjust gas costs.</p><p>How does a decentralized network upgrade a vm running on thousands of machines? the answer is <strong>FORK</strong></p><h3 id="Understanding-Fork"><a href="#Understanding-Fork" class="headerlink" title="Understanding Fork."></a>Understanding Fork.</h3><p>Part of philosophy of Ethereum is embrace change and move fast. As such, Ethereum design with the ability to conduct upgrade. and build in a process for suggesting improvements to the system. Each upgrate is spcific in an <strong>Ethereum improvement proposal</strong> or <strong>EIP</strong> for shot.Anyone can suggest standards for Smart Contracts like the popular <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">EIP20 Token Standard</a>  or changes to the Virtual Machine itself like this <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7.md">addition of the DELEGATECALL opcode</a>. Updates to the VM require forks. To understand why, let’s consider how the EVM works.</p><p>Several teams used this specification and implemented the EVM in different languages. Each of these EVM implementations is called an <strong>Ethereum Client</strong>. Two commonly used Ethereum clients today are <strong>Erigon</strong> and <strong>Geth</strong> both written in Go (Parity used to be a popular client but was deprecated in 2020).</p><p>Some upgrads to the evm are planned and other is impromptu response for attrack. Either way, when these changes are to be adopted a fork occurs. this is because active nodes need to update their client with the latest changes spcific by the EIPs. it’s called “fork” because some node may choose upgrate and other may choose not.</p><blockquote><p>Soft fork, backword compatible.</p></blockquote><p>In other cases, especially updates that have <strong>political implications</strong>, clients may not adopt the new changes and may even fork client implementations. This is what happened in the case of the the <strong>DAO Fork</strong> which was a particularly contentious fork splitting the network into two competing blockchains: Ethereum and Ethereum Classic. You can see an example of a forked client by looking at the version of Geth that is maintained by the Ethereum Classic Labs.</p><blockquote><p><a href="https://ethereum.stackexchange.com/questions/13014/summary-and-history-of-the-ethereum-hard-forks/13015#13015">Ethereum hard fork list</a></p></blockquote><h2 id="POS"><a href="#POS" class="headerlink" title="POS"></a>POS</h2><p>POS(Proof of stake), as know as “merge”, the propoties of that Ethereum change POW to POS is</p><ul><li>more security</li><li>less energy</li><li>greater scalablities.</li></ul><h3 id="HOW-POS-Works"><a href="#HOW-POS-Works" class="headerlink" title="HOW POS Works"></a>HOW POS Works</h3><p>In POS, the energy requirement become a validator is much lower and can be done by individual without a high overhead energy cost.</p><p>Instead of using mass amount of electricity, validators are require to stake 32 ETH by deposing it into contract to have ability to validate blocks. The stake ETH is used as collerator against bad actors in the network. If any given any validators acts dishonest or malicious they put themselves at risk of losing their stake ETH.</p><p>Rather than all validators mine a block same time, the network randomly choose a validator to purpose a block every 12 seconds, then all of the other validators veirfy that the purpose block is correct, and the cycle repeats. </p><h3 id="How-POS-affects-dev"><a href="#How-POS-affects-dev" class="headerlink" title="How POS affects dev"></a>How POS affects dev</h3><p>How PoS affects Ethereum Development<br>One of the largest ways that PoS affects Ethereum developers is with a new framework for block finality. Finality in blocks refers to how confident you are that the given block will not change or get forked away. For blocks that have been on the network for a very long time (older blocks) it is extremely unlikely that it will be removed from the canonical chain and therefor has high finality.</p><p>Proof of Stake introduced 2 new levels of finality that developers should consider when requesting data from the network: safe and finalized. Here is an overview of all “block tags”:</p><p>earliest: The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.<br>finalized: The most recent crypto-economically secure block, that has been accepted by &gt;2&#x2F;3 of validators. Typically finalized in two epochs (64 blocks). Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.<br>safe: The most recent crypto-economically secure block, typically safe in one epoch (32 blocks). Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.<br>latest: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy&#x2F;normal conditions. Intuitively, this block is the most recent block observed by the client.<br>pending: A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.</p><p><img src="https://files.readme.io/55d7bc4-block_and_epochs_.png" alt="earliest ≤ finalized ≤ safe ≤ latest ≤ pending"></p><h2 id="Gas-On-Ethereum"><a href="#Gas-On-Ethereum" class="headerlink" title="Gas On Ethereum"></a>Gas On Ethereum</h2><h3 id="EIP-1559"><a href="#EIP-1559" class="headerlink" title="EIP-1559"></a>EIP-1559</h3><p>As many of u may know, the price of gas is changes with every block, Historically, gas price in Ethereum was unpredictable and at times, high marking transactions inaccessible to most people.</p><p>However, EIP proposed to improve gas price caculation, knowen as EIP-1559. Instead of coving antiquated computation of gas price from before EIP-1559, it’s focus on how is works for current state of Ethereum.</p><h3 id="Denominations-of-Ether"><a href="#Denominations-of-Ether" class="headerlink" title="Denominations of Ether"></a>Denominations of Ether</h3><p><img src="https://res.cloudinary.com/divzjiip8/image/upload/v1670883266/alchemyu/Screen_Shot_2022-12-12_at_2.12.01_PM.png" alt="Picsee-20230522174241.png"></p><h3 id="How-is-the-price-of-gas-set"><a href="#How-is-the-price-of-gas-set" class="headerlink" title="How is the price of gas set?"></a>How is the price of gas set?</h3><p>Every block has mimiumed amound of gas that can be used within it. This is how the numbers of transactions include within a block are determined. Every block has capacity to use 30 million gas but has target 15m gas total.</p><p>The price of gas is determined by the amount of demand for transactions. where demand is measured by how filled previous block was related to the target gas.</p><p><img src="https://res.cloudinary.com/divzjiip8/image/upload/v1670445934/alchemyu/block-usage-image.png" alt="how to set gas price"></p><p>This base fee helps users select an efficient gas amount that is likely to get their transaction mined rather than wasting tons of money on unnecessarily high gas prices like we’ve seen in the past. These mechanisms also make it easy to predict future gas prices by looking at how “full” the previous blocks were.</p><ul><li><p><a href="https://etherscan.io/block/16128921">16128921</a><br><img src="https://res.cloudinary.com/divzjiip8/image/upload/v1670446077/alchemyu/block-16128921.png" alt="16128921"></p></li><li><p><a href="https://etherscan.io/block/16128922">https://etherscan.io/block/16128922</a><br><img src="https://res.cloudinary.com/divzjiip8/image/upload/v1670446069/alchemyu/block-16128922.png" alt="16128922"></p></li></ul><p>we can see 16128921 only using 6.4 million gas instead of 15 million, so the block demand is not big enought, then next block will decrease the gasbase for increasing amount of transactions. That’s how calculation price of gas.</p><h3 id="What-happend-to-the-base-fee"><a href="#What-happend-to-the-base-fee" class="headerlink" title="What happend to the base fee?"></a>What happend to the base fee?</h3><p>Instead of going straight into miners pocket. the base fee actually has burned. there several reasons for why base fee is burned instead of being given to miner</p><ul><li>This prevents the miner from circumventing the payment of the base fee since they have to pay at least base fee * # of transactions for the block that the mine</li><li>buring the base fee also creates a deflation pressure on Ether as an asset since supply is being taken out the market</li></ul><h3 id="Setting-the-gas-for-your-transaction"><a href="#Setting-the-gas-for-your-transaction" class="headerlink" title="Setting the gas for your transaction"></a>Setting the gas for your transaction</h3><p>Turns out when you are sending a transaction, <strong>you’re not actually setting the base fee value</strong>, but rather your setting the <strong>max fee</strong> which represents the maximum amount that you’re willing to pay to get your transaction included. Luckily, unlike with the previous gas usage model, your transaction will only ever use the base fee** amount to execute, the rest of the value (max fee - base fee) will be return to you.</p><p>As a dApp develop you can actually create your own algorithm to determine how much gas to include in your transactions using endpoints like eth_feeHistory. If you’re interested in learning how to build this, check out How to Build a Gas Fee Estimator using EIP-1559.</p><h3 id="How-are-miners-paid"><a href="#How-are-miners-paid" class="headerlink" title="How are miners paid?"></a>How are miners paid?</h3><p>Since the base fee is entirely burned, the new incentive for miners is now known as the miner tip. In a perfect world, the miner tip is the minimum amount that the miner is willing to accept in order to execute your transaction. This tip was originally set as 1gwei but can fluctuate depending on how full blocks are. Since the target gas value in blocks is 15M, in general, so long as blocks are hitting or near the target amount, there will always be room to add more transactions within a block. This is why the miner tip does not need to be insanely high to get your transaction included.</p><p>Typically when you set the gas for your transaction you’re setting a value called maxPriorityFee which is equal to the max fee + the miner tip . We’ll learn more about sending transactions later on this week!</p><h2 id="Account-in-Ethereum"><a href="#Account-in-Ethereum" class="headerlink" title="Account in Ethereum"></a>Account in Ethereum</h2><h2 id="EOA"><a href="#EOA" class="headerlink" title="EOA"></a>EOA</h2><p>Externally Owned Accounts (or EOA for shot) are similar to bitcoin pri&#x2F;pub keys. In both models, the address and public key are associated to private key via  an Elliptic Curve Digital Signature<br>The different between Account model and UTXOs:</p><ul><li>Ethereum is a 40 character hexadecimal string, Bitcoin is 26-35 alphanumeric string in Bitcoin</li><li>Bitcoin addresses end in checksum to ensure the address typed properly.Ethereum addresses don’t have a checksum by default, although EIP-55 introduced a capitalization scheme that can be validated by wallet software.<br>The biggest different is EOAs have balance. This means the global state of blockchain actively track how much ether active address on the network holds.</li></ul><blockquote><p>🤓 Minor clarification here: an active address refers to an address that has interacted on the Ethereum blockchain. There are technically 16^40 (or 2^160 if you’re thinking in binary!) possible Ethereum addresses which can be generated. These addresses are not included in the global state tree until they have interacted with the blockchain. Otherwise, this would be a massive amount of data stored! Take a look at <strong>(EIP-161)[<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md]">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md]</a></strong> which was implemented when flaws in the Ethereum system allowed an attacker to create 19 million accounts at extremely low gas costs.</p></blockquote><h3 id="Account-vs-UTXOs"><a href="#Account-vs-UTXOs" class="headerlink" title="Account vs UTXOs"></a>Account vs UTXOs</h3><p>To transfer money in bitcoin we spend UTXOs. In Ethereum there are no UTXOs. Instead, at the end of the transaction transfering ether, the the transfered amount is subtracted from the sender’s balance and add it to recipient’s address balance in the global state tree.</p><p>Compare to UTXOs, an account balance is quiet straightforward, especially for dev, we can get the address balance just use balance operation that EVM support inside code running on the EVM</p><p>Each Ethereum address also contains nonce, the nonce keeps a count of all transactions sent from that particular address.<br>Let’s say you have 2 ether in your account and you want to send 1 ether to Bob:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token constant">BOBS_ADDRESS</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">100000000000000000</span> <span class="token comment">// 1 ether</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You’ll be able to broadcast this transaction to the network once you sign it with your private key. 🔑🌐</p><p>At that point, with the current parameters specified, what’s stopping Bob from re-transmitting this same transaction again to the network? 🤔</p><p><strong>NOTHING😱</strong> </p><p>To combat this, Ethereum tracks the number of transactions sent by an account, called the account nonce. Each time a transaction is sent, the nonce is incremented:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token constant">BOBS_ADDRESS</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">100000000000000000</span><span class="token punctuation">,</span> <span class="token comment">// 1 ether</span>  <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token number">0x0</span> <span class="token comment">// this is the first transaction, nonce is zero!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If Bob tried to re-broadcast the transaction now, the network would reject it. Once the first transaction is successfully mined the miners enforce the rule that the nonce of your next transaction should be 0x1.</p><p>💭 You may be thinking: “What if Bob tried to increment the nonce himself?” But, of course, Bob would need you to sign the transaction after he incremented the nonce. The result of a digital signature does not leave room for the underlying data to be tampered with.</p><p>the nonce is simply means a number we’re using once for its particular purpose.</p><p>To summarize, the difference between Ethereum EOAs and Bitcoin addresses is that active EOAs are stored with a balance and a nonce. Whereas in Bitcoin the client only keeps track of UTXOs which contain an owner address.</p><h3 id="Contract-Accounts"><a href="#Contract-Accounts" class="headerlink" title="Contract Accounts"></a>Contract Accounts</h3><p>Smart contract, it’s simply <strong>a program that runs in the blockchain execution environment</strong>.<br>As a dev, we will write smart contract. once we do that, we can deploy the contract in Ethereum blockchain. we can do this by running a transaction from our EOAs with the <strong>bytecode</strong> of the compiled the smart contract.</p><p>The contract have account, since that it also have address and balance. The contract account can’t be controlled by the private key. Instead, the EOAs make a transaction to call function on contract. From here, the contract can also make a call to another contract synchronously. Once the contract deploys, the contract code can’t be changed, but also it can updated by transaction.</p><p>📖 A contract can store an address of another contract that it needs to interact with. Since the address is held in storage it can be updated through transactions. Therefore it’s possible to upgrade a system by deploying new contracts and running a transaction to update references to point to the new addresses. This can be a bit of a challenging subject and is generally referred to as smart contract <strong>upgradeability</strong>.</p><h2 id="The-summary-of-Ethereum"><a href="#The-summary-of-Ethereum" class="headerlink" title="The summary of Ethereum"></a>The summary of Ethereum</h2><p>(summary)[<a href="https://university.alchemy.com/course/ethereum/md/63911a1ffdaf860004511e98]">https://university.alchemy.com/course/ethereum/md/63911a1ffdaf860004511e98]</a></p><h1 id="JSON-RPC"><a href="#JSON-RPC" class="headerlink" title="JSON-RPC"></a>JSON-RPC</h1><p>The way for communicating with Ethereum computer.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230524152948Z5Cjcr.png" alt="Picsee-20230524152948.png"></p><p>The above image simply shows that JSON-RPC is a bridge we use to connect any dApp we use&#x2F;build to Ethereum node, and thus greater Ethereum network.</p><h2 id="Ethereum-clients"><a href="#Ethereum-clients" class="headerlink" title="Ethereum clients"></a>Ethereum clients</h2><p>To run Ethereum node, we must run Ethereum client.These Ethereum clients use JSON-RPC, and thus define methods like eth_getBlockByNumber that are by-default queryable by any JSON-RPC compatible Request</p><h2 id="JSON-RPC-Concept"><a href="#JSON-RPC-Concept" class="headerlink" title="JSON-RPC Concept"></a>JSON-RPC Concept</h2><p>JSON-RPC is a api standard just like REST standard.</p><p>Thanks to every Ethereum node containing a JSON-RPC interface, we can communicate with the Ethereum blockchain in an instant. We can make important READ requests like eth_getBlockByNumber and eth_getBalance to the Ethereum blockchain at any time.</p><h2 id="Ethereum-client-and-node-what-each-means-and-the-difference"><a href="#Ethereum-client-and-node-what-each-means-and-the-difference" class="headerlink" title="Ethereum client and node, what each means and the difference."></a>Ethereum client and node, what each means and the difference.</h2><p>In the first, Term “client” and “node” are often used interchanged but there is difference.<br>Ethereum client: It’s software needed to allow Ethereum node read&#x2F;write block on Ethereum blockchain and Ethereum-based smart contract. “node” is running piece of the client software. In order to run node, u must download client and run it.</p><h3 id="Three-Types-of-Node"><a href="#Three-Types-of-Node" class="headerlink" title="Three Types of Node:"></a>Three Types of Node:</h3><ul><li>Full Node</li></ul><p>Full node are full of the data, they store and can destribute all of the data from the Ethereum network. Full node will additionally participate in block verification.( verify all blocks and states on the network).</p><p>An advanced of implement full node which it can interact with any smart contract on public blockchain. Full node can also directly deploy smart contract into any public blockchain.</p><p>However, the full use and store of data, as well as directly deploy smart contract, comes at cost. Full node can be taxing on ur computer hardware and bandwidth resources. Retrieving entries data may cost a lot of time. sometimes ur first deploy node may will take a few days to synchronize. and then, the node must be maintained, updated, keep it online in order to not have to repeat full synchronization again.</p><ul><li>Light Node</li></ul><p>Light Node is similar to full node but handle less information. The header store header chain information(the basic information been stored in the blcok, such like timestamp and hash of previous block). But it only receive information from the request. it can verify the validity of data, but not fully participate in the verification process. the light node almost implements on remote client. Because these node not take on more intensive IO. they already been improved useful for the smart phone or anthor small store equipment.</p><ul><li>Achieved Node</li></ul><p>Achivement Node is store all information from full node and builds achivement of historic state of block. evan as the client has been synchronized, the Achievment node still keep store all the data. on one the other hand, the Achievment node and light node will “prune” the history blockchain data. that’s means it can be re-build, but do not retrain this information.</p><p>Any of the client can run above node.</p><h3 id="What’s-Client"><a href="#What’s-Client" class="headerlink" title="What’s Client"></a>What’s Client</h3><p>Client is helpful for developer, because they can let deve using a lot of programming languages interact with network and other network nodes. Ethereum client mintains several  client for several languages. inclding GO, RUST, Java  and C++.<br>Geth (Go)<br>OpenEthereum (Rust)<br>Nethermind (C#, .NET)<br>Besu (Java)<br>Erigon (Go&#x2F;Multi)</p><h3 id="Type-of-Ethereum-Client"><a href="#Type-of-Ethereum-Client" class="headerlink" title="Type of Ethereum Client"></a>Type of Ethereum Client</h3><ul><li>Full Client<br>Full client store all data of the Ethereum blockchain. the progress may take a few days to synchronize and requires a huge amount of disk space. exactly 1T. Full node client allow the conact node executes all task in network. including dige, transaction, block headers verification and smart contract running.</li><li>Light Client<br>Light Client is similar to Full client, but it not store all data of the Ethereum blockchain. therfore, it always deal with smart contract and broadcast transactions. other use cases include web3 instance in javascript, dApp browser and retrieving exchange rate data.</li><li>Achivement Client<br>Achivement client always used to be wallet for send and receive transactions.</li></ul><h3 id="Difference-between-Client-and-Node"><a href="#Difference-between-Client-and-Node" class="headerlink" title="Difference between Client and Node"></a>Difference between Client and Node</h3><p>Node and Client work together, both term used to be interchanged. However, they both opeart separately in order to access the Ethereum network.</p><blockquote><p>Think of nodes and clients operating like a computer accessing the internet: the node is an operating system, like Windows or iOS, and the client is the computer itself. The client computer gives a user the ability to access the node operating system, which in turn, gives you the ability to access the internet. Different computers will be able to give you access to the same operating system and the different operating systems will give you access to the same internet.</p></blockquote><blockquote><p><strong><a href="https://www.coindesk.com/learn/ethereum-nodes-and-clients-a-complete-guide/">Read more information if u are interested with client and node</a></strong></p></blockquote><h2 id="Transaction-in-Ethereum"><a href="#Transaction-in-Ethereum" class="headerlink" title="Transaction in Ethereum"></a>Transaction in Ethereum</h2><p>The key of the concept of transaction is transaction driver blockchain state changing. Ehereum is account-based system. it have two types of accounts, EOA and contract account. EOAs controled by human, that’s only way human dircity infect Ethereum unless EIP. the contract account(address) is used to as a call for transaction (that’s need be makeed by human). both of account have balance and address, the different between both is contract have storage hash and code hash. </p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230524215916FgOOoX.png" alt="Picsee-20230524215916.png"><br>additionally, we also have two types of transactions. </p><ul><li>Contract creation, it’s used to create smart contract.</li><li>Message Call, it’s used to update the smart contract.</li></ul><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230524220036nV5eN4.png" alt="Picsee-20230524220036.png"></p><p>This is all of the information abount this section, we can see that first of all, the EOAs make different decisons, if he want to insepect balance or anthor thing, he just use JSON-RPC(withour signed). but if he need write or change blockchain state that he need signed!. once transaction have been completed, the nounce of transaction will be genreated.!</p><p>Transaction Object Example<br>Alice sends Bob 1 ETH</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0x2c8645BFE28BEEb6E19843eE9573b7539DD5B530"</span><span class="token punctuation">,</span> <span class="token comment">// Bob</span>  <span class="token literal-property property">gasLimit</span><span class="token operator">:</span> <span class="token string">"21000"</span><span class="token punctuation">,</span>  <span class="token literal-property property">maxFeePerGas</span><span class="token operator">:</span> <span class="token string">"30"</span><span class="token punctuation">,</span> <span class="token comment">// 28 (base) + 2 (priorityFee)</span>  <span class="token literal-property property">maxPriorityFeePerGas</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token comment">// minerTip</span>  <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"100000000000000000"</span><span class="token punctuation">,</span> <span class="token comment">// 1 ether worth of wei</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token comment">// no data, we are not interacting with a contract</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// this is not a legacy tx</span>  <span class="token literal-property property">chainId</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// this is AU, we deal only in test networks! (Göerli)    </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Alice calls a function on a smart contract</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8"</span><span class="token punctuation">,</span> <span class="token comment">// smart contract address</span>  <span class="token literal-property property">gasLimit</span><span class="token operator">:</span> <span class="token string">"36000"</span><span class="token punctuation">,</span>  <span class="token literal-property property">maxFeePerGas</span><span class="token operator">:</span> <span class="token string">"30"</span><span class="token punctuation">,</span> <span class="token comment">// 28 (base) + 2 (priorityFee)</span>  <span class="token literal-property property">maxPriorityFeePerGas</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token comment">// minerTip</span>  <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token comment">// this is Alice's second transaction, so the nonce has increased!</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"100000000000000000"</span><span class="token punctuation">,</span> <span class="token comment">// 1 ether worth of wei</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'0x7362377b0000000000000000000000000000000000000000000000000000000000000000'</span><span class="token punctuation">,</span> <span class="token comment">// this calldata tells the EVM what function to execute on the contract, contains parameter values here as well</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// this is not a legacy tx</span>  <span class="token literal-property property">chainId</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// this is AU, we deal only in test networks! (Göerli)    </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>How To Manually Construct Calldata<br>Once we send a transaction that points to a smart contract, how does the contract know what specific function you intend to call? Well, all those specifics end up going in the data field of each transaction.</p><p>Here is the algorithm to manually construct calldata:</p><ol><li><p>Say Alice wants to call the withdrawEther() function of a faucet smart contract…</p></li><li><p>Alice must take the keccak256 hash of that function signature:</p></li></ol><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230524220556mSgpzU.png" alt="Picsee-20230524220556.png"></p><p>The resulting output is: 7362377b8e2cc272f16ab5d5441f976bd53fd78ccd01e3c67a1f6b2efdae09e0</p><ol start="3"><li><p>Take the first 4 bytes (8 characters) of the hash output, which is just: 7362377b</p></li><li><p>This function takes no arguments, so no need to append any parameter data</p></li></ol><ul><li>If the function took arguments, you would need to hash the entire function signature with that parameter type, for example: helloWorld(uint256)</li><li>Final calldata construction, padded out to 32 bytes: 0x7362377b0000000000000000000000000000000000000000000000000000000000000000</li></ul><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析<br>intimidated: 吓坏<br>deterministic: 确定性<br>infrastructure： 基础设施<br>constrain： 限制<br>reside： 贮存<br>presence: 存在<br>cencership: 审查制度<br>auditable：可审查<br>Ubiquitous： 无处不在<br>barries： 障碍<br>curb： 抑制，阻止<br>comprehend： 理解<br>easy as pie： 易如反掌<br>explicitly：明确的<br>clause： 条款<br>neutrality；中立<br>arbitrary： 随意的<br>EVM： Etherrum Virtual Machine<br>Stale&#x2F;Orphan block： 陈旧&#x2F;孤立块，是指在一个区块同时被矿工挖掘出，区块可能会出现临时分叉，未能被选为有效区块的区块被称为stale&#x2F;Orphan block，在Etherum中此类区块又称为Ommer block，是Etherrum作为鼓励和奖励矿工为安全做出贡献的机制。<br>emulate： 模仿<br>underlying： 潜在的<br>monetary： 货币<br>fixed： 固定的<br>Arithmetic: 算术<br>benchmarking: 基准测试<br>discrepancies: 差异<br>philosophy: 理念<br>Ethereum improvement proposal: EIP， Ethereum 改进提案<br>first and foremost: 首先<br>specification： 规范<br>adhere: 符合<br>impromptu： 即兴<br>compatible： 兼容的<br>contentious： 有争议的<br>overHead：高昂的<br>collateral: 抵押物<br>intuitively: 直观的<br>re-orged： 重组<br>manual：手动的<br>intervention： 干涉<br>canonical: 经典的<br>shifted： 转移<br>denomination: 面值<br>demand： 需求<br>circumventing： 规避<br>deflationary: 通缩<br>deprecated: 弃用<br>redunant: 多余的<br>tampered: 被篡改<br>EOAs: Extended owned account.<br>Vulnerability: 漏洞<br>JSON-RPC: remote procedure call(rpc) protocal that uses JSON to encode message.<br>exclusively: 只，仅仅 equied to only<br>instruction: 指令<br>term: 术语<br>boilerplate: 样板<br>pioneer： 先锋<br>lucrative: 有利可图<br>mnemonic: 助记词<br>configured： 配置<br>specified： 指定的<br>analogues： 相似的<br>discarded： 丢弃<br>underscore preceding: 前下划线<br>snippet： 片段</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blockchain and cryto</title>
      <link href="/2023/01/11/blockchain-and-cryto/"/>
      <url>/2023/01/11/blockchain-and-cryto/</url>
      
        <content type="html"><![CDATA[<h1 id="Blockchain-and-cryto"><a href="#Blockchain-and-cryto" class="headerlink" title="Blockchain and cryto"></a>Blockchain and cryto</h1><h2 id="Purpose-of-blockchain"><a href="#Purpose-of-blockchain" class="headerlink" title="Purpose of blockchain"></a>Purpose of blockchain</h2><p>with a blockchain we can decentralize where code runs and agree on the output</p><ul><li>there’s no single owner of the code’s execution</li><li><ul><li>the code always run as a program.</li></ul></li><li><ul><li>the code transparently verifieable.<blockquote><p>the purpose of blockchain is to have a <b>network of computer agree upon a common state of data</b>.no person or organization can control this, erevryone should be able to practicipate in this process.</p></blockquote></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230511130710mneUCe.png?token=ALJ6LARDGOBC6O75NYEU56DELR4D6" alt="Picsee-20230511130710.png"></p><h2 id="blockchain-network"><a href="#blockchain-network" class="headerlink" title="blockchain network"></a>blockchain network</h2><ul><li>blockchain: protocal connecting these machines.</li><li>each machine or node will in the network will run code as it is writen.</li><li>the blockchain will enforce these rules.</li><li>since the program is enforced, it is called “smart contract”.</li></ul><h2 id="bitcoin"><a href="#bitcoin" class="headerlink" title="bitcoin"></a>bitcoin</h2><ul><li>the first successful blockchain and crypto.</li><li>but there was much research and attempts before it</li><li>a lot of components were discovered today.</li></ul><h2 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works"></a>how it works</h2><ul><li>proof of work - Security.</li><li>mining the rewards - fiancial incentives.</li><li>public key cryptography: Authenication.</li><li>linked data structures: chronology.</li><li>peer to peer connection: permissionless.<br>these components work together in concert.<br>decentralization emerges from a properly setup network</li></ul><h2 id="Cryto"><a href="#Cryto" class="headerlink" title="Cryto"></a>Cryto</h2><p>way before crytocurrences, there was cryto.<br>two important primitives for our purposes:</p><ul><li>crytographic hashes</li><li>publick key crytography.</li></ul><h3 id="hash-function"><a href="#hash-function" class="headerlink" title="hash function"></a>hash function</h3><p>hash: give me a input I’ll give u a fixed size output<br>input can be any type of data: image, string, video.</p><h3 id="crytographic-hash-function"><a href="#crytographic-hash-function" class="headerlink" title="crytographic hash function"></a>crytographic hash function</h3><p>a crytographic hash is a function with these  properties:</p><ul><li>deterministic</li><li>pseudorandom</li><li>one-way</li><li>fast to compute</li><li>collsion resistant.<br>sha256 is one such function which provides 256 bit outputs.</li></ul><h3 id="crytographic-hash-functions"><a href="#crytographic-hash-functions" class="headerlink" title="crytographic hash functions"></a>crytographic hash functions</h3><p>two important use cases for hash functions for us:</p><ul><li>commitments(smart contract)</li><li>proof of work</li></ul><h1 id="digital-signature"><a href="#digital-signature" class="headerlink" title="digital signature"></a>digital signature</h1><h2 id="symmetric-key"><a href="#symmetric-key" class="headerlink" title="symmetric key"></a>symmetric key</h2><p>same key on both sides.<br>communication security over an unsecured channels.<br>history</p><ul><li>military  </li><li><ul><li>key:324, msg: cat, encrypted: dog.<br>example:<br>aes: advanced encrypted standard.<br>downside: bothside must have the key beforehand.</li></ul></li></ul><h2 id="Asymmetric-key"><a href="#Asymmetric-key" class="headerlink" title="Asymmetric key"></a>Asymmetric key</h2><p>one public key, the other private key.<br>public key signs (encrypted).<br>private key verifies. (decrypted)</p><p>commonly referred to publicKey crytography.</p><h2 id="publick-key-in-web3"><a href="#publick-key-in-web3" class="headerlink" title="publick key in web3"></a>publick key in web3</h2><ul><li>users sign a transaction with their private key.</li><li>user boardcasts the transaction to blockchain.</li><li>blockchain nodes recover public key from signature from which the user’s address is derived.</li></ul><h2 id="RSA-amp-ECDSA"><a href="#RSA-amp-ECDSA" class="headerlink" title="RSA &amp; ECDSA"></a>RSA &amp; ECDSA</h2><p>RSA based on publick key methonology. it’s very easy to find the product of two prime numbers, yet extremely difficult to factor out those two prime numbers if you have the product</p><p>The ECDSA algorithm uses elliptic curves. It can provide the same level security as other public key algorithms with smaller key sizes, which is the reason it’s become quite popular. It is the Digital Signing Algorithm used by Bitcoin, specifically the secp256k1 curve.</p><h1 id="proof-of-work-and-mining"><a href="#proof-of-work-and-mining" class="headerlink" title="proof of work and mining"></a>proof of work and mining</h1><h2 id="mining-key-points"><a href="#mining-key-points" class="headerlink" title="mining key points"></a>mining key points</h2><ol><li>mining is the process to create a block of transaction to be added to blockchain.</li><li>peers in the mining process are called ‘miners’</li></ol><ul><li>a. to network</li><li>b. miners provide processing power to network to exchange for chance to get rewards.</li></ul><p>mining has two main functions:</p><ol><li>consensus machanism </li><li>currency issuance</li></ol><p>in a decentralized enviorment we always have those issues:</p><ul><li>how  do all nodes agree on what current and future state of users account balance and contract interactions is?</li><li>who gets to add new blocks&#x2F;transactions to a chain.how do we know any blocks added are ‘valued’</li><li>how we know all of these thing condinated without any central actor in place?</li></ul><p>the solution of those is consensus mechanism</p><h2 id="consensus-mechanism"><a href="#consensus-mechanism" class="headerlink" title="consensus mechanism"></a>consensus mechanism</h2><p>consensus mechanism means comming to a general agreement. <b> blockchain consensus mechanism typically means that at least 51% of nodes are in agreement over the current global state of the network</b>.</p><p>the main consensus  mechanism rules for proof-of-work typically look like religious commandments:</p><ul><li>cannot double spend</li><li>the longest chain will be the one the rest of the nodes accept as the one “true” chain, determined by a chain’s cumulative work. also known as <b>nakamoto consensus</b>.</li></ul><h2 id="mining-algorithm"><a href="#mining-algorithm" class="headerlink" title="mining algorithm"></a>mining algorithm</h2><p>when a miner ‘mines’ a block, what does the miner actually do?<br>mining software continously hashes a block until a hash is fount that meets a target difficulty.</p><h2 id="nonce"><a href="#nonce" class="headerlink" title="nonce"></a>nonce</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sha256</span><span class="token punctuation">(</span><span class="token string">"Hi Grandma! coolgrandma555@hotmail.com 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f2d9e2…</span><span class="token function">sha256</span><span class="token punctuation">(</span><span class="token string">"Hi Grandma! coolgrandma555@hotmail.com 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4ee36e…</span><span class="token function">sha256</span><span class="token punctuation">(</span><span class="token string">"Hi Grandma! coolgrandma555@hotmail.com 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c25e5c…</span><span class="token comment">// keep on guessing, keep on guessing…</span><span class="token function">sha256</span><span class="token punctuation">(</span><span class="token string">"Hi Grandma! coolgrandma555@hotmail.com 424"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5552ab…</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>📖 The number that we’re appending on the end of the message here is generally referred to as a nonce. We’ll see how both Ethereum and Bitcoin make use of nonces in a few ways!</p></blockquote><h1 id="blockchain-structure"><a href="#blockchain-structure" class="headerlink" title="blockchain structure"></a>blockchain structure</h1><p>The image show three different ways of internet. the first way is centralized for trandional applications, if u want prove value, it decide by centre services. the second way is Decentralized, it always be missunderstanding to blockchain. but blockchain have a important way, it is peer to peer. so the last image shows blockchain.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230512151717l6NMC5.png?token=ALJ6LAVM5B4V2TPXWKILYKTELXUDW" alt="Picsee-20230512151717.png"></p><p>thought challenges<br>Q: how do distributed p2p networks agree on what data is validated without a central administrator running the show?<br>A: Consensus machanisms</p><ul><li>the bitcoins network decides validity of new data based on who is able to produce a  prove of work.</li></ul><p>Q: how is the block hash calculate?<br>A: the hash function takes data as input and returns unique hashes.</p><p>Q: what is ‘valid’ hash?<br>A: A valid hash is meet certain requirements.</p><ul><li>block index is greater than last block index.</li><li>block previous hash is equal to lastest block hash.</li><li>block hash meets difficulty requirements.</li><li>block hash is correct calculated.</li></ul><h1 id="UTXO-amp-Account-Models"><a href="#UTXO-amp-Account-Models" class="headerlink" title="UTXO &amp; Account Models"></a>UTXO &amp; Account Models</h1><p>trandional vs p2p<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230515201650tANILr.png" alt="Picsee-20230515201650.png"></p><p>Nodes in blockchain p2p network, like bitcoin, can leave and re-enter the network at will. bitcoin has nodes inclding the light nodes and full nodes.</p><ul><li><p>light nodes: a light node downloads only the block headers , which is the minimum data it need to transact on the network. a light node can validata a transaction because it is able to regenerate the spcific block it need to check by using this data. but this also have <b>limitations</b>, Light nodes will sometimes need to ask full nodes for the data they don’t have access to, whilch could take longer than a full nodes validating the transaction. </p></li><li><p>full nodes: a full use and storage of data means that full nodes require a lot of computing and bandwidth resources. a full nodes download, stores, and verifies the full blockchain state-everything from block zero to the most recent blocks, which can take a weeks to sync.</p></li><li><p>achieve nodes: a full node trims entires that is no longer needed to verify, the latest interaction with the chain, the achive nodes maintain everything. these details are greating for querying information more efficiently and handy for a few applications, but are excessive for most case.</p></li></ul><h2 id="Account-models"><a href="#Account-models" class="headerlink" title="Account models"></a>Account models</h2><p>If you have a bank account, you are very familiar with this model of keeping track of user balances. The account model follows just that: accounts. It tracks the balances of users based on their overall account state, without any tracking on what constitutes the actual balance itself. In other words, an account-based ledger would mark an entry like this:<br><code>Acct #12345 -&gt; Name: Rick Sanchez -&gt; Balance: $142.62</code><br>Notice how the state of the account is kept very high-level? Rick’s account balance is a dollar and cent amount and that’s it. There is no further information tracked on what the breakdown of the the balance is, for example: $142.62 is one $100 bill, one $20 bill, two $10 bills, eight quarters, five dimes, two nickels, two pennies. When Rick goes to an ATM and withdraws from his balance, he gets it in whatever bills + change the bank has at hand - not in the exact change it took to make up that balance in the first place.</p><p>What does a transaction look like in an account-based model?<br>  Alice has $60 total balance<br>  Bob has $20 total balance<br>  Bob sends Alice $5<br>  Bob’s balance is subtracted $5, if the remaining balance is greater then 0, proceed, else revert<br>  Alice balance is summed $5<br>The ledger is marked in both ends to update total balances and that is the end of the transaction in an account-based model.<br>This might seem weird. Why would we want to keep track of these details for something as simple as a total balance? We’ll look at a model for keeping user balances that does include this feature: the UTXO model.</p><h2 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h2><p>Ethereum uses the account-based model, while Bitcoin uses UTXOs (short for Unspent Transaction Outputs) to keep track of user state&#x2F;balances.</p><p>The UTXO model differs pretty drastically from the account model. It’s a little bit more complex - mainly because it is not a familiar interface like the account model is! Yet it does set up some interesting features…</p><p>What is a UTXO? 🤔**<br>Alice sends Bob 5 BTC in the form of a transaction relayed to the Bitcoin network. At this point, if the transaction is valid (Alice has &gt; 5 BTC, Alice owns the relevant private keys and can produce a signature, etc), Alice is signaling an intent to change user state. When the Bitcoin network mines Alice’s transaction, Bob is credited with a UTXO worth 5 BTC. This is how the Bitcoin network keeps track of user balances - it keeps a really big long set of UTXOs - outputs out of state-changing transactions that credit users with a certain amount of BTC.</p><p>So when people say: “I own 3 bitcoins”, they should really be saying: “I own some UTXOs that allow me to spend 3 bitcoins.” - or using the Drake meme:<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230516115235KUFjj8.png" alt="Picsee-20230516115235.png"></p><h2 id="Account-vs-UTXO"><a href="#Account-vs-UTXO" class="headerlink" title="Account vs UTXO"></a>Account vs UTXO</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230516115016DvofGv.png" alt="Picsee-20230516115016.png"></p><h3 id="conclusions"><a href="#conclusions" class="headerlink" title="conclusions"></a>conclusions</h3><p>Deciding what model to go with is a game of design tradeoffs. Ethereum uses the account-based model transactions must be more flexible to account for the many moving pieces of state in the system. Bitcoin uses UTXOs as it is a network purposefully designed to be as simple and stateless as possible.</p><p>scriptPubKey<br>scriptPubKey also called “witness script” or the “locking script”.<br>for each locking script there should be an unlocking script that will unlock the UTXO and allow it to spent. typically, all the unlocking scripts needs to provide is a signature for to verify ownership of the public key. then the public key need to match the address after two hashed twice.</p><blockquote><p>Here have a interesting things, the first block of bitcoin( or called genesis block ) can’t be spent because it don’t have coinbase, we don’t why Satoshi don’t give the block coinbase. but if a block that don’t have coinbase, thus all of the nodes will reject the transaction. so we never spent! it’s fovever bount to 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa.</p></blockquote><p>bitcon script<br>the bitcon script language is meant to be a simple stack-based that has no loops so it also will be resolved and there are no denial of the service attacks. the language is basically a list of function like operations code.</p><blockquote><p><code>&lt;a href=&#39;https://bitcoin.stackexchange.com/questions/29754/history-behind-the-scripting-language-in-bitcoin/29763#29763&#39;&gt; bitcon script history&lt;/a&gt;</code></p></blockquote><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversing: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web3, Blockchain, </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity_Core</title>
      <link href="/2023/01/10/solidity-core/"/>
      <url>/2023/01/10/solidity-core/</url>
      
        <content type="html"><![CDATA[<h1 id="Multi-Sigs"><a href="#Multi-Sigs" class="headerlink" title="Multi-Sigs"></a>Multi-Sigs</h1><p>Multi-sigs is smart contract designed so that multuple signatures from different addresses are needed for transactions to be executed.<br>Thert are commonly used to wallet.Multi-sigs be a wallet since it can transfer and save funds. it’s called ‘multi-sigs’ because it typically need multiple signatures then can approve activitied from wallet. Since multi-sigs powered by multiple address, thay avoide a single point of failure, which makes it significantly harder for funds to be compromised. This designer provide higher degree of security for against lost or compromised key.</p><h2 id="signle-point-failure"><a href="#signle-point-failure" class="headerlink" title="signle point failure"></a>signle point failure</h2><p>Consider the typcial EOAs contronaled by external actor(ie, someone outside the blockchain, typically human).<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202306091503126gPspA.png" alt="Picsee-20230609150312.png"></p><blockquote><p>Why EOAs has the potential for single point of failure?<br>Because the external actor’s key could be become compromised by a hacker phishing or stolen. Evan as bad, the provided key could be lost by external actor, meaning directly control over an address balance no longer exists.</p></blockquote><h2 id="2-of-3-multi-sigs-contracts"><a href="#2-of-3-multi-sigs-contracts" class="headerlink" title="2 of 3 multi-sigs contracts"></a>2 of 3 multi-sigs contracts</h2><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230609151739awBDKC.png" alt="Picsee-20230609151739.png"><br>In multi-sigs setups, multi keys are required to aprove a transaction. smart contract requires 2-of-3 keys signature in order to approve and send transactions to the Ethereum.<br>Once we have the setups, it’s doesn’t matter whether one individual loses their keys, because others can will approve the transaction, kick out the compromised keys and re-add the compromised user under a new address.<br>seperator responsiability of ownership of address and its funds between multiple actors means the multi-sigs wallet is secure against signle point of failure. evan if there is malicious party in the multi-sigs, they would need corrupt a majority of the holders to compromised the wallet.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230609153906xh013u.png" alt="Picsee-20230609153906.png"><br>the multi-sigs contract keep track owner 1,2 and 3,it configured with number of required comformations to move funds, 2 in this case.<br>Owner#1 sumbit a transaction and send 0.5 ETH to address. The transaction will be peding until enough confirmations to move forward. since this transaction only required 2 confirmations, it will be executed when Owner#3 confirmed. </p><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><p>As with many object-obrient languages, solidity incluces inheritance.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230609211411GX8gWc.png" alt="Picsee-20230609211411.png"><br>In solidity, Inheritance required to use <code>is</code> keyword, As above figure, we can see b is a’s child or b is a’s sub-class.</p><h2 id="multi-inheritance"><a href="#multi-inheritance" class="headerlink" title="multi-inheritance"></a>multi-inheritance</h2><p>Imagine that we have simple contract like below shows.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract Token <span class="token punctuation">&#123;</span>    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">address</span> <span class="token operator">=></span> uint<span class="token punctuation">)</span> balances<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>now, we use <code>is</code> keyword inheritance Token to Mytoken contract.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract MyToken is Token <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">mint</span><span class="token punctuation">(</span><span class="token parameter">uint _amount</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can see the veriable balances has aleady be inherited from Token. Now, If we also want use OnlyOwner modifier what we can do ? we just need use <code>is</code> keyword to inheritance anohter contract.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract MyToken is Token<span class="token punctuation">,</span> Ownable <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">mint</span><span class="token punctuation">(</span><span class="token parameter">uint _amount</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But if we need to overridding function of basic contract, we need use <code>vitural</code> keyword to declaring function<br>A function that is going to be overrridden by a child contract must be declared by <code>virtual</code> keyword</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> pure virtual <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And the override function in child contract must be declared by <code>override</code> keyword.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> pure override <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>⚠️ The overriding function must have the same visibility as the virtual function. If not the compiler will throw a TypeError: “Overriding function visibility differs”. Keep en eye out for that one!</p></blockquote><blockquote><p>Inheritance is a great way to follow the DRY (Don’t Repeat Yourself) principle of software development! 💯<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">interesting reading about cleaning of code.</a></p></blockquote><h2 id="More-information"><a href="#More-information" class="headerlink" title="More information"></a>More information</h2><p><a href="https://medium.com/coinmonks/solidity-and-object-oriented-programming-oop-191f8deb8316">Solidity and OOP</a><br><a href="https://ethereum.stackexchange.com/questions/90243/calling-super-class-external-functions">Calling super Class</a> — By reading this website, we will know it don’t have <code>super</code> keywords in solidity.</p><h2 id="instantiate-interface"><a href="#instantiate-interface" class="headerlink" title="instantiate interface"></a>instantiate interface</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Enemy</span> <span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token function">takeAttack</span><span class="token punctuation">(</span><span class="token parameter">Hero<span class="token punctuation">.</span>AttackTypes attackType</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span>contract <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">xx</span><span class="token punctuation">(</span><span class="token parameter">address _address</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>     Enemy enemy <span class="token operator">=</span> <span class="token function">Enemy</span><span class="token punctuation">(</span>_address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ERC-20"><a href="#ERC-20" class="headerlink" title="ERC-20"></a>ERC-20</h1><p>We final come to the ERC-20 level. So what is ERC-20?<br>As we all knows, erevy tech industry need a rule&#x2F;standard. because we need stanard to stand all the program, the standard in code lanuage is interface. previous setion we learn inherited and we know contract can be inherited by <code>is</code> keyword.<br>ERC-20 is Tech standard for Ethereum. The main use of ERC-20 is to increase the compatibility of ecosystem. Exchange like uniswap can build incredible applications because it create fundstructed based on ERC-20. this then triggers developers who use ERC-20 standard to develop. instand campatibility with uniswap and many other dapps.</p><p>ERC-20 simply use <code>mapping</code> to keep track fungible token. any token can exchange to other token. any one token is equal to any other token, no token have special right or behavior assoicated with them.</p><p>As we covered above, ERC-20 defines a common interface so that any application can use them in a standard way.</p><p>This simplifies and eases developers’ tasks, because they can proceed with their work, knowing that each and every new project won’t need to be redone every time a new token is released, as long as the token follows the rules.</p><blockquote><p>This means you can build an app with full knowledge of the ERC-20 token standard and it immediately becomes compatible with any users and builders that are also using ERC-20! 🤝</p></blockquote><p>The interface consists of a number of functions that must be present in every implementation of the standard, as well as some optional.</p><p>An ERC-20-compliant token contract must provide at least the following:</p><p>name, symbol, and decimals are all optional fields<br>totalSupply defines the current circulating supply of the tokens<br>balanceOf will return the balance for a particular user<br>transfer which is the bread and butter, transfer from one account to another<br>approve, transferFrom and allowance are methods for other contracts moving your funds</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pragma solidity <span class="token number">0.8</span><span class="token number">.4</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IERC20</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">totalSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint256<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token parameter">address account</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint256<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">allowance</span><span class="token punctuation">(</span><span class="token parameter">address owner<span class="token punctuation">,</span> address spender</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint256<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token parameter">address recipient<span class="token punctuation">,</span> uint256 amount</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token parameter">address spender<span class="token punctuation">,</span> uint256 amount</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">transferFrom</span><span class="token punctuation">(</span><span class="token parameter">address sender<span class="token punctuation">,</span> address recipient<span class="token punctuation">,</span> uint256 amount</span><span class="token punctuation">)</span> external <span class="token function">returns</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>    event <span class="token function">Transfer</span><span class="token punctuation">(</span>address indexed from<span class="token punctuation">,</span> address indexed to<span class="token punctuation">,</span> uint256 value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event <span class="token function">Approval</span><span class="token punctuation">(</span>address indexed owner<span class="token punctuation">,</span> address indexed spender<span class="token punctuation">,</span> uint256 value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>balances</code>: mapping of token balances, by owner. Each transfer is a deduction from one balance and an addition to another balance.<br><code>allowances</code>: mapping of allowances&#x2F;delegate spending. This is a nested mapping in which the primary key is the address of the token owner which maps to a spender address and amount delegated to spend.</p><p>In ERC-20 compatible smart contracts, there are two ways to change balances:</p><p><code>transfer</code>: A call to the transfer method is straightforward call to the contract’s transfer function, takes just one simple transaction.</p><p><code>approve-transferFrom</code>: This way of transferring tokens is covered further in the next section! 👀</p><h2 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h2><p>Decimal is a measurements for cryptocurrencies, images that we have 1.3 dollar and we can split up into 3 cents and 1 dollar. so for know, the decimal of dollar is 2 that means the minimum value of the dollar is cents. Decimal is hurge problem in cryptocurrencies, splitting money becomes an even bigger problem because the currencies are expected to change dramatically in value. Think about if the dollar exploded in value, and in 5 years, 1 dollar is worth 100 of today’s dollars. In that world (provided that our currency isn’t changed), one cent would represent 1 dollar, and that would be the smallest quantity that dollars could represent. This is the situation that cryptocurrencies are faced with.</p><p>It would have a decimals value of 8. The smallest unit of measurement is called a Satoshi which is 0.00000001 bitcoin.</p><p>Ethereum tracks even more decimals and would have a decimals value of 18. The smallest uint of measurement is called Wei which is 0.000000000000000001 ether.</p><p>Most ERC20 tokens follow Ethereum’s convention and use a decimals field of 18.</p><h2 id="Interact-with-ERC-20"><a href="#Interact-with-ERC-20" class="headerlink" title="Interact with ERC-20."></a>Interact with ERC-20.</h2><p>first we deploy ERC-20 contract.<br>Contract file</p><blockquote><p>Contract name must equal to the Contract file name.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//SPDX-License-Identifier: MIT</span>pragma solidity <span class="token operator">^</span><span class="token number">0.8</span><span class="token number">.9</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"@openzeppelin/contracts/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span>contract JiuCaiToken is <span class="token constant">ERC20</span> <span class="token punctuation">&#123;</span>    uint constant _initial_supply <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">ERC20</span><span class="token punctuation">(</span><span class="token string">"JiuCaiToken"</span><span class="token punctuation">,</span> <span class="token string">"JCT"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _initial_supply<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Deploy file</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>ethers<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hardhat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>deployer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getSigners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Deploying contracts with the account:"</span><span class="token punctuation">,</span> deployer<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> weiAmount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> ethers<span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span>deployer<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Account balance:"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span>weiAmount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// make sure to replace the "GoofyGoober" reference with your own ERC-20 name!</span>  <span class="token keyword">const</span> Token <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"JiuCaiToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> Token<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Token address:"</span><span class="token punctuation">,</span> <span class="token keyword">await</span> token<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Airdrop file</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// We require the Hardhat Runtime Environment explicitly here. This is optional</span><span class="token comment">// but useful for running the script in a standalone fashion through `node &lt;script>`.</span><span class="token comment">//</span><span class="token comment">// You can also run a script with `npx hardhat run &lt;script>`. If you do that, Hardhat</span><span class="token comment">// will compile your contracts, add the Hardhat Runtime Environment's members to the</span><span class="token comment">// global scope, and execute the script.</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>ethers<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hardhat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dotenv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> newSigner <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token string">'0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractAt</span><span class="token punctuation">(</span><span class="token string">'JiuCaiToken'</span><span class="token punctuation">,</span> <span class="token string">'0x110e643933C29Fb790aA37B218A295dD416EC6Cb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// we can try signing the transaction with specified signature.</span>  <span class="token comment">// const newContract = await contract.connect(newSigner);</span>  <span class="token comment">// it will failed because it will be verified in ERC-20 Base Contract. Only can be called by owner who deployed the contract.</span>  <span class="token comment">// const res = await newContract.transfer('0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199', 111)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">'0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199'</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Or we can interact with metamask via following <a href="https://support.ledger.com/hc/en-us/articles/6375103346077-Add-custom-tokens-to-MetaMask?docs=true">this steps</a> </p></blockquote><h2 id="Use-IERC20"><a href="#Use-IERC20" class="headerlink" title="Use IERC20"></a>Use IERC20</h2><p>ba carefully use Interface, it must be implemented, in this case, we deployed ERC20 contract, then send address to IERC20.<br>other contract</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// SPDX-License-Identifier: MIT</span>pragma solidity <span class="token operator">^</span><span class="token number">0.8</span><span class="token number">.4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./IERC20.sol"</span><span class="token punctuation">;</span>contract Chest <span class="token punctuation">&#123;</span>           <span class="token keyword">function</span> <span class="token function">plunder</span><span class="token punctuation">(</span><span class="token parameter">address<span class="token punctuation">[</span><span class="token punctuation">]</span> memory tokenAddresses</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>uint256 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokenAddresses<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            address tokenAddress <span class="token operator">=</span> tokenAddresses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// get the token contract</span>            <span class="token constant">IERC20</span> token <span class="token operator">=</span> <span class="token constant">IERC20</span><span class="token punctuation">(</span>tokenAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// get the blance of chest</span>            uint256 balance <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// transfer balance form chest address to msg.sender</span>            token<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> assert <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Chest'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> coinCreator<span class="token punctuation">,</span> coinCreatorSigner<span class="token punctuation">,</span> hunter<span class="token punctuation">,</span> hunterSigner<span class="token punctuation">;</span>     <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'storing erc20 tokens'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> token1<span class="token punctuation">;</span>        <span class="token keyword">let</span> token2<span class="token punctuation">;</span>        <span class="token keyword">let</span> chest<span class="token punctuation">;</span>        <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token constant">ERC20</span> <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"ERC20FixedSupply"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// deploy ERC20 contract with 10000 supply tokens.</span>            token1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">ERC20</span><span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> token1<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// deploy Chest contract</span>            <span class="token keyword">const</span> Chest <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"Chest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chest <span class="token operator">=</span> <span class="token keyword">await</span> Chest<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> chest<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> accounts <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">listAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            coinCreator <span class="token operator">=</span> accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            coinCreatorSigner <span class="token operator">=</span> ethers<span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span>coinCreator<span class="token punctuation">)</span><span class="token punctuation">;</span>            hunter <span class="token operator">=</span> accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            hunterSigner <span class="token operator">=</span> ethers<span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span>hunter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'storing some token1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// transfer 1000 of 10000 token to chest address</span>                <span class="token keyword">await</span> token1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>coinCreatorSigner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>chest<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should let us store token1 at the address'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// get tokens of chest address</span>                <span class="token keyword">const</span> balance <span class="token operator">=</span> <span class="token keyword">await</span> token1<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>chest<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>                assert<span class="token punctuation">.</span><span class="token function">strictEqual</span><span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'after plundering'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// transfer token from chest address to hunterSigner</span>                    <span class="token keyword">await</span> chest<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>hunterSigner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plunder</span><span class="token punctuation">(</span><span class="token punctuation">[</span>token1<span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should award the hunter the balance'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> hunterBalance <span class="token operator">=</span> <span class="token keyword">await</span> token1<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>hunter<span class="token punctuation">)</span><span class="token punctuation">;</span>                    assert<span class="token punctuation">.</span><span class="token function">strictEqual</span><span class="token punctuation">(</span>hunterBalance<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should remove the balance from the chest'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> balance <span class="token operator">=</span> <span class="token keyword">await</span> token1<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>chest<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>                    assert<span class="token punctuation">.</span><span class="token function">strictEqual</span><span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Wait-problem"><a href="#Wait-problem" class="headerlink" title="Wait problem"></a>Wait problem</h1><p>It must be carefull wait function. wait means waiting response until transaction be mined. but if u don’t have enough gas fee, it will running but not throw error for us. </p><h1 id="NFT"><a href="#NFT" class="headerlink" title="NFT"></a>NFT</h1><p>Non-fungible token is NFT, all this means it is a token that unique and characteristics. NFT can present all of the type of asset in blockchain. NFT have a bit of standard, but the most popular is ERC721 and ERC1155(<a href="https://www.alchemy.com/blog/comparing-erc-721-to-erc-1155">Different with two of that</a>), it’s different with erc20, NFT used to store data off-chain, because it’s expensive to save uint256 in blockchain, can u imagine 5mb images? off-chain data has be called metadata and there have a standard for <a href="https://docs.opensea.io/docs/metadata-standards">how to build metadata</a>.<br>if we store metadata off-chain, where we stored ? is it store in centralized service ? if store in centralized service, it will be in danger, because if service stopped, the image will also can’t be vistored. foruntly, we store data in p2p, such like IFPS or Arweave.<br>IFPS use something called “content addressing” to store data in p2p network. that’s means data is store as hash of the content. when u looking for image, u actully provide IFPS with hash and it goes to find someone who is serving that hash. If the file contents retrieved don’t match the hash you requested, it is discarded out by the protocol.</p><blockquote><p>📖 An excellent resource for learning more about IPFS is ProtoSchool. Specifically, take a look at this section on <a href="https://proto.school/content-addressing">content addressing</a>.</p></blockquote><h1 id="Solidity-Storage-layout"><a href="#Solidity-Storage-layout" class="headerlink" title="Solidity Storage layout"></a>Solidity Storage layout</h1><p>contract layout rule refers to the rule governing how contract’s variables are laid out in long-time memory. every contract has a memory space and it is permanent and real&#x2F;writable storage space. contract can only read&#x2F;write variables from itself. contract storage is divided up into 2^256 slots of 32bytes each. slots are contiguous and are refrence by index. staring at 0 to 2^256.All slots are initialized to a value of 0.</p><p>EVM storage memory is only directly accessible by these 32 byte slot.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230616180553IBj2vn.png" alt="Picsee-20230616180553.png"></p><p>solidity will automatically mapp every define state variables of ur contract to a slot in storage in the order the state variables are declared. starting 0.</p><p>What is Endian-ness<br>Endian-ness refers to how computers store multi-byte values in memory (eg: uint256, bytes32, address), and there are two types of endian-ness: big-endian and little-endian.</p><p>Big-endian → last byte of binary representation of data type is stored first<br>Little-endian → first byte of binary representation of data type is stored first</p><p>For example take the hexadecimal number 0x01e8f7a1, a hexadecimal representation of the decimal number 32044961. How is this value stored in memory? Visually it will look like one of the diagrams below depending on the endian-ness.</p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230616181125SwrCjc.png" alt="Picsee-20230616181125.png"></p><p>For below figures, we can see each slot have 32bytes memory space, so a and c will combine into same slot.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230616181149gF1ZyY.png" alt="Picsee-20230616181149.png"></p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230616181149gF1ZyY.png" alt="Picsee-20230616181149.png"></p><h1 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h1><p>Library are quiet similar to contract, they have same snytax <code>Library&#123;&#125;</code> and <code>Contract&#123;&#125;</code>. but the most different is Library can’t declare variables(do not have state).For this reason, library functions are most often pure which means they do not read&#x2F;write state.<br>Library functions can only be called directly if they are marked as pure or view</p><p>The purpose of library is to saving gas and share code. try to use library because the library is auditabled and mainly deployed.</p><p>we have two ways to use library.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230620164010u5yhNM.png" alt="Picsee-20230620164010.png"></p><h1 id="Upgradable"><a href="#Upgradable" class="headerlink" title="Upgradable"></a>Upgradable</h1><p>In application dev are, we always so do the mvp first then keep iterable ablities for that to keep the app can be upgraded. since that we also need upgrad ability for smart contract.</p><h2 id="Three-part-of-upgradable-contract"><a href="#Three-part-of-upgradable-contract" class="headerlink" title="Three part of upgradable contract"></a>Three part of upgradable contract</h2><ol><li>Proxy contract(the contract user will directly access to interact)</li></ol><ul><li>keep status in contract itself</li><li>a contract based on ERC-1967 standard</li><li>this proxy contract is in charge of forwarding transaction to the implementation contract</li></ul><ol start="2"><li>Implementation contract(the contract provider skeleton and data)<br>This is where you instantiate your variables. Your proxy contract, via delegatecalls into this one, will give them value!</li><li>Proxy admin(the contract links proxy and implementation)<br>This contract holds authority over Proxy to upgrade the Proxy contract and thus link that proxy to a new implementation contract.<br><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230621200332fNcPvk.png" alt="Picsee-20230621200332.png"><br>The above diagram shows what is called the transparent proxy pattern. This pattern uses call, delegatecall and the three-contract design in order to achieve a super cool infrastrastructure. 💥</li></ol><p>Here is a breakdown of the diagram flow, from the user perspective:</p><p>The user performs a call into the Proxy contract<br>That call hits the fallback function of the Proxy contract which is directly rigged to delegatecall into the Implementation contract address<br>In performing a delegatecall, the context of the Proxy contract is forwarded. This means that the storage of 0x1234.1111 will be directly affected by the logic of 0x1234.4444 (that’s the whole point of delegatecall!)<br>The logic from Implementation is performed on the state of Proxy and if the logic does not revert, the state is returned to Proxy which then returns a receipt to the original user<br>Transaction over!  🧾</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><ol><li>create v1 of contract based on <code>@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// SPDX-License-Identifier: MIT</span>pragma solidity <span class="token number">0.8</span><span class="token number">.17</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"</span><span class="token punctuation">;</span>contract VendingMachineV1 is Initializable <span class="token punctuation">&#123;</span>  <span class="token comment">// these state variables and their values</span>  <span class="token comment">// will be preserved forever, regardless of upgrading</span>  uint <span class="token keyword">public</span> numSodas<span class="token punctuation">;</span>  address <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token parameter">uint _numSodas</span><span class="token punctuation">)</span> <span class="token keyword">public</span> initializer <span class="token punctuation">&#123;</span>    numSodas <span class="token operator">=</span> _numSodas<span class="token punctuation">;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">purchaseSoda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> payable <span class="token punctuation">&#123;</span>    <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">1000</span> wei<span class="token punctuation">,</span> <span class="token string">"You must pay 1000 wei for a soda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    numSodas<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>publish contractv1 use upgrades.deployProxy, when we deploy the contract we can get the deploy address and implementation contract address via <code>upgrades.erc1967.getImplementationAddress(proxy.address)</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ethers<span class="token punctuation">,</span> upgrades <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hardhat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> VendingMachineV1 <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">'VendingMachineV1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">await</span> upgrades<span class="token punctuation">.</span><span class="token function">deployProxy</span><span class="token punctuation">(</span>VendingMachineV1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> proxy<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> implementationAddress <span class="token operator">=</span> <span class="token keyword">await</span> upgrades<span class="token punctuation">.</span>erc1967<span class="token punctuation">.</span><span class="token function">getImplementationAddress</span><span class="token punctuation">(</span>    proxy<span class="token punctuation">.</span>address  <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Proxy contract address: '</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Implementation contract address: '</span> <span class="token operator">+</span> implementationAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>upgrade contract, we just need write new version of contract and directly upgrade contract via <code>upgradeProxy</code>.<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ethers<span class="token punctuation">,</span> upgrades <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hardhat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TO DO: Place the address of your proxy here!</span><span class="token keyword">const</span> proxyAddress <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> VendingMachineV2 <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">'VendingMachineV2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> upgraded <span class="token operator">=</span> <span class="token keyword">await</span> upgrades<span class="token punctuation">.</span><span class="token function">upgradeProxy</span><span class="token punctuation">(</span>proxyAddress<span class="token punctuation">,</span> VendingMachineV2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> implementationAddress <span class="token operator">=</span> <span class="token keyword">await</span> upgrades<span class="token punctuation">.</span>erc1967<span class="token punctuation">.</span><span class="token function">getImplementationAddress</span><span class="token punctuation">(</span>    proxyAddress  <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The current contract owner is: "</span> <span class="token operator">+</span> upgraded<span class="token punctuation">.</span><span class="token function">owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Implementation contract address: '</span> <span class="token operator">+</span> implementationAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://university.alchemy.com/course/ethereum/md/63bfe506016d9c00049221fc">The total Tutorial</a></p></blockquote></li></ol><h1 id="Contract-converting"><a href="#Contract-converting" class="headerlink" title="Contract converting"></a>Contract converting</h1><p>As we know contract can convert to address, vice versa, but EVM didn’t check what address we pass through. so when we pass address to contract, we must be careful to use right address, otherwise we will get wrong contract.<br>such like</p><blockquote><p><a href="https://medium.com/coinmonks/solidity-contract-conversion-to-and-from-address-and-its-pitfall-bffc533a96eb">https://medium.com/coinmonks/solidity-contract-conversion-to-and-from-address-and-its-pitfall-bffc533a96eb</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract Proxy <span class="token punctuation">&#123;</span>    uint256 x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    address <span class="token keyword">public</span> implementation<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeImplementation</span><span class="token punctuation">(</span><span class="token parameter">address _implementation</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token comment">//implementation = _implementation;</span>        implementation <span class="token operator">=</span> _implementation<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">changeX</span><span class="token punctuation">(</span><span class="token parameter">uint256 _x</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        <span class="token comment">//(bool success, ) = implementation.delegatecall(msg.data);</span>        Logic3 logic <span class="token operator">=</span> <span class="token function">Logic3</span><span class="token punctuation">(</span>implementation<span class="token punctuation">)</span><span class="token punctuation">;</span>        logic<span class="token punctuation">.</span><span class="token function">changeX</span><span class="token punctuation">(</span>_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>contract Logic1 <span class="token punctuation">&#123;</span>    uint256 <span class="token keyword">public</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeX</span><span class="token punctuation">(</span><span class="token parameter">uint256 _x</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> _x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>contract Logic3 <span class="token punctuation">&#123;</span>    uint256 <span class="token keyword">public</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeX</span><span class="token punctuation">(</span><span class="token parameter">uint256 _x</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> _x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">tripleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        x <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we have three contract and now we want to get address by implementation, for now we want to get Logic3 contract, so we just pass implementation address be Logic3 args.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loadFixture <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@nomicfoundation/hardhat-network-helpers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> assert <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"chai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ethers <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hardhat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"Proxy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deployFixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> Proxy <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">await</span> Proxy<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Logic1 <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"Logic1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> logic1 <span class="token operator">=</span> <span class="token keyword">await</span> Logic1<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Logic3 <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"Logic3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> logic3 <span class="token operator">=</span> <span class="token keyword">await</span> Logic3<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> proxy<span class="token punctuation">,</span> logic1<span class="token punctuation">,</span> logic3 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"Should work with logic1"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proxy<span class="token punctuation">,</span> logic3 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadFixture</span><span class="token punctuation">(</span>deployFixture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> proxy<span class="token punctuation">.</span><span class="token function">changeImplementation</span><span class="token punctuation">(</span>logic3<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">await</span> logic3<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> logic3<span class="token punctuation">.</span><span class="token function">changeX</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">await</span> logic3<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we deploy proxy and logic1 and logic3, so for now we change implementation address to logic3.address, and we can pass the test.<br>but if we change implementation address to logic1. In logic1 x initial value is zero, so do we will pass the test ????</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"Should work with logic1"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proxy<span class="token punctuation">,</span> logic3<span class="token punctuation">,</span> logic1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadFixture</span><span class="token punctuation">(</span>deployFixture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> proxy<span class="token punctuation">.</span><span class="token function">changeImplementation</span><span class="token punctuation">(</span>logic1<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">await</span> logic1<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> logic3<span class="token punctuation">.</span><span class="token function">changeX</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">await</span> logic1<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-2023062422113776HfuC.png" alt="Picsee-20230624221137.png"><br>No, we can’t. because pass logic1 address to implementation, but the Contract didn’t check the address is 1 or 3, actually the evm can’t figure out what address we are passed in(for instance). so we get the logic1 contract not logic3 contract. </p><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析<br>intimidated: 吓坏<br>deterministic: 确定性<br>infrastructure： 基础设施<br>constrain： 限制<br>reside： 贮存<br>presence: 存在<br>cencership: 审查制度<br>auditable：可审查<br>Ubiquitous： 无处不在<br>barries： 障碍<br>curb： 抑制，阻止<br>comprehend： 理解<br>easy as pie： 易如反掌<br>explicitly：明确的<br>clause： 条款<br>neutrality；中立<br>arbitrary： 随意的<br>EVM： Etherrum Virtual Machine<br>Stale&#x2F;Orphan block： 陈旧&#x2F;孤立块，是指在一个区块同时被矿工挖掘出，区块可能会出现临时分叉，未能被选为有效区块的区块被称为stale&#x2F;Orphan block，在Etherum中此类区块又称为Ommer block，是Etherrum作为鼓励和奖励矿工为安全做出贡献的机制。<br>emulate： 模仿<br>underlying： 潜在的<br>monetary： 货币<br>fixed： 固定的<br>Arithmetic: 算术<br>benchmarking: 基准测试<br>discrepancies: 差异<br>philosophy: 理念<br>Ethereum improvement proposal: EIP， Ethereum 改进提案<br>first and foremost: 首先<br>specification： 规范<br>adhere: 符合<br>impromptu： 即兴<br>compatible： 兼容的<br>contentious： 有争议的<br>overHead：高昂的<br>collateral: 抵押物<br>intuitively: 直观的<br>re-orged： 重组<br>manual：手动的<br>intervention： 干涉<br>canonical: 经典的<br>shifted： 转移<br>denomination: 面值<br>demand： 需求<br>circumventing： 规避<br>deflationary: 通缩<br>deprecated: 弃用<br>redunant: 多余的<br>tampered: 被篡改<br>EOAs: Extended owned account.<br>Vulnerability: 漏洞<br>JSON-RPC: remote procedure call(rpc) protocal that uses JSON to encode message.<br>exclusively: 只，仅仅 equied to only<br>instruction: 指令<br>term: 术语<br>boilerplate: 样板<br>pioneer： 先锋<br>lucrative: 有利可图<br>mnemonic: 助记词<br>configured： 配置<br>specified： 指定的<br>analogues： 相似的<br>discarded： 丢弃<br>underscore preceding: 前下划线<br>snippet： 片段<br>dire consquences: 可怕的后果<br>unsigned integer: 无符号整数<br>allocated： 分配的<br>resilient: 弹性的<br>LIFO： 堆栈结构，it’s have pushing and poping<br>destructure: 解构<br>parenthesis: 括号<br>exception： 异常<br>declared: 声明<br>ephermal: 短暂的<br>ABI: application binary interface, that’s bridge connected compilers and applications.<br>writing up a to b: 连接a到b<br>pass into: 传递……进<br>repercurssion: 反应<br>padded out: 填充到<br>replay to: 转发到<br>associative array: 关联数组<br>brute force search: 暴力搜索<br>hit the nail on the head ： 一针见血<br>Nested： 嵌套<br>maintaining: 维护<br>Escrows: 托管<br>treadoff: 权衡<br>peroid of inactivity: 不活跃期<br>compromised: 损坏&#x2F;妥协<br>expenditure： 支出<br>consent: 同意<br>DRY: don’t repeat yourself<br>WET: write everything twice<br>AHA: avoid hasty abstraction<br>audited： 审核<br>Standalone: 独立的<br>comma-separated: 逗号分离<br>vice-versa: 反之亦然<br>fungible: 可替换的<br>deduction： 减少<br>delegate： 代表<br>tremendously: 极大的<br>crowdsale: 众筹<br>mint： 铸造<br>precision: 精细<br>criteria： 标准<br>acronym: 首字母<br>proposition： 主张<br>rigorously: 严格的<br>regradless: 无论<br>governance：监管<br>ingenuity: 独创性</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Solidity_Core</title>
      <link href="/2023/01/10/governance/"/>
      <url>/2023/01/10/governance/</url>
      
        <content type="html"><![CDATA[<h1 id="Governance"><a href="#Governance" class="headerlink" title="Governance"></a>Governance</h1><p>Decentralization protocol are in consistent evolution from the moment they are published relased. When we publish contract if we want to improve or upgrade the contract, we need all of users who are focused on the contract&#x2F;token know what we need to do, and get the agreement. This is Governance protocol. it only allowed who have token of the contract can cast vote to decide agree or not. after the agreement larger than thershould, we can execute the preset action.<br>Governor Repository<br>To follow along, clone this repository: MintGovernance.</p><p>In this repository, you’ll find two contracts:</p><p>MyGovernor - a contract built from the openzeppelin governor wizard. This Governor is configured to have a 1 block voting delay and voting period. To make things simpler it does not include a Timelock, although it should be noted that this is standard practice in governance.<br>MyToken - a token which is built to work together with the governor standard. You can re-create it by toggle the Votes checkbox on the openzeppelin erc20 wizard.<br>Setup<br>Once you clone the repository, you can run npm i to install all the depedencies<br>Then, you can run npx hardhat test to run the unit tests<br>You should see all test cases passing<br>Let’s take a look at the unit tests in the repository, what are they doing? Let’s break it down step by step.</p><ol><li>Deployment<br>This first section is being used to deploy the contracts:</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> transactionCount <span class="token operator">=</span> <span class="token keyword">await</span> owner<span class="token punctuation">.</span><span class="token function">getTransactionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// gets the address of the token before it is deployed</span><span class="token keyword">const</span> futureAddress <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">getContractAddress</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">from</span><span class="token operator">:</span> owner<span class="token punctuation">.</span>address<span class="token punctuation">,</span>  <span class="token literal-property property">nonce</span><span class="token operator">:</span> transactionCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyGovernor <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"MyGovernor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> governor <span class="token operator">=</span> <span class="token keyword">await</span> MyGovernor<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>futureAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyToken <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"MyToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> MyToken<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>governor<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☝️ First we need to deploy the MyGovernor and MyToken contracts. This looks pretty standard, except for the piece where we need to calculate the futureAddress and provide it to MyGovernor on deployment. Let’s talk about that part.</p><p>When deploying contracts you’ll often find yourself in situation where one contract needs to know the other contract’s address on deployment and vice-versa. With our setup, this makes sense because the governor contract depends on the token for voting and the token depends on the governance for its mint function.</p><p>To get around this issue we calculate the address of the token contract ahead of time. We can do this because contract addresses are deterministic. They are the keccak hash of the address deploying the contract and the nonce for that particular address. You can see those are the two parameters that ethers is requiring us to pass in for the getContractAddress utility. We can, ahead of time, figure out what the contract address will be provided it is deployed in the following transaction.</p><ol start="2"><li>Delegation<br>This probably seems like a silly step, but when you’re using token governance, its standard to delegate your votes to someone who can then use that voting power. In our case, the owner address receives 10000 tokens when they deploy the token and they want to delegate that voting power to themselves. So this transaction looks like this:</li></ol><p>await token.delegate(owner.address);<br>The owner is delegating the weight of 10000 tokens to themselves to vote with.</p><ol start="3"><li>Proposing<br>Once we are ready, we can make a new proposal on the governance system. We could encode any kind of call data or value on this proposal, and we can even specify multiple targets. In our case we’re trying to mint an extra 25000 tokens to the owner:</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> governor<span class="token punctuation">.</span><span class="token function">propose</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>token<span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>token<span class="token punctuation">.</span>interface<span class="token punctuation">.</span><span class="token function">encodeFunctionData</span><span class="token punctuation">(</span><span class="token string">"mint"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>owner<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">"25000"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"Give the owner more tokens!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>const receipt &#x3D; await tx.wait();<br>const event &#x3D; receipt.events.find(x &#x3D;&gt; x.event &#x3D;&#x3D;&#x3D; ‘ProposalCreated’);<br>const { proposalId } &#x3D; event.args;<br>☝️ Here we create a proposal to mint 25000 tokens to the owner (by using parseEther here we’re taking advantage of the fact that the ERC20 token uses 18 decimals, just like ether). In order to lookup the state of the proposal and vote, we need the proposalId which is something that is emitted when the proposal is created. We grab the proposalId out of the event arguments.</p><p>We also need to wait for the block voting delay:</p><p>&#x2F;&#x2F; wait for the 1 block voting delay<br>await hre.network.provider.send(“evm_mine”);<br>In our case we just need to wait one block before we can start voting on the proposal. This is something you can configure using the OpenZeppelin Governor Wizard</p><ol start="4"><li>Vote on the Proposal<br>As the owner with 10000 tokens we have the executive power to push this proposal through. Let’s go ahead and vote on this proposal so we can execute it:</li></ol><p>const tx &#x3D; await governor.castVote(proposalId, 1);<br>This transaction will cast a vote as the owner with a weight of 10000 tokens. This will be enough for the vote to be successful! Normally, the next step would be to queue this proposal in the Timelock to wait for some period before execution. In this case, we’re not using a Timelock so we can go ahead and execute this proposal after the voting period has ended.</p><ol start="5"><li>Execute the Vote<br>The execute function looks up the proposal by hashed parameters, so we’ll need to pass in our parameters here again for it to go look them up:</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> governor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>token<span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>token<span class="token punctuation">.</span>interface<span class="token punctuation">.</span><span class="token function">encodeFunctionData</span><span class="token punctuation">(</span><span class="token string">"mint"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>owner<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">"25000"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token function">toUtf8Bytes</span><span class="token punctuation">(</span><span class="token string">"Give the owner more tokens!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This will execute our proposal! If successful, the owner should now have 35000 tokens because the governance proposal will target the ERC20 token and pass in the calldata to mint 25000 tokens. Amazing! 🤩</p><p>🏁 Your Goal: Govern on Goerli<br>We just walked through the entire flow in the unit test cases and can see how the governor standard works. Your goal is to now get this deployed and executed on the Goerli test network. You can do this by:</p><p>Add a Goerli URL and private key to the hardhat config (here’s the hardhat config docs) so that you can interact with the test network through Hardhat.<br>Re-configure MyGovernor to use a different voting period. A 1 block waiting period works for unit tests, but it would be too quick on goerli. This is the second argument passed to GovernorSettings. See the OpenZeppelin Wizard on how this is configured.<br>Once you’ve setup your goerli network, use the scripts&#x2F;deploy.js script by running npx hardhat run scripts&#x2F;deploy.js –network goerli. This should deploy the two contracts.<br>You’ll need to build several more scripts to run through steps 2-5 above. Be sure to:<br>delegate the votes to yourself<br>create a proposal<br>vote on the proposal<br>execute the proposal<br>When you are building the scripts to run through governance, make use of the ethers.getContractAt method which will allow you to specify a contract name and where it is deployed. This way you can build scripts that interact with the existing MyGovernor and MyToken contracts after you’ve deployed them.</p><blockquote><p><a href="https://docs.openzeppelin.com/contracts/4.x/governance">How to set up on-chain governance</a>,<a href="https://docs.openzeppelin.com/contracts/4.x/api/governance">GovernanceApi</a><a href="https://wizard.openzeppelin.com/#governor">Governance Wizard</a></p></blockquote><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析<br>intimidated: 吓坏<br>deterministic: 确定性<br>infrastructure： 基础设施<br>constrain： 限制<br>reside： 贮存<br>presence: 存在<br>cencership: 审查制度<br>auditable：可审查<br>Ubiquitous： 无处不在<br>barries： 障碍<br>curb： 抑制，阻止<br>comprehend： 理解<br>easy as pie： 易如反掌<br>explicitly：明确的<br>clause： 条款<br>neutrality；中立<br>arbitrary： 随意的<br>EVM： Etherrum Virtual Machine<br>Stale&#x2F;Orphan block： 陈旧&#x2F;孤立块，是指在一个区块同时被矿工挖掘出，区块可能会出现临时分叉，未能被选为有效区块的区块被称为stale&#x2F;Orphan block，在Etherum中此类区块又称为Ommer block，是Etherrum作为鼓励和奖励矿工为安全做出贡献的机制。<br>emulate： 模仿<br>underlying： 潜在的<br>monetary： 货币<br>fixed： 固定的<br>Arithmetic: 算术<br>benchmarking: 基准测试<br>discrepancies: 差异<br>philosophy: 理念<br>Ethereum improvement proposal: EIP， Ethereum 改进提案<br>first and foremost: 首先<br>specification： 规范<br>adhere: 符合<br>impromptu： 即兴<br>compatible： 兼容的<br>contentious： 有争议的<br>overHead：高昂的<br>collateral: 抵押物<br>intuitively: 直观的<br>re-orged： 重组<br>manual：手动的<br>intervention： 干涉<br>canonical: 经典的<br>shifted： 转移<br>denomination: 面值<br>demand： 需求<br>circumventing： 规避<br>deflationary: 通缩<br>deprecated: 弃用<br>redunant: 多余的<br>tampered: 被篡改<br>EOAs: Extended owned account.<br>Vulnerability: 漏洞<br>JSON-RPC: remote procedure call(rpc) protocal that uses JSON to encode message.<br>exclusively: 只，仅仅 equied to only<br>instruction: 指令<br>term: 术语<br>boilerplate: 样板<br>pioneer： 先锋<br>lucrative: 有利可图<br>mnemonic: 助记词<br>configured： 配置<br>specified： 指定的<br>analogues： 相似的<br>discarded： 丢弃<br>underscore preceding: 前下划线<br>snippet： 片段<br>dire consquences: 可怕的后果<br>unsigned integer: 无符号整数<br>allocated： 分配的<br>resilient: 弹性的<br>LIFO： 堆栈结构，it’s have pushing and poping<br>destructure: 解构<br>parenthesis: 括号<br>exception： 异常<br>declared: 声明<br>ephermal: 短暂的<br>ABI: application binary interface, that’s bridge connected compilers and applications.<br>writing up a to b: 连接a到b<br>pass into: 传递……进<br>repercurssion: 反应<br>padded out: 填充到<br>replay to: 转发到<br>associative array: 关联数组<br>brute force search: 暴力搜索<br>hit the nail on the head ： 一针见血<br>Nested： 嵌套<br>maintaining: 维护<br>Escrows: 托管<br>treadoff: 权衡<br>peroid of inactivity: 不活跃期<br>compromised: 损坏&#x2F;妥协<br>expenditure： 支出<br>consent: 同意<br>DRY: don’t repeat yourself<br>WET: write everything twice<br>AHA: avoid hasty abstraction<br>audited： 审核<br>Standalone: 独立的<br>comma-separated: 逗号分离<br>vice-versa: 反之亦然<br>fungible: 可替换的<br>deduction： 减少<br>delegate： 代表<br>tremendously: 极大的<br>crowdsale: 众筹<br>mint： 铸造<br>precision: 精细<br>criteria： 标准<br>acronym: 首字母<br>proposition： 主张<br>rigorously: 严格的<br>regradless: 无论<br>governance：监管</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Solidity</title>
      <link href="/2023/01/01/solidity/"/>
      <url>/2023/01/01/solidity/</url>
      
        <content type="html"><![CDATA[<h1 id="Mapping-amp-amp-structure"><a href="#Mapping-amp-amp-structure" class="headerlink" title="Mapping &amp;&amp; structure"></a>Mapping &amp;&amp; structure</h1><h2 id="storage-keywords"><a href="#storage-keywords" class="headerlink" title="storage keywords"></a>storage keywords</h2><p>storage keywords is used to spcify that variables should parmnately stored in blockchain. It represents  persistent storage area of the contract where data is stored across multiple function calls and Even persistent storage after contract execution is completed.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Collectible storage collectible <span class="token operator">=</span> idToCollectible<span class="token punctuation">[</span>_id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>storage kerwords represent the collectible variables will refrence the idTocollectible[_id], means any change of the coolectible will directly affect the value stored in the mapping.</p><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>Structure keywords is used to describe the structure of the data. it’s similar to typescripe’s interface. and we can use this to declare the variables have the same structure. It will provide convience for dev to know the variables’s structure also EVM to do static checks.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> struct User <span class="token punctuation">&#123;</span>uint balance<span class="token punctuation">;</span>bool isActive<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Signer-Provider-and-Wallet"><a href="#Signer-Provider-and-Wallet" class="headerlink" title="Signer, Provider and Wallet."></a>Signer, Provider and Wallet.</h1><h2 id="Signer"><a href="#Signer" class="headerlink" title="Signer"></a>Signer</h2><p>A Signer in ethers is an abstraction of an Ethereum Account, which can be used to sign messages and transactions and send signed transactions to the Ethereum Network to execute state changing operations.<br>The most common Signers you will encounter are:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> signer <span class="token operator">=</span> ethers<span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Wallet, which is a class which knows its private key and can execute any operations with it</li><li>JsonRpcSigner, which is connected to a JsonRpcProvider (or sub-class) and is acquired using getSigner</li></ul><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p>A Provider is an abstraction of a connection to the Ethereum network, providing a concise, consistent interface to standard Ethereum node functionality.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>JsonRpcProvider</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TEST_API_URL</span> <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Wallet"><a href="#Wallet" class="headerlink" title="Wallet"></a>Wallet</h2><p>The Wallet class inherits Signer and can sign transactions and messages using a private key as a standard Externally Owned Account (EOA).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TEST_PRIVATE_KEY</span> <span class="token keyword">as</span> string<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h1><p>Event are the way solidty and EVM provide dev with logging functionality used to write data to a data structure on the blockchain that lives out of smart contract’s storage variables.</p><p>Event are an abstraction on top of the EVM’s low-level log functionality, opcode is LOG0-LOG4. The spcific code used will depend on the number of topics that event using <code>indexed</code> keyword.</p><ol><li>Topics in Ethereum record<br>The first part of logs record consists of an array of topics. The first topic usually consists of the <strong>Signature(kaccak256 hash)</strong> of the name of the events that occurred, including the types (uint256, string, etc.) of its parameters.</li><li>Data in Ethereum record<br>The second part of logs record consists additional data. Best to combine data and topics together. while topic is searchable, but data is not.</li></ol><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230602172346BXBM7A.png" alt="Picsee-20230602172346.png"></p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202306021724045GeFGa.png" alt="Picsee-20230602172404.png"></p><p>Now, we just need to understand how data (like our final argument) can be included. LOG3 requires 5 arguments:</p><p>LOG3(memoryStart, memoryLength, topic1, topic2, topic3)</p><p>Event data is read from memory in the following fashion:</p><p>memory[memoryStart…(memoryStart + memoryLength)]</p><p>Luckily, higher-level smart contract programming languages like Solidity, Vyper, or Bamboo will handle writing event data to memory for us, which means you can usually pass data directly as a parameter when emitting logs.</p><p><a href="https://dashboard.alchemy.com/composer">real example by eth_getLogs, block hash 0xc34b89772be37cef16c151e62c548fce0767531f45ac1eacf7409451ab7304c8</a></p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-202306021724280nzLWi.png" alt="Picsee-20230602172428.png"></p><blockquote><p>read more details here: <a href="https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378">Event</a></p></blockquote><h1 id="Escrows"><a href="#Escrows" class="headerlink" title="Escrows"></a>Escrows</h1><p>Escrows is a subjuct service in financial, but in blockchain, It will be smart contract forms, because smart contract is immutable when it deploys. Both sellers and buyers can be trusted the smart contract and it’s transparented. </p><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230604153021OJQFAq.png" alt="Picsee-20230604153021.png"></p><p>When buyer pay for the deposit to Escrow, the Escrow will save the deposit, and it will check the condition is satisfied or not. if not the deposit will retrun to buyer. when the condition is satisfied, the deposit will release to the seller, and the goods or services will be send to buyer.<br><a href="https://research.csiro.au/blockchainpatterns/general-patterns/blockchain-payment-patterns/escrow-2/">Read more info</a></p><h1 id="Data-location-reference-type"><a href="#Data-location-reference-type" class="headerlink" title="Data location (reference type)"></a>Data location (reference type)</h1><p>There are three different locations for data in solidity. <code>Calldata</code>, <code>Memory</code> and <code>Storage</code>.<code>Calldata</code> is external data, <code>Memory</code> is ephemeral data, <code>Storage</code> is persistent data.</p><ol><li><p>Calldata<br>When we broadcast a transaction from EOA, We contain bytecode for EVM running. The bytecode is Calldata and it include identifier for the function we’re targeting and the parameters we’re sent.<br>When we use Array to be paremeters in external function, It must be identified by the calldata. it’s only-read reference for parameters and similar to Memory unless only-read.</p></li><li><p>Memory<br>Memory is temporary data location provided for use to keep our local veriables. These variables will only exist in memory for the length of the transaction.<br>When we’re working with arrays that should only exist for the length of the transaction, we labeled them with <code>Memory</code> keywords. We can read&#x2F;write the data location that cheaply than compare with storage.</p></li><li><p>Storage<br>Storage actully is location that store in blockchain. This is where the state variables are stored.<br>All of the Ethereum full node will store them in the local machine, since that Storage operations are expensive.</p></li></ol><p>Value vs Reference<br>Assigning an array will copy it in some cases and store a reference in other cases.</p><p>Let’s consider this example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract Contract <span class="token punctuation">&#123;</span>    uint<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        uint<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> memory memoryArray <span class="token operator">=</span> numbers<span class="token punctuation">;</span>        <span class="token comment">// will modifying memoryArray modify numbers?</span>        memoryArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment">// nope! </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☝️ This will not modify the numbers. The values from numbers are copied into memoryArray at this assignment and they are otherwise unrelated.</p><p>📖 In fact, the compiler will warn that this can be labeled as a view. Didn’t want to give any spoilers. 😉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span>contract Contract <span class="token punctuation">&#123;</span>    uint<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">&#123;</span>        uint<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> storage storageArray <span class="token operator">=</span> numbers<span class="token punctuation">;</span>        <span class="token comment">// will modifying storageArray modify numbers?</span>        storageArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment">// yup! </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>☝️ This will modify the numbers. In this case, storageArray contains a reference to numbers due to its storage location.</p><p>💡 Equal references point to the same spot in memory. Making a modification updates the memory directly, all the references still point to the same place.</p><h1 id="aka"><a href="#aka" class="headerlink" title="aka"></a>aka</h1><p>ethereum: 以太坊<br>Blockchain: 区块链<br>Crypto： 加密<br>crytocurrencts: 加密货币<br>decentralized: 去中心化<br>bitcoin： 比特币，第一个基于区块链技术实现的加密货币<br>fiancial incentives： 金融奖励<br>mining the rewards： 挖矿<br>deterministic: 确定性<br>pseudorandom: 伪随机<br>collsion resistant: 抗碰撞<br>consensus: 共识，一个网络对数据的状态达成共识。<br>censorship：审查<br>bribe： 贿赂<br>drill home： 钻研<br>relatively travel：相对较小的<br>infeasible： 不可能<br>symmetric: 对称<br>digital signature: 数字签名<br>RSA: 非对称加密的经典实现<br>ECDSA： bitcoin采用的非对称加密算法<br>ether： 以太币<br>address： 交易发起方类似于ip, bitcoin 使用checksum and base58, ethereum is last 20 bytes of the hash of the public key.<br>Enforcement： 执行<br>consensus rules： 共识规则<br>consensus mechanisms：协商一致<br>inter-changeable: 可互换的<br>cumulative: 积累型<br>nakamoto consensus： 最长的chain将是其他节点接受的一个真正的链，他是由一条链积累的工作所决定的。<br>txs: transactions.<br>pos: proof of stack, pos中，参与者需要持有一定数量的crytocurrency，参与记账过程，相比pow，pos不需要大量的算力<br>pow: proof of work，miners通过计算来添加txs和block，需要消耗算力。可以增加security of  blockchain<br>merkle root：默克尔根，用来验证和确认交易是否被篡改。<br>underlying: 底层<br>hashcash： Hashcash工作量证明功能由Adam Back于 1997 年发明，并建议用于反 DoS 用途<br>Byzantine General’s Problem： 在p2p场景下，如何证明每个机器都是在工作的。<br>manipulate： 操作<br>Genesis Block: 第一个加入到区块链中的块，初始块<br>cost-effective: 成本效益<br>UTXO：Unspent Transaction Output, 未使用的交易<br>Retrospective： 回顾<br>vulnerable： 脆弱的<br>light nodes: 轻节点 （存储块头的轻节点）<br>full nodes：完整节点（常规节点）<br>achieve nodes: 归档节点， 完整节点（已验证的存档节点）<br>bandwidth： 带宽<br>configure: 配置<br>variables： 变量<br>discrepancies： 差异<br>tradeoffs： 权衡利弊<br>contrast： 对比<br>unfakeable： 不可伪造<br>replicate： 复制<br>Satoshi: “Satoshi” refers to the smallest unit of the cryptocurrency Bitcoin<br>individual： 个人<br>multitude： 众多的<br>aggregate： 总数<br>expedite： 加快<br>hefty prize ： 巨额奖金<br>controlled supply： 受控供应<br>intentional: 故意的<br>quirk： 怪癖<br>denial: 否认<br>distinguish： 辨别<br>preceding： 前面<br>emerge： 出现<br>hierarchically: 层次分明<br>intimidating： 令人生畏的<br>underneath： 底下<br>infacting：连接<br>concatenate： 串联<br>optimization： 优化<br>inconsistencies: 不一致<br>deveration: 推导<br>arbitrary： 随意的<br>immutable： 不可变<br>implications: 含义<br>ledger： 账本<br>traversal: 遍历<br>PMTs: Partricia Merkle tries<br>sealed: 密封.<br>Permenant: 永恒的<br>Ephemeral： 短暂的<br>Constantly: 不断的<br>prefixes: 前缀<br>recursion: 递归<br>portion： 部分<br>adjacent: 邻近的<br>neat mechanisms: 整洁的机制<br>consists: 包含<br>crowdfunding: 众筹<br>parse： 解析<br>intimidated: 吓坏<br>deterministic: 确定性<br>infrastructure： 基础设施<br>constrain： 限制<br>reside： 贮存<br>presence: 存在<br>cencership: 审查制度<br>auditable：可审查<br>Ubiquitous： 无处不在<br>barries： 障碍<br>curb： 抑制，阻止<br>comprehend： 理解<br>easy as pie： 易如反掌<br>explicitly：明确的<br>clause： 条款<br>neutrality；中立<br>arbitrary： 随意的<br>EVM： Etherrum Virtual Machine<br>Stale&#x2F;Orphan block： 陈旧&#x2F;孤立块，是指在一个区块同时被矿工挖掘出，区块可能会出现临时分叉，未能被选为有效区块的区块被称为stale&#x2F;Orphan block，在Etherum中此类区块又称为Ommer block，是Etherrum作为鼓励和奖励矿工为安全做出贡献的机制。<br>emulate： 模仿<br>underlying： 潜在的<br>monetary： 货币<br>fixed： 固定的<br>Arithmetic: 算术<br>benchmarking: 基准测试<br>discrepancies: 差异<br>philosophy: 理念<br>Ethereum improvement proposal: EIP， Ethereum 改进提案<br>first and foremost: 首先<br>specification： 规范<br>adhere: 符合<br>impromptu： 即兴<br>compatible： 兼容的<br>contentious： 有争议的<br>overHead：高昂的<br>collateral: 抵押物<br>intuitively: 直观的<br>re-orged： 重组<br>manual：手动的<br>intervention： 干涉<br>canonical: 经典的<br>shifted： 转移<br>denomination: 面值<br>demand： 需求<br>circumventing： 规避<br>deflationary: 通缩<br>deprecated: 弃用<br>redunant: 多余的<br>tampered: 被篡改<br>EOAs: Extended owned account.<br>Vulnerability: 漏洞<br>JSON-RPC: remote procedure call(rpc) protocal that uses JSON to encode message.<br>exclusively: 只，仅仅 equied to only<br>instruction: 指令<br>term: 术语<br>boilerplate: 样板<br>pioneer： 先锋<br>lucrative: 有利可图<br>mnemonic: 助记词<br>configured： 配置<br>specified： 指定的<br>analogues： 相似的<br>discarded： 丢弃<br>underscore preceding: 前下划线<br>snippet： 片段<br>dire consquences: 可怕的后果<br>unsigned integer: 无符号整数<br>allocated： 分配的<br>resilient: 弹性的<br>LIFO： 堆栈结构，it’s have pushing and poping<br>destructure: 解构<br>parenthesis: 括号<br>exception： 异常<br>declared: 声明<br>ephermal: 短暂的<br>ABI: application binary interface, that’s bridge connected compilers and applications.<br>writing up a to b: 连接a到b<br>pass into: 传递……进<br>repercurssion: 反应<br>padded out: 填充到<br>replay to: 转发到<br>associative array: 关联数组<br>brute force search: 暴力搜索<br>hit the nail on the head ： 一针见血<br>Nested： 嵌套<br>maintaining: 维护<br>Escrows: 托管<br>treadoff: 权衡<br>peroid of inactivity: 不活跃期<br>compromised: 损坏&#x2F;妥协</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode</title>
      <link href="/2021/03/21/leetcode/"/>
      <url>/2021/03/21/leetcode/</url>
      
        <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h2><h3 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h3><p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p><p>Find and return the maximum profit you can achieve.</p><p>Example 1:</p><p>Input: prices &#x3D; [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.<br>Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.<br>Total profit is 4 + 3 &#x3D; 7.<br>Example 2:</p><p>Input: prices &#x3D; [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.<br>Total profit is 4.<br>Example 3:</p><p>Input: prices &#x3D; [7,6,4,3,1]<br>Output: 0<br>Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</p><p>Constraints:</p><p>1 &lt;&#x3D; prices.length &lt;&#x3D; 3 * 104<br>0 &lt;&#x3D; prices[i] &lt;&#x3D; 104</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230202012457IZJI9K.png?token=ALJ6LATTRHPQCZO5JBBPJN3D3KQKO" alt="Picsee-20230202012457.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; prices * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> valley <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> peak <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// point continues to increase if current prices large than next prices. until we fount the lowest price.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        valley <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valley<span class="token punctuation">,</span> <span class="token string">'valley'</span><span class="token punctuation">)</span>        <span class="token comment">// point continues to increase if current prices small than next prices. until we fount the highest price.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        peak <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>peak<span class="token punctuation">,</span><span class="token string">'peak'</span><span class="token punctuation">)</span>        <span class="token comment">// add all of the difference between peak and valley</span>        maxProfit <span class="token operator">+=</span> peak <span class="token operator">-</span> valley            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/wannaSpring/snapshot/main/Picsee/Picsee-20230202012530f3xrUj.png?token=ALJ6LAWMIMJ4BM4GK5H3YSDD3KQMQ" alt="Picsee-20230202012530.png"></p><blockquote><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solutions/127712/official-solution/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solutions/127712/official-solution/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The understod of the dom</title>
      <link href="/2020/02/04/dom/"/>
      <url>/2020/02/04/dom/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#dom-%E6%A0%91%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90">https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#dom-%E6%A0%91%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOC</title>
      <link href="/2020/01/28/hoc/"/>
      <url>/2020/01/28/hoc/</url>
      
        <content type="html"><![CDATA[<h1 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h1><h2 id="What’s-HOC"><a href="#What’s-HOC" class="headerlink" title="What’s HOC"></a>What’s HOC</h2><p>High of components is react component package with another react component. so that’s just a wrapper around react component.<br>such as the function model , we also call Class Factory Methods, we can use haskell to describe that</p><pre class="line-numbers language-none"><code class="language-none">HocFactory:: W: React.Compoent &#x3D;&gt; E: React.Component<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>W(WrapperComponent) refer to component has been wrapped.<br>E(EnhancedComponent) refers to a new HOC that returns a type of React.</p><p>Parcel definection have two different meanings.</p><ol><li>Props Proxy: HOC operates on props passed to WrapperComponent W.</li><li>Inheritance Inversion: HOC extends WrappeerCompoent W.</li></ol><h2 id="HOC-Factory-implementation-methods"><a href="#HOC-Factory-implementation-methods" class="headerlink" title="HOC Factory implementation methods"></a>HOC Factory implementation methods</h2><p>In this section, we will describe the implementation for the HOC factory.</p><h3 id="Props-Proxy"><a href="#Props-Proxy" class="headerlink" title="Props Proxy"></a>Props Proxy</h3><p>The simple implementation of Props Proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The main thing here is that the Hoc returns a React element of type WrappedComponent in the render method, and we also pass in the props  recieved by the HOC, which is where name <b>Props Proxy</b> comes from.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span> <span class="token comment">// equal </span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Both create a React Element for rendering in a reconciliation process within React. If you want to learn more about React Elements vs Components, see this article by Dan Abramov, and for more information on the reconciliation process, see the documentation.</p><p>(Note: the reconciliation process can be understood as the process within React of synchronising the virtual DOM to the real DOM, including comparing the old and new virtual DOM and calculating the minimum DOM operation)</p><h4 id="The-reconciliation-process"><a href="#The-reconciliation-process" class="headerlink" title="The reconciliation process"></a>The reconciliation process</h4><p>reconciliation process can be understood that unifies behaviour, and the HOC is an implementation based on this idea.</p><h5 id="Reconciliation-process-in-react"><a href="#Reconciliation-process-in-react" class="headerlink" title="Reconciliation process in react"></a>Reconciliation process in react</h5><p>The reconciliation process is understood as the process within React of synchronising the virtual DOM to the real DOM, including comparison of the old and new virtual DOM and calculation of the minimum DOM operation.</p><h2 id="What-can-i-do-with-Props-proxy"><a href="#What-can-i-do-with-Props-proxy" class="headerlink" title="What can i do with Props proxy"></a>What can i do with Props proxy</h2><ul><li>Manipulate props</li><li>Access to component instance by Refs</li><li>Extract state</li><li>Wrapping wrappedCompoent with other components</li></ul><h3 id="Manipulate-props"><a href="#Manipulate-props" class="headerlink" title="Manipulate props"></a>Manipulate props</h3><p>U can delete, add or change props that are passed to WrappedComponent.</p><blockquote><p>When u delete props, u must to be careful, because delete options will destroy the WrappedComponent.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">user</span><span class="token operator">:</span> currentLoggedInUser      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>newProps<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Access-to-component-instance-by-refs"><a href="#Access-to-component-instance-by-refs" class="headerlink" title="Access to component instance by refs"></a>Access to component instance by refs</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">refsHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">RefsHOC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">proc</span><span class="token punctuation">(</span><span class="token parameter">wrappedComponentInstance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      wrappedComponentInstance<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">proc</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Extract-state"><a href="#Extract-state" class="headerlink" title="Extract state"></a>Extract state</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onNameChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onNameChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">onNameChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">,</span>          <span class="token literal-property property">onChange</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onNameChange        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>newProps<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uses example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@ppHOC<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>For more information on the regular bi-directional binding HOC please click <a herf='https://link.zhihu.com/?target=https%3A//github.com/franleplant/react-hoc-examples/blob/master/pp_state.js'>link</a></p></blockquote><h3 id="Wrapping-wrappedComponent-with-other-components"><a href="#Wrapping-wrappedComponent-with-other-components" class="headerlink" title="Wrapping wrappedComponent with other components"></a>Wrapping wrappedComponent with other components</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ppHOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PP</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'block'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>          <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><b>When u readding all of the content, u must know HOC is pure compoent with no side effects. if u want to use HOC to solve repeat tasks, u should create a bit of independency HOC.The HOC should be regular and no-effects.when u need create a completely component, u can combine two or more HOC.</b>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
